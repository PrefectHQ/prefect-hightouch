from typing import Any, Dict, List, Type, TypeVar

import attr

T = TypeVar("T", bound="ModelDbt")


@attr.s(auto_attribs=True)
class ModelDbt:
    """Query that is based on a dbt model

    Attributes:
        dbt_unique_id (str): Unique ID of the model assigned by dbt (usually some combination of the schema and table
            name)
        compiled_sql (str): Compiled SQL in the dbt model
        raw_sql (str): Raw SQL in the dbt model
        database (str): Name of the database containing the generated table
        schema (str): Name of the schema containing the generated table
        name (str): Name of the table generated by the dbt model
        model_id (str): Model id that refer to a dbt model
    """

    dbt_unique_id: str
    compiled_sql: str
    raw_sql: str
    database: str
    schema: str
    name: str
    model_id: str
    additional_properties: Dict[str, Any] = attr.ib(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        dbt_unique_id = self.dbt_unique_id
        compiled_sql = self.compiled_sql
        raw_sql = self.raw_sql
        database = self.database
        schema = self.schema
        name = self.name
        model_id = self.model_id

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "dbtUniqueId": dbt_unique_id,
                "compiledSql": compiled_sql,
                "rawSql": raw_sql,
                "database": database,
                "schema": schema,
                "name": name,
                "modelId": model_id,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        dbt_unique_id = d.pop("dbtUniqueId")

        compiled_sql = d.pop("compiledSql")

        raw_sql = d.pop("rawSql")

        database = d.pop("database")

        schema = d.pop("schema")

        name = d.pop("name")

        model_id = d.pop("modelId")

        model_dbt = cls(
            dbt_unique_id=dbt_unique_id,
            compiled_sql=compiled_sql,
            raw_sql=raw_sql,
            database=database,
            schema=schema,
            name=name,
            model_id=model_id,
        )

        model_dbt.additional_properties = d
        return model_dbt

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
