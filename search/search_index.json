{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-hightouch","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect integrations for interacting with Hightouch.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-hightouch</code> with <code>pip</code>:</p> <pre><code>pip install prefect-hightouch\n</code></pre> <p>Then, register to view the block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_hightouch.credentials\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#trigger-a-sync-run-and-wait-for-completion","title":"Trigger a sync run and wait for completion","text":"<pre><code>from prefect import flow\nfrom prefect_hightouch import HightouchCredentials\nfrom prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion\n@flow\ndef sync_flow():\n    hightouch_credentials = HightouchCredentials.load(\"hightouch-token\")\n    sync_metadata = trigger_sync_run_and_wait_for_completion(\n        hightouch_credentials=hightouch_credentials,\n        sync_id=12345,\n        full_resync=True,\n        max_wait_seconds=1800,\n        poll_frequency_seconds=10,\n    )\n    return sync_metadata\nsync_flow()\n</code></pre>"},{"location":"#list-get-and-trigger-syncs","title":"List, get, and trigger syncs","text":"<pre><code>from prefect import flow\nfrom prefect_hightouch import HightouchCredentials, api_models\nfrom prefect_hightouch.syncs import (\n    list_sync,\n    get_sync,\n    list_sync_runs,\n    trigger_run,\n    trigger_run_custom,\n)\n\n@flow\ndef hightouch_sync_flow():\n    hightouch_credentials = HightouchCredentials.load(\"hightouch-token\")\n\n    # list all syncs\n    syncs = list_sync(\n        hightouch_credentials, order_by=api_models.ListSyncOrderBy.CREATEDAT\n    )\n\n    # get first sync\n    sync_id = syncs[0].id\n    sync = get_sync(hightouch_credentials, sync_id)\n\n    # list previous runs\n    sync_runs = list_sync_runs(hightouch_credentials, sync_id)\n\n    # trigger by id\n    sync_run = trigger_run(\n        hightouch_credentials,\n        sync_id,\n        json_body=api_models.TriggerRunInput(full_resync=False),\n    )\n\n    # trigger by slug\n    sync_slug = syncs[0].slug\n    sync_run_2 = trigger_run_custom(\n        hightouch_credentials,\n        json_body=api_models.TriggerRunCustomInput(\n            sync_slug=sync_slug,\n            full_resync=False,\n        ),\n    )\n    return sync_runs\n\nhightouch_sync_flow()\n</code></pre>"},{"location":"#call-api-endpoints","title":"Call API endpoints","text":"<p>If an API endpoint is not exposed as a task, you can call the underlying API endpoint functions, but note, these are not Prefect tasks.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import list_destination\n\ncredentials = HightouchCredentials.load(token=\"my-service-token\")\nclient = credentials.get_client()\nresponse = list_destination.sync_detailed(client=client)\ndata = response.parsed.data\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-hightouch</code>, feel free to open an issue in the prefect-hightouch repository.</p> <p>If you have any questions or issues while using <code>prefect-hightouch</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-hightouch</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-hightouch</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/PrefectHQ/prefect-hightouch.git\n\ncd prefect-hightouch/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_hightouch.credentials","title":"<code>prefect_hightouch.credentials</code>","text":""},{"location":"credentials/#prefect_hightouch.credentials.generated","title":"<code>generated</code>","text":"<p>This is a module containing credentials, auto-generated, used to perform authenticated interactions with Hightouch.</p>"},{"location":"credentials/#prefect_hightouch.credentials.generated.HightouchCredentials","title":"<code>HightouchCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Block used to manage Hightouch authentication.</p> <p>Attributes:</p> Name Type Description <code>token</code> <code>SecretStr</code> <p>The token to authenticate with Hightouch.</p> <code>timeout</code> <code>float</code> <p>Number of seconds before the request times out.</p> <code>client_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>prefect_hightouch.api_client.client.AuthenticatedClient</code>.</p> <p>Examples:</p> <p>Load stored Hightouch credentials: <pre><code>from prefect_hightouch import HightouchCredentials\nhightouch_credentials_block = HightouchCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_hightouch/credentials/generated.py</code> <pre><code>class HightouchCredentials(Block):\n\"\"\"\n    Block used to manage Hightouch authentication.\n\n    Attributes:\n        token: The token to authenticate with Hightouch.\n\n        timeout: Number of seconds before the request times out.\n        client_kwargs: Additional keyword arguments to pass to\n            `prefect_hightouch.api_client.client.AuthenticatedClient`.\n\n    Examples:\n        Load stored Hightouch credentials:\n        ```python\n        from prefect_hightouch import HightouchCredentials\n        hightouch_credentials_block = HightouchCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"Hightouch Credentials\"\n    # _logo_url = \"&lt;UPDATE _logo_url IN __init__.py&gt;\"  # noqa\n\n    token: SecretStr = Field(default=..., description=\"Token used for authentication.\")\n    timeout: float = Field(\n        default=5.0, description=\"Number of seconds before the request times out.\"\n    )\n    client_kwargs: Dict[str, Any] = Field(\n        default_factory=dict,\n        title=\"Additional configuration\",\n        description=(\n            \"Additional keyword arguments to pass to \"\n            \"`prefect_hightouch.api_client.client.AuthenticatedClient`.\"\n        ),\n    )\n\n    def get_client(self) -&gt; AuthenticatedClient:\n\"\"\"\n        Gets a Hightouch REST API Authenticated Client.\n\n        Returns:\n            A Hightouch REST API Authenticated Client.\n\n        Example:\n            Gets a Hightouch REST API Authenticated Client.\n            ```python\n            from prefect import flow\n            from prefect_hightouch import HightouchCredentials\n\n            @flow\n            def example_get_client_flow():\n                token = \"consumer_key\"\n                hightouch_credentials = HightouchCredentials(token=token)\n                client = hightouch_credentials.get_client()\n                return client\n\n            example_get_client_flow()\n            ```\n        \"\"\"\n\n        base_url = \"https://api.hightouch.com/api/v1\"\n\n        client_kwargs = self.client_kwargs.copy()\n        token = self.token.get_secret_value()\n        prefix = \"Bearer\"\n        client = AuthenticatedClient(\n            base_url=base_url,\n            token=token,\n            prefix=prefix,\n            timeout=self.timeout,\n            **client_kwargs\n        )\n        return client\n</code></pre>"},{"location":"credentials/#prefect_hightouch.credentials.generated.HightouchCredentials.get_client","title":"<code>get_client</code>","text":"<p>Gets a Hightouch REST API Authenticated Client.</p> <p>Returns:</p> Type Description <code>AuthenticatedClient</code> <p>A Hightouch REST API Authenticated Client.</p> Example <p>Gets a Hightouch REST API Authenticated Client. <pre><code>from prefect import flow\nfrom prefect_hightouch import HightouchCredentials\n\n@flow\ndef example_get_client_flow():\n    token = \"consumer_key\"\n    hightouch_credentials = HightouchCredentials(token=token)\n    client = hightouch_credentials.get_client()\n    return client\n\nexample_get_client_flow()\n</code></pre></p> Source code in <code>prefect_hightouch/credentials/generated.py</code> <pre><code>def get_client(self) -&gt; AuthenticatedClient:\n\"\"\"\n    Gets a Hightouch REST API Authenticated Client.\n\n    Returns:\n        A Hightouch REST API Authenticated Client.\n\n    Example:\n        Gets a Hightouch REST API Authenticated Client.\n        ```python\n        from prefect import flow\n        from prefect_hightouch import HightouchCredentials\n\n        @flow\n        def example_get_client_flow():\n            token = \"consumer_key\"\n            hightouch_credentials = HightouchCredentials(token=token)\n            client = hightouch_credentials.get_client()\n            return client\n\n        example_get_client_flow()\n        ```\n    \"\"\"\n\n    base_url = \"https://api.hightouch.com/api/v1\"\n\n    client_kwargs = self.client_kwargs.copy()\n    token = self.token.get_secret_value()\n    prefix = \"Bearer\"\n    client = AuthenticatedClient(\n        base_url=base_url,\n        token=token,\n        prefix=prefix,\n        timeout=self.timeout,\n        **client_kwargs\n    )\n    return client\n</code></pre>"},{"location":"exceptions/","title":"Exceptions","text":""},{"location":"exceptions/#prefect_hightouch.exceptions","title":"<code>prefect_hightouch.exceptions</code>","text":"<p>This is a module containing exceptions used within prefect-hightouch.</p>"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunCancelled","title":"<code>HightouchSyncRunCancelled</code>","text":"<p>         Bases: <code>HightouchSyncRunError</code></p> <p>Raised when Hightouch sync run is cancelled.</p> Source code in <code>prefect_hightouch/exceptions.py</code> <pre><code>class HightouchSyncRunCancelled(HightouchSyncRunError):\n\"\"\"\n    Raised when Hightouch sync run is cancelled.\n    \"\"\"\n</code></pre>"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunDisabled","title":"<code>HightouchSyncRunDisabled</code>","text":"<p>         Bases: <code>HightouchSyncRunError</code></p> <p>Raised when Hightouch sync run is disabled.</p> Source code in <code>prefect_hightouch/exceptions.py</code> <pre><code>class HightouchSyncRunDisabled(HightouchSyncRunError):\n\"\"\"\n    Raised when Hightouch sync run is disabled.\n    \"\"\"\n</code></pre>"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunError","title":"<code>HightouchSyncRunError</code>","text":"<p>         Bases: <code>RuntimeError</code></p> <p>A generic Hightouch sync exception.</p> Source code in <code>prefect_hightouch/exceptions.py</code> <pre><code>class HightouchSyncRunError(RuntimeError):\n\"\"\"\n    A generic Hightouch sync exception.\n    \"\"\"\n</code></pre>"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunFailed","title":"<code>HightouchSyncRunFailed</code>","text":"<p>         Bases: <code>HightouchSyncRunError</code></p> <p>Raised when Hightouch sync run is failed.</p> Source code in <code>prefect_hightouch/exceptions.py</code> <pre><code>class HightouchSyncRunFailed(HightouchSyncRunError):\n\"\"\"\n    Raised when Hightouch sync run is failed.\n    \"\"\"\n</code></pre>"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunInterrupted","title":"<code>HightouchSyncRunInterrupted</code>","text":"<p>         Bases: <code>HightouchSyncRunError</code></p> <p>Raised when Hightouch sync run is interrupted.</p> Source code in <code>prefect_hightouch/exceptions.py</code> <pre><code>class HightouchSyncRunInterrupted(HightouchSyncRunError):\n\"\"\"\n    Raised when Hightouch sync run is interrupted.\n    \"\"\"\n</code></pre>"},{"location":"syncs/","title":"Syncs","text":""},{"location":"syncs/#prefect_hightouch.syncs","title":"<code>prefect_hightouch.syncs</code>","text":""},{"location":"syncs/#prefect_hightouch.syncs.flows","title":"<code>flows</code>","text":"<p>This is a module containing flows used for interacting with syncs.</p>"},{"location":"syncs/#prefect_hightouch.syncs.flows.trigger_sync_run_and_wait_for_completion","title":"<code>trigger_sync_run_and_wait_for_completion</code>  <code>async</code>","text":"<p>Flow that triggers a sync run and waits for the triggered run to complete.</p> <p>Parameters:</p> Name Type Description Default <code>hightouch_credentials</code> <code>HightouchCredentials</code> <p>Credentials to use for authentication with Hightouch.</p> required <code>sync_id</code> <code>str</code> <p>Sync ID used in formatting the endpoint URL.</p> required <code>full_resync</code> <code>bool</code> <p>Whether to resync all the rows in the query (i.e. ignoring previously synced rows).</p> <code>False</code> <code>max_wait_seconds</code> <code>int</code> <p>Maximum number of seconds to wait for the entire flow to complete.</p> <code>900</code> <code>poll_frequency_seconds</code> <code>int</code> <p>Number of seconds to wait in between checks for run completion.</p> <code>10</code> <p>Returns:</p> Type Description <code>api_models.sync.Sync</code> <ul> <li><code>id</code>: <code>str</code></li> <li><code>slug</code>: <code>str</code></li> <li><code>workspace_id</code>: <code>str</code></li> <li><code>created_at</code>: <code>str</code></li> <li><code>updated_at</code>: <code>str</code></li> <li><code>destination_id</code>: <code>str</code></li> <li><code>model_id</code>: <code>str</code></li> <li><code>configuration</code>: <code>Dict</code></li> <li><code>schedule</code>: <code>Dict</code></li> <li><code>status</code>: <code>\"models.SyncStatus\"</code></li> <li><code>disabled</code>: <code>bool</code></li> <li><code>last_run_at</code>: <code>str</code></li> <li><code>referenced_columns</code>: <code>List[str]</code></li> <li><code>primary_key</code>: <code>str</code></li> </ul> <p>Examples:</p> <p>Trigger a Hightouch sync run and wait for completion as a stand alone flow. <pre><code>import asyncio\n\nfrom prefect_hightouch import HightouchCredentials\nfrom prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion\n\nasyncio.run(\n    trigger_sync_run_and_wait_for_completion(\n        hightouch_credentials=HightouchCredentials(\n            token=\"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\"\n        ),\n        sync_id=12345,\n        full_resync=True,\n        max_wait_seconds=1800,\n        poll_frequency_seconds=5,\n    )\n)\n</code></pre></p> <p>Trigger a Hightouch sync run and wait for completion as a subflow. <pre><code>from prefect import flow\n\nfrom prefect_hightouch import HightouchCredentials\nfrom prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion\n\n@flow\ndef sync_flow():\n    hightouch_credentials = HightouchCredentials.load(\"hightouch-token\")\n    sync_metadata = trigger_sync_run_and_wait_for_completion(\n        hightouch_credentials=hightouch_credentials,\n        sync_id=12345,\n        full_resync=True,\n        max_wait_seconds=1800,\n        poll_frequency_seconds=10,\n    )\n    return sync_metadata\n\nsync_flow()\n</code></pre></p> Source code in <code>prefect_hightouch/syncs/flows.py</code> <pre><code>@flow\nasync def trigger_sync_run_and_wait_for_completion(\n    hightouch_credentials: HightouchCredentials,\n    sync_id: str,\n    full_resync: bool = False,\n    max_wait_seconds: int = 900,\n    poll_frequency_seconds: int = 10,\n) -&gt; api_models.sync.Sync:\n\"\"\"\n    Flow that triggers a sync run and waits for the triggered run to complete.\n\n    Args:\n        hightouch_credentials: Credentials to use for authentication with Hightouch.\n        sync_id: Sync ID used in formatting the endpoint URL.\n        full_resync: Whether to resync all the rows in the query\n            (i.e. ignoring previously synced rows).\n        max_wait_seconds: Maximum number of seconds to wait for the entire\n            flow to complete.\n        poll_frequency_seconds: Number of seconds to wait in between checks for\n            run completion.\n\n    Returns:\n        - `id`: `str`&lt;br&gt;\n            - `slug`: `str`&lt;br&gt;\n            - `workspace_id`: `str`&lt;br&gt;\n            - `created_at`: `str`&lt;br&gt;\n            - `updated_at`: `str`&lt;br&gt;\n            - `destination_id`: `str`&lt;br&gt;\n            - `model_id`: `str`&lt;br&gt;\n            - `configuration`: `Dict`&lt;br&gt;\n            - `schedule`: `Dict`&lt;br&gt;\n            - `status`: `\"models.SyncStatus\"`&lt;br&gt;\n            - `disabled`: `bool`&lt;br&gt;\n            - `last_run_at`: `str`&lt;br&gt;\n            - `referenced_columns`: `List[str]`&lt;br&gt;\n            - `primary_key`: `str`&lt;br&gt;\n\n    Examples:\n        Trigger a Hightouch sync run and wait for completion as a stand alone flow.\n        ```python\n        import asyncio\n\n        from prefect_hightouch import HightouchCredentials\n        from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion\n\n        asyncio.run(\n            trigger_sync_run_and_wait_for_completion(\n                hightouch_credentials=HightouchCredentials(\n                    token=\"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\"\n                ),\n                sync_id=12345,\n                full_resync=True,\n                max_wait_seconds=1800,\n                poll_frequency_seconds=5,\n            )\n        )\n        ```\n\n        Trigger a Hightouch sync run and wait for completion as a subflow.\n        ```python\n        from prefect import flow\n\n        from prefect_hightouch import HightouchCredentials\n        from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion\n\n        @flow\n        def sync_flow():\n            hightouch_credentials = HightouchCredentials.load(\"hightouch-token\")\n            sync_metadata = trigger_sync_run_and_wait_for_completion(\n                hightouch_credentials=hightouch_credentials,\n                sync_id=12345,\n                full_resync=True,\n                max_wait_seconds=1800,\n                poll_frequency_seconds=10,\n            )\n            return sync_metadata\n\n        sync_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    json_body = api_models.trigger_run_input.TriggerRunInput(full_resync=full_resync)\n    sync_run_future = await trigger_run.submit(\n        hightouch_credentials=hightouch_credentials,\n        sync_id=sync_id,\n        json_body=json_body,\n    )\n    sync_run = await sync_run_future.result()\n    logger.info(\n        \"Started sync %s run %s; open %s and append %s to view results on webpage.\",\n        repr(sync_id),\n        repr(sync_run.id),\n        \"https://app.hightouch.com/\",\n        f\"/sources/{sync_id}/runs/{sync_run.id}\",\n    )\n\n    sync_status, sync_metadata = await wait_for_sync_run_completion(\n        hightouch_credentials=hightouch_credentials,\n        sync_id=sync_id,\n        max_wait_seconds=max_wait_seconds,\n        poll_frequency_seconds=poll_frequency_seconds,\n    )\n\n    if sync_status == api_models.sync.SyncStatus.SUCCESS:\n        return sync_metadata\n    else:\n        raise TERMINAL_STATUS_EXCEPTIONS.get(sync_status, HightouchSyncRunError)(\n            f\"Sync ({sync_metadata.slug!r}, ID {sync_id!r}) \"\n            f\"was unsuccessful with {sync_status.value!r} status\"\n        )\n</code></pre>"},{"location":"syncs/#prefect_hightouch.syncs.flows.wait_for_sync_run_completion","title":"<code>wait_for_sync_run_completion</code>  <code>async</code>","text":"<p>Flow that waits for the triggered sync run to complete.</p> <p>Parameters:</p> Name Type Description Default <code>hightouch_credentials</code> <code>HightouchCredentials</code> <p>Credentials to use for authentication with Hightouch.</p> required <code>sync_id</code> <code>str</code> <p>Sync ID used in formatting the endpoint URL.</p> required <code>max_wait_seconds</code> <code>int</code> <p>Maximum number of seconds to wait for the entire flow to complete.</p> <code>900</code> <code>poll_frequency_seconds</code> <code>int</code> <p>Number of seconds to wait in between checks for run completion.</p> <code>10</code> <p>Returns:</p> Type Description <code>api_models.sync.SyncStatus</code> <ul> <li><code>value</code></li> </ul> <code>api_models.sync.Sync</code> <ul> <li><code>id</code>: <code>str</code></li> <li><code>slug</code>: <code>str</code></li> <li><code>workspace_id</code>: <code>str</code></li> <li><code>created_at</code>: <code>str</code></li> <li><code>updated_at</code>: <code>str</code></li> <li><code>destination_id</code>: <code>str</code></li> <li><code>model_id</code>: <code>str</code></li> <li><code>configuration</code>: <code>Dict</code></li> <li><code>schedule</code>: <code>Dict</code></li> <li><code>status</code>: <code>\"api_models.SyncStatus\"</code></li> <li><code>disabled</code>: <code>bool</code></li> <li><code>last_run_at</code>: <code>str</code></li> <li><code>referenced_columns</code>: <code>List[str]</code></li> <li><code>primary_key</code>: <code>str</code></li> </ul> <p>Examples:</p> <p>Wait for completion as a subflow. <pre><code>from prefect import flow\n\nfrom prefect_hightouch import HightouchCredentials\nfrom prefect_hightouch.syncs import wait_for_sync_run_completion\n\n@flow\ndef wait_flow():\n    hightouch_credentials = HightouchCredentials.load(\"hightouch-token\")\n    sync_status, sync_metadata = wait_for_sync_run_completion(\n        hightouch_credentials=hightouch_credentials,\n        sync_id=12345,\n        max_wait_seconds=1800,\n        poll_frequency_seconds=20,\n    )\n    return sync_metadata\n\nwait_flow()\n</code></pre></p> Source code in <code>prefect_hightouch/syncs/flows.py</code> <pre><code>@flow\nasync def wait_for_sync_run_completion(\n    hightouch_credentials: HightouchCredentials,\n    sync_id: str,\n    max_wait_seconds: int = 900,\n    poll_frequency_seconds: int = 10,\n) -&gt; Tuple[api_models.sync.SyncStatus, api_models.sync.Sync]:\n\"\"\"\n    Flow that waits for the triggered sync run to complete.\n\n    Args:\n        hightouch_credentials: Credentials to use for authentication with Hightouch.\n        sync_id: Sync ID used in formatting the endpoint URL.\n        max_wait_seconds: Maximum number of seconds to wait for the\n            entire flow to complete.\n        poll_frequency_seconds: Number of seconds to wait in between checks for\n            run completion.\n\n    Returns:\n        - `value`\n        - `id`: `str`&lt;br&gt;\n            - `slug`: `str`&lt;br&gt;\n            - `workspace_id`: `str`&lt;br&gt;\n            - `created_at`: `str`&lt;br&gt;\n            - `updated_at`: `str`&lt;br&gt;\n            - `destination_id`: `str`&lt;br&gt;\n            - `model_id`: `str`&lt;br&gt;\n            - `configuration`: `Dict`&lt;br&gt;\n            - `schedule`: `Dict`&lt;br&gt;\n            - `status`: `\"api_models.SyncStatus\"`&lt;br&gt;\n            - `disabled`: `bool`&lt;br&gt;\n            - `last_run_at`: `str`&lt;br&gt;\n            - `referenced_columns`: `List[str]`&lt;br&gt;\n            - `primary_key`: `str`&lt;br&gt;\n\n    Examples:\n        Wait for completion as a subflow.\n        ```python\n        from prefect import flow\n\n        from prefect_hightouch import HightouchCredentials\n        from prefect_hightouch.syncs import wait_for_sync_run_completion\n\n        @flow\n        def wait_flow():\n            hightouch_credentials = HightouchCredentials.load(\"hightouch-token\")\n            sync_status, sync_metadata = wait_for_sync_run_completion(\n                hightouch_credentials=hightouch_credentials,\n                sync_id=12345,\n                max_wait_seconds=1800,\n                poll_frequency_seconds=20,\n            )\n            return sync_metadata\n\n        wait_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    seconds_waited_for_run_completion = 0\n    wait_for = []\n\n    while seconds_waited_for_run_completion &lt;= max_wait_seconds:\n        sync_future = await get_sync.submit(\n            hightouch_credentials=hightouch_credentials,\n            sync_id=sync_id,\n            wait_for=wait_for,\n        )\n        wait_for = [sync_future]\n\n        sync_metadata = await sync_future.result()\n        sync_slug = sync_metadata.slug\n        sync_status = sync_metadata.status\n        if sync_status in TERMINAL_STATUS_EXCEPTIONS.keys():\n            return sync_status, sync_metadata\n\n        logger.info(\n            \"Waiting on sync (%s, ID %s) with sync status %s for %s seconds\",\n            repr(sync_slug),\n            repr(sync_id),\n            repr(sync_status.value),\n            poll_frequency_seconds,\n        )\n        await asyncio.sleep(poll_frequency_seconds)\n        seconds_waited_for_run_completion += poll_frequency_seconds\n\n    raise HightouchSyncRunTimedOut(\n        f\"Max wait time of {max_wait_seconds} seconds exceeded while waiting \"\n        f\"for sync ({sync_slug!r}, ID {sync_id!r})\"\n    )\n</code></pre>"},{"location":"syncs/#prefect_hightouch.syncs.generated","title":"<code>generated</code>","text":"<p>This is a module containing tasks, auto-generated from the Hightouch REST schema, used for interacting with syncs.</p>"},{"location":"syncs/#prefect_hightouch.syncs.generated.get_sync","title":"<code>get_sync</code>  <code>async</code>","text":"<p>Retrieve sync from sync ID.</p> <p>Parameters:</p> Name Type Description Default <code>hightouch_credentials</code> <code>HightouchCredentials</code> <p>Credentials to use for authentication with Hightouch.</p> required <code>sync_id</code> <code>float</code> <p>Sync ID used in formatting the endpoint URL.</p> required <p>Returns:</p> Type Description <code>api_models.sync.Sync</code> <ul> <li><code>id</code>: <code>str</code></li> <li><code>slug</code>: <code>str</code></li> <li><code>workspace_id</code>: <code>str</code></li> <li><code>created_at</code>: <code>str</code></li> <li><code>updated_at</code>: <code>str</code></li> <li><code>destination_id</code>: <code>str</code></li> <li><code>model_id</code>: <code>str</code></li> <li><code>configuration</code>: <code>Dict</code></li> <li><code>schedule</code>: <code>Dict</code></li> <li><code>status</code>: <code>\"models.SyncStatus\"</code></li> <li><code>disabled</code>: <code>bool</code></li> <li><code>last_run_at</code>: <code>str</code></li> <li><code>referenced_columns</code>: <code>List[str]</code></li> <li><code>primary_key</code>: <code>str</code></li> </ul> API Endpoint: <p><code>/syncs/{sync_id}</code></p> API Responses: Response Description 200 Ok. 401 Unauthorized. 404 Not found. Source code in <code>prefect_hightouch/syncs/generated.py</code> <pre><code>@task\n@_update_kwargs_and_execute(_get_sync_endpoint)\nasync def get_sync(*args, **kwargs) -&gt; api_models.sync.Sync:\n\"\"\"\n    Retrieve sync from sync ID.\n\n    Args:\n        hightouch_credentials (HightouchCredentials):\n            Credentials to use for authentication with Hightouch.\n        sync_id (float):\n            Sync ID used in formatting the endpoint URL.\n\n    Returns:\n        - `id`: `str`&lt;br&gt;\n            - `slug`: `str`&lt;br&gt;\n            - `workspace_id`: `str`&lt;br&gt;\n            - `created_at`: `str`&lt;br&gt;\n            - `updated_at`: `str`&lt;br&gt;\n            - `destination_id`: `str`&lt;br&gt;\n            - `model_id`: `str`&lt;br&gt;\n            - `configuration`: `Dict`&lt;br&gt;\n            - `schedule`: `Dict`&lt;br&gt;\n            - `status`: `\"models.SyncStatus\"`&lt;br&gt;\n            - `disabled`: `bool`&lt;br&gt;\n            - `last_run_at`: `str`&lt;br&gt;\n            - `referenced_columns`: `List[str]`&lt;br&gt;\n            - `primary_key`: `str`&lt;br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/syncs/{sync_id}`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Ok. |\n    | 401 | Unauthorized. |\n    | 404 | Not found. |\n    \"\"\"  # noqa\n    ...  # pragma: no cover because only the decorated function gets run\n</code></pre>"},{"location":"syncs/#prefect_hightouch.syncs.generated.list_sync","title":"<code>list_sync</code>  <code>async</code>","text":"<p>List all the syncs in the current workspace.</p> <p>Parameters:</p> Name Type Description Default <code>hightouch_credentials</code> <code>HightouchCredentials</code> <p>Credentials to use for authentication with Hightouch.</p> required <code>slug</code> <code>Optional[str]]</code> <p>Filter based on slug.</p> required <code>model_id</code> <code>Optional[float]]</code> <p>Filter based on modelId.</p> required <code>after</code> <code>Optional[datetime.datetime]]</code> <p>Select syncs that were run after given time.</p> required <code>before</code> <code>Optional[datetime.datetime]]</code> <p>Select syncs that were run before given time.</p> required <code>limit</code> <code>Optional[float]]</code> <p>Limit the number of object it returns. Default is 100.</p> required <code>order_by</code> <code>Optional[models.list_sync_order_by.ListSyncOrderBy]]</code> <p>Specify the order.</p> required <p>Returns:</p> Type Description <code>typing.List[api_models.sync.Sync]</code> <ul> <li><code>data</code>: <code>List</code></li> </ul> API Endpoint: <p><code>/syncs</code></p> API Responses: Response Description 200 Ok. 400 Bad request. 401 Unauthorized. 422 Validation Failed. Source code in <code>prefect_hightouch/syncs/generated.py</code> <pre><code>@task\n@_update_kwargs_and_execute(_list_sync_endpoint)\nasync def list_sync(*args, **kwargs) -&gt; typing.List[api_models.sync.Sync]:\n\"\"\"\n    List all the syncs in the current workspace.\n\n    Args:\n        hightouch_credentials (HightouchCredentials):\n            Credentials to use for authentication with Hightouch.\n        slug (Optional[str]]):\n            Filter based on slug.\n        model_id (Optional[float]]):\n            Filter based on modelId.\n        after (Optional[datetime.datetime]]):\n            Select syncs that were run after given time.\n        before (Optional[datetime.datetime]]):\n            Select syncs that were run before given time.\n        limit (Optional[float]]):\n            Limit the number of object it returns. Default is 100.\n        order_by (Optional[models.list_sync_order_by.ListSyncOrderBy]]):\n            Specify the order.\n\n    Returns:\n        - `data`: `List`&lt;br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/syncs`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Ok. |\n    | 400 | Bad request. |\n    | 401 | Unauthorized. |\n    | 422 | Validation Failed. |\n    \"\"\"  # noqa\n    ...  # pragma: no cover because only the decorated function gets run\n</code></pre>"},{"location":"syncs/#prefect_hightouch.syncs.generated.list_sync_runs","title":"<code>list_sync_runs</code>  <code>async</code>","text":"<p>List all sync runs under a sync.</p> <p>Parameters:</p> Name Type Description Default <code>hightouch_credentials</code> <code>HightouchCredentials</code> <p>Credentials to use for authentication with Hightouch.</p> required <code>sync_id</code> <code>float</code> <p>Sync ID used in formatting the endpoint URL.</p> required <code>run_id</code> <code>Optional[float]]</code> <p>Query for specific run id.</p> required <code>limit</code> <code>Optional[float]]</code> <p>Limit the number of object it returns. Default is 5.</p> required <code>offset</code> <code>Optional[float]]</code> <p>Setting offset from result(for pagination).</p> required <code>after</code> <code>Optional[datetime.datetime]]</code> <p>Select sync runs that are started after given timestamp.</p> required <code>before</code> <code>Optional[datetime.datetime]]</code> <p>Select sync runs that are started before certain timestamp.</p> required <code>within</code> <code>Optional[float]]</code> <p>Select sync runs that are started within last given minutes.</p> required <code>order_by</code> <code>Optional[models.list_sync_runs_order_by.ListSyncRunsOrderBy]]</code> <p>Specify the order.</p> required <p>Returns:</p> Type Description <code>typing.List[api_models.sync_run.SyncRun]</code> <ul> <li><code>data</code>: <code>List</code></li> </ul> API Endpoint: <p><code>/syncs/{sync_id}/runs</code></p> API Responses: Response Description 200 Ok. 400 Bad request. 401 Unauthorized. 422 Validation Failed. Source code in <code>prefect_hightouch/syncs/generated.py</code> <pre><code>@task\n@_update_kwargs_and_execute(_list_sync_runs_endpoint)\nasync def list_sync_runs(*args, **kwargs) -&gt; typing.List[api_models.sync_run.SyncRun]:\n\"\"\"\n    List all sync runs under a sync.\n\n    Args:\n        hightouch_credentials (HightouchCredentials):\n            Credentials to use for authentication with Hightouch.\n        sync_id (float):\n            Sync ID used in formatting the endpoint URL.\n        run_id (Optional[float]]):\n            Query for specific run id.\n        limit (Optional[float]]):\n            Limit the number of object it returns. Default is 5.\n        offset (Optional[float]]):\n            Setting offset from result(for pagination).\n        after (Optional[datetime.datetime]]):\n            Select sync runs that are started after given timestamp.\n        before (Optional[datetime.datetime]]):\n            Select sync runs that are started before certain timestamp.\n        within (Optional[float]]):\n            Select sync runs that are started within last given minutes.\n        order_by (Optional[models.list_sync_runs_order_by.ListSyncRunsOrderBy]]):\n            Specify the order.\n\n    Returns:\n        - `data`: `List`&lt;br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/syncs/{sync_id}/runs`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Ok. |\n    | 400 | Bad request. |\n    | 401 | Unauthorized. |\n    | 422 | Validation Failed. |\n    \"\"\"  # noqa\n    ...  # pragma: no cover because only the decorated function gets run\n</code></pre>"},{"location":"syncs/#prefect_hightouch.syncs.generated.trigger_run","title":"<code>trigger_run</code>  <code>async</code>","text":"<p>Trigger a new run for the given sync.  If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>hightouch_credentials</code> <code>HightouchCredentials</code> <p>Credentials to use for authentication with Hightouch.</p> required <code>sync_id</code> <code>str</code> <p>Sync ID used in formatting the endpoint URL.</p> required <code>json_body</code> <code>models.trigger_run_input.TriggerRunInput</code> <p>The input of a trigger action to run syncs.</p> required <p>Returns:</p> Type Description <code>api_models.trigger_run_output.TriggerRunOutput</code> <ul> <li><code>id</code>: <code>str</code></li> </ul> API Endpoint: <p><code>/syncs/{sync_id}/trigger</code></p> API Responses: Response Description 200 Ok. 400 Bad request. 401 Unauthorized. 422 Validation Failed. Source code in <code>prefect_hightouch/syncs/generated.py</code> <pre><code>@task\n@_update_kwargs_and_execute(_trigger_run_endpoint)\nasync def trigger_run(\n    *args, **kwargs\n) -&gt; api_models.trigger_run_output.TriggerRunOutput:\n\"\"\"\n    Trigger a new run for the given sync.  If a run is already in progress, this\n    queues a sync run that will get executed immediately after the current run\n    completes.\n\n    Args:\n        hightouch_credentials (HightouchCredentials):\n            Credentials to use for authentication with Hightouch.\n        sync_id (str):\n            Sync ID used in formatting the endpoint URL.\n        json_body (models.trigger_run_input.TriggerRunInput):\n            The input of a trigger action to run syncs.\n\n    Returns:\n        - `id`: `str`&lt;br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/syncs/{sync_id}/trigger`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Ok. |\n    | 400 | Bad request. |\n    | 401 | Unauthorized. |\n    | 422 | Validation Failed. |\n    \"\"\"  # noqa\n    ...  # pragma: no cover because only the decorated function gets run\n</code></pre>"},{"location":"syncs/#prefect_hightouch.syncs.generated.trigger_run_custom","title":"<code>trigger_run_custom</code>  <code>async</code>","text":"<p>Trigger a new run globally based on sync id or sync slug  If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>hightouch_credentials</code> <code>HightouchCredentials</code> <p>Credentials to use for authentication with Hightouch.</p> required <code>json_body</code> <code>models.trigger_run_custom_input.TriggerRunCustomInput</code> <p>The input of a trigger action to run syncs based on sync ID, slug or other filters.</p> required <p>Returns:</p> Type Description <code>api_models.trigger_run_output.TriggerRunOutput</code> <ul> <li><code>id</code>: <code>str</code></li> <li><code>message</code>: <code>str</code></li> <li><code>details</code>: <code>Dict</code></li> </ul> API Endpoint: <p><code>/syncs/trigger</code></p> API Responses: Response Description 200 Ok. 400 Bad request. 401 Unauthorized. 422 Validation Failed. Source code in <code>prefect_hightouch/syncs/generated.py</code> <pre><code>@task\n@_update_kwargs_and_execute(_trigger_run_custom_endpoint)\nasync def trigger_run_custom(\n    *args, **kwargs\n) -&gt; api_models.trigger_run_output.TriggerRunOutput:\n\"\"\"\n    Trigger a new run globally based on sync id or sync slug  If a run is already in\n    progress, this queues a sync run that will get executed immediately after\n    the current run completes.\n\n    Args:\n        hightouch_credentials (HightouchCredentials):\n            Credentials to use for authentication with Hightouch.\n        json_body (models.trigger_run_custom_input.TriggerRunCustomInput):\n            The input of a trigger action to run syncs based on sync ID, slug or\n            other filters.\n\n    Returns:\n        - `id`: `str`&lt;br&gt;\n            - `message`: `str`&lt;br&gt;\n            - `details`: `Dict`&lt;br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/syncs/trigger`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Ok. |\n    | 400 | Bad request. |\n    | 401 | Unauthorized. |\n    | 422 | Validation Failed. |\n    \"\"\"  # noqa\n    ...  # pragma: no cover because only the decorated function gets run\n</code></pre>"},{"location":"endpoints/get_destination/","title":"get_destination","text":""},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination","title":"<code>prefect_hightouch.api_client.api.default.get_destination</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>Get Destination</p> <p>Retrieve a destination based on its Hightouch ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>destination_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Destination]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_destination.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    destination_id: float,\n) -&gt; Optional[Union[Any, Destination]]:\n\"\"\"Get Destination\n\n     Retrieve a destination based on its Hightouch ID\n\n    Args:\n        client: An authenticated client.\n        destination_id (float):\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            destination_id=destination_id,\n            client=client,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>Get Destination</p> <p>Retrieve a destination based on its Hightouch ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>destination_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Response[Union[Any, Destination]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_destination.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    destination_id: float,\n) -&gt; Response[Union[Any, Destination]]:\n\"\"\"Get Destination\n\n     Retrieve a destination based on its Hightouch ID\n\n    Args:\n        client: An authenticated client.\n        destination_id (float):\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        destination_id=destination_id,\n        client=client,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination.sync","title":"<code>sync</code>","text":"<p>Get Destination</p> <p>Retrieve a destination based on its Hightouch ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>destination_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Destination]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_destination.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    destination_id: float,\n) -&gt; Optional[Union[Any, Destination]]:\n\"\"\"Get Destination\n\n     Retrieve a destination based on its Hightouch ID\n\n    Args:\n        client: An authenticated client.\n        destination_id (float):\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        destination_id=destination_id,\n        client=client,\n    ).parsed\n</code></pre>"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>Get Destination</p> <p>Retrieve a destination based on its Hightouch ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>destination_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Response[Union[Any, Destination]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_destination.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    destination_id: float,\n) -&gt; Response[Union[Any, Destination]]:\n\"\"\"Get Destination\n\n     Retrieve a destination based on its Hightouch ID\n\n    Args:\n        client: An authenticated client.\n        destination_id (float):\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        destination_id=destination_id,\n        client=client,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/get_model/","title":"get_model","text":""},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model","title":"<code>prefect_hightouch.api_client.api.default.get_model</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>Get Model</p> <p>Retrieve models from model ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>model_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Model]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_model.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    model_id: float,\n) -&gt; Optional[Union[Any, Model]]:\n\"\"\"Get Model\n\n     Retrieve models from model ID\n\n    Args:\n        client: An authenticated client.\n        model_id (float):\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            model_id=model_id,\n            client=client,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>Get Model</p> <p>Retrieve models from model ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>model_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Response[Union[Any, Model]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_model.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    model_id: float,\n) -&gt; Response[Union[Any, Model]]:\n\"\"\"Get Model\n\n     Retrieve models from model ID\n\n    Args:\n        client: An authenticated client.\n        model_id (float):\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        model_id=model_id,\n        client=client,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model.sync","title":"<code>sync</code>","text":"<p>Get Model</p> <p>Retrieve models from model ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>model_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Model]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_model.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    model_id: float,\n) -&gt; Optional[Union[Any, Model]]:\n\"\"\"Get Model\n\n     Retrieve models from model ID\n\n    Args:\n        client: An authenticated client.\n        model_id (float):\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        model_id=model_id,\n        client=client,\n    ).parsed\n</code></pre>"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>Get Model</p> <p>Retrieve models from model ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>model_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Response[Union[Any, Model]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_model.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    model_id: float,\n) -&gt; Response[Union[Any, Model]]:\n\"\"\"Get Model\n\n     Retrieve models from model ID\n\n    Args:\n        client: An authenticated client.\n        model_id (float):\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        model_id=model_id,\n        client=client,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/get_source/","title":"get_source","text":""},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source","title":"<code>prefect_hightouch.api_client.api.default.get_source</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>Get Source</p> <p>Retrieve source from source ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>source_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Source, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_source.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    source_id: float,\n) -&gt; Optional[Union[Any, Source, ValidateErrorJSON]]:\n\"\"\"Get Source\n\n     Retrieve source from source ID\n\n    Args:\n        client: An authenticated client.\n        source_id (float):\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            source_id=source_id,\n            client=client,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>Get Source</p> <p>Retrieve source from source ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>source_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Response[Union[Any, Source, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_source.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    source_id: float,\n) -&gt; Response[Union[Any, Source, ValidateErrorJSON]]:\n\"\"\"Get Source\n\n     Retrieve source from source ID\n\n    Args:\n        client: An authenticated client.\n        source_id (float):\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        source_id=source_id,\n        client=client,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source.sync","title":"<code>sync</code>","text":"<p>Get Source</p> <p>Retrieve source from source ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>source_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Source, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_source.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    source_id: float,\n) -&gt; Optional[Union[Any, Source, ValidateErrorJSON]]:\n\"\"\"Get Source\n\n     Retrieve source from source ID\n\n    Args:\n        client: An authenticated client.\n        source_id (float):\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        source_id=source_id,\n        client=client,\n    ).parsed\n</code></pre>"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>Get Source</p> <p>Retrieve source from source ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>source_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Response[Union[Any, Source, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_source.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    source_id: float,\n) -&gt; Response[Union[Any, Source, ValidateErrorJSON]]:\n\"\"\"Get Source\n\n     Retrieve source from source ID\n\n    Args:\n        client: An authenticated client.\n        source_id (float):\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        source_id=source_id,\n        client=client,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/get_sync/","title":"get_sync","text":""},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync","title":"<code>prefect_hightouch.api_client.api.default.get_sync</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>Get Sync</p> <p>Retrieve sync from sync ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Sync]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_sync.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    sync_id: float,\n) -&gt; Optional[Union[Any, Sync]]:\n\"\"\"Get Sync\n\n     Retrieve sync from sync ID\n\n    Args:\n        client: An authenticated client.\n        sync_id (float):\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            sync_id=sync_id,\n            client=client,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>Get Sync</p> <p>Retrieve sync from sync ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Response[Union[Any, Sync]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_sync.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    sync_id: float,\n) -&gt; Response[Union[Any, Sync]]:\n\"\"\"Get Sync\n\n     Retrieve sync from sync ID\n\n    Args:\n        client: An authenticated client.\n        sync_id (float):\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        sync_id=sync_id,\n        client=client,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync.sync","title":"<code>sync</code>","text":"<p>Get Sync</p> <p>Retrieve sync from sync ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Sync]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_sync.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    sync_id: float,\n) -&gt; Optional[Union[Any, Sync]]:\n\"\"\"Get Sync\n\n     Retrieve sync from sync ID\n\n    Args:\n        client: An authenticated client.\n        sync_id (float):\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        sync_id=sync_id,\n        client=client,\n    ).parsed\n</code></pre>"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>Get Sync</p> <p>Retrieve sync from sync ID</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>float</code> required <p>Returns:</p> Type Description <code>Response[Union[Any, Sync]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/get_sync.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    sync_id: float,\n) -&gt; Response[Union[Any, Sync]]:\n\"\"\"Get Sync\n\n     Retrieve sync from sync ID\n\n    Args:\n        client: An authenticated client.\n        sync_id (float):\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        sync_id=sync_id,\n        client=client,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_destination/","title":"list_destination","text":""},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination","title":"<code>prefect_hightouch.api_client.api.default.list_destination</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>List Destinations</p> <p>List the destinations in the user's workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListDestinationOrderBy]</code> <p>ListDestinationOrderBy.ID.</p> <code>ListDestinationOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListDestinationResponse200, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_destination.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListDestinationOrderBy] = ListDestinationOrderBy.ID,\n) -&gt; Optional[Union[Any, ListDestinationResponse200, ValidateErrorJSON]]:\n\"\"\"List Destinations\n\n     List the destinations in the user's workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListDestinationOrderBy]):  Default:\n            ListDestinationOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            client=client,\n            name=name,\n            slug=slug,\n            limit=limit,\n            order_by=order_by,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>List Destinations</p> <p>List the destinations in the user's workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListDestinationOrderBy]</code> <p>ListDestinationOrderBy.ID.</p> <code>ListDestinationOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListDestinationResponse200, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_destination.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListDestinationOrderBy] = ListDestinationOrderBy.ID,\n) -&gt; Response[Union[Any, ListDestinationResponse200, ValidateErrorJSON]]:\n\"\"\"List Destinations\n\n     List the destinations in the user's workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListDestinationOrderBy]):  Default:\n            ListDestinationOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination.sync","title":"<code>sync</code>","text":"<p>List Destinations</p> <p>List the destinations in the user's workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListDestinationOrderBy]</code> <p>ListDestinationOrderBy.ID.</p> <code>ListDestinationOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListDestinationResponse200, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_destination.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListDestinationOrderBy] = ListDestinationOrderBy.ID,\n) -&gt; Optional[Union[Any, ListDestinationResponse200, ValidateErrorJSON]]:\n\"\"\"List Destinations\n\n     List the destinations in the user's workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListDestinationOrderBy]):  Default:\n            ListDestinationOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>List Destinations</p> <p>List the destinations in the user's workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListDestinationOrderBy]</code> <p>ListDestinationOrderBy.ID.</p> <code>ListDestinationOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListDestinationResponse200, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_destination.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListDestinationOrderBy] = ListDestinationOrderBy.ID,\n) -&gt; Response[Union[Any, ListDestinationResponse200, ValidateErrorJSON]]:\n\"\"\"List Destinations\n\n     List the destinations in the user's workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListDestinationOrderBy]):  Default:\n            ListDestinationOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_model/","title":"list_model","text":""},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model","title":"<code>prefect_hightouch.api_client.api.default.list_model</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>List Models</p> <p>List all the models in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListModelOrderBy]</code> <code>ListModelOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListModelResponse200, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_model.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListModelOrderBy] = ListModelOrderBy.ID,\n) -&gt; Optional[Union[Any, ListModelResponse200, ValidateErrorJSON]]:\n\"\"\"List Models\n\n     List all the models in the current workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListModelOrderBy]):  Default: ListModelOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            client=client,\n            name=name,\n            slug=slug,\n            limit=limit,\n            order_by=order_by,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>List Models</p> <p>List all the models in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListModelOrderBy]</code> <code>ListModelOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListModelResponse200, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_model.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListModelOrderBy] = ListModelOrderBy.ID,\n) -&gt; Response[Union[Any, ListModelResponse200, ValidateErrorJSON]]:\n\"\"\"List Models\n\n     List all the models in the current workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListModelOrderBy]):  Default: ListModelOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model.sync","title":"<code>sync</code>","text":"<p>List Models</p> <p>List all the models in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListModelOrderBy]</code> <code>ListModelOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListModelResponse200, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_model.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListModelOrderBy] = ListModelOrderBy.ID,\n) -&gt; Optional[Union[Any, ListModelResponse200, ValidateErrorJSON]]:\n\"\"\"List Models\n\n     List all the models in the current workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListModelOrderBy]):  Default: ListModelOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>List Models</p> <p>List all the models in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListModelOrderBy]</code> <code>ListModelOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListModelResponse200, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_model.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListModelOrderBy] = ListModelOrderBy.ID,\n) -&gt; Response[Union[Any, ListModelResponse200, ValidateErrorJSON]]:\n\"\"\"List Models\n\n     List all the models in the current workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListModelOrderBy]):  Default: ListModelOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_source/","title":"list_source","text":""},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source","title":"<code>prefect_hightouch.api_client.api.default.list_source</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>List Sources</p> <p>List all the sources in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSourceOrderBy]</code> <code>ListSourceOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListSourceResponse200]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_source.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSourceOrderBy] = ListSourceOrderBy.ID,\n) -&gt; Optional[Union[Any, ListSourceResponse200]]:\n\"\"\"List Sources\n\n     List all the sources in the current workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSourceOrderBy]):  Default: ListSourceOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            client=client,\n            name=name,\n            slug=slug,\n            limit=limit,\n            order_by=order_by,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>List Sources</p> <p>List all the sources in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSourceOrderBy]</code> <code>ListSourceOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListSourceResponse200]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_source.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSourceOrderBy] = ListSourceOrderBy.ID,\n) -&gt; Response[Union[Any, ListSourceResponse200]]:\n\"\"\"List Sources\n\n     List all the sources in the current workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSourceOrderBy]):  Default: ListSourceOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source.sync","title":"<code>sync</code>","text":"<p>List Sources</p> <p>List all the sources in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSourceOrderBy]</code> <code>ListSourceOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListSourceResponse200]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_source.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSourceOrderBy] = ListSourceOrderBy.ID,\n) -&gt; Optional[Union[Any, ListSourceResponse200]]:\n\"\"\"List Sources\n\n     List all the sources in the current workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSourceOrderBy]):  Default: ListSourceOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>List Sources</p> <p>List all the sources in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>name</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSourceOrderBy]</code> <code>ListSourceOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListSourceResponse200]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_source.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    name: Union[Unset, None, str] = UNSET,\n    slug: Union[Unset, None, str] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSourceOrderBy] = ListSourceOrderBy.ID,\n) -&gt; Response[Union[Any, ListSourceResponse200]]:\n\"\"\"List Sources\n\n     List all the sources in the current workspace\n\n    Args:\n        client: An authenticated client.\n        name (Union[Unset, None, str]):\n        slug (Union[Unset, None, str]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSourceOrderBy]):  Default: ListSourceOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        name=name,\n        slug=slug,\n        limit=limit,\n        order_by=order_by,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_sync/","title":"list_sync","text":""},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync","title":"<code>prefect_hightouch.api_client.api.default.list_sync</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>List Syncs</p> <p>List all the syncs in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>model_id</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>after</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>before</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSyncOrderBy]</code> <code>ListSyncOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListSyncResponse200, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_sync.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    slug: Union[Unset, None, str] = UNSET,\n    model_id: Union[Unset, None, float] = UNSET,\n    after: Union[Unset, None, datetime.datetime] = UNSET,\n    before: Union[Unset, None, datetime.datetime] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSyncOrderBy] = ListSyncOrderBy.ID,\n) -&gt; Optional[Union[Any, ListSyncResponse200, ValidateErrorJSON]]:\n\"\"\"List Syncs\n\n     List all the syncs in the current workspace\n\n    Args:\n        client: An authenticated client.\n        slug (Union[Unset, None, str]):\n        model_id (Union[Unset, None, float]):\n        after (Union[Unset, None, datetime.datetime]):\n        before (Union[Unset, None, datetime.datetime]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSyncOrderBy]):  Default: ListSyncOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            client=client,\n            slug=slug,\n            model_id=model_id,\n            after=after,\n            before=before,\n            limit=limit,\n            order_by=order_by,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>List Syncs</p> <p>List all the syncs in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>model_id</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>after</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>before</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSyncOrderBy]</code> <code>ListSyncOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListSyncResponse200, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_sync.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    slug: Union[Unset, None, str] = UNSET,\n    model_id: Union[Unset, None, float] = UNSET,\n    after: Union[Unset, None, datetime.datetime] = UNSET,\n    before: Union[Unset, None, datetime.datetime] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSyncOrderBy] = ListSyncOrderBy.ID,\n) -&gt; Response[Union[Any, ListSyncResponse200, ValidateErrorJSON]]:\n\"\"\"List Syncs\n\n     List all the syncs in the current workspace\n\n    Args:\n        client: An authenticated client.\n        slug (Union[Unset, None, str]):\n        model_id (Union[Unset, None, float]):\n        after (Union[Unset, None, datetime.datetime]):\n        before (Union[Unset, None, datetime.datetime]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSyncOrderBy]):  Default: ListSyncOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        slug=slug,\n        model_id=model_id,\n        after=after,\n        before=before,\n        limit=limit,\n        order_by=order_by,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync.sync","title":"<code>sync</code>","text":"<p>List Syncs</p> <p>List all the syncs in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>model_id</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>after</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>before</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSyncOrderBy]</code> <code>ListSyncOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListSyncResponse200, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_sync.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    slug: Union[Unset, None, str] = UNSET,\n    model_id: Union[Unset, None, float] = UNSET,\n    after: Union[Unset, None, datetime.datetime] = UNSET,\n    before: Union[Unset, None, datetime.datetime] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSyncOrderBy] = ListSyncOrderBy.ID,\n) -&gt; Optional[Union[Any, ListSyncResponse200, ValidateErrorJSON]]:\n\"\"\"List Syncs\n\n     List all the syncs in the current workspace\n\n    Args:\n        client: An authenticated client.\n        slug (Union[Unset, None, str]):\n        model_id (Union[Unset, None, float]):\n        after (Union[Unset, None, datetime.datetime]):\n        before (Union[Unset, None, datetime.datetime]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSyncOrderBy]):  Default: ListSyncOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        client=client,\n        slug=slug,\n        model_id=model_id,\n        after=after,\n        before=before,\n        limit=limit,\n        order_by=order_by,\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>List Syncs</p> <p>List all the syncs in the current workspace</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>slug</code> <code>Union[Unset, None, str]</code> <code>UNSET</code> <code>model_id</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>after</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>before</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSyncOrderBy]</code> <code>ListSyncOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListSyncResponse200, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_sync.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    slug: Union[Unset, None, str] = UNSET,\n    model_id: Union[Unset, None, float] = UNSET,\n    after: Union[Unset, None, datetime.datetime] = UNSET,\n    before: Union[Unset, None, datetime.datetime] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSyncOrderBy] = ListSyncOrderBy.ID,\n) -&gt; Response[Union[Any, ListSyncResponse200, ValidateErrorJSON]]:\n\"\"\"List Syncs\n\n     List all the syncs in the current workspace\n\n    Args:\n        client: An authenticated client.\n        slug (Union[Unset, None, str]):\n        model_id (Union[Unset, None, float]):\n        after (Union[Unset, None, datetime.datetime]):\n        before (Union[Unset, None, datetime.datetime]):\n        limit (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSyncOrderBy]):  Default: ListSyncOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        slug=slug,\n        model_id=model_id,\n        after=after,\n        before=before,\n        limit=limit,\n        order_by=order_by,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_sync_runs/","title":"list_sync_runs","text":""},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs","title":"<code>prefect_hightouch.api_client.api.default.list_sync_runs</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>List Sync Runs</p> <p>List all sync runs under a sync</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>float</code> required <code>run_id</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>offset</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>after</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>before</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>within</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSyncRunsOrderBy]</code> <code>ListSyncRunsOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListSyncRunsResponse200, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_sync_runs.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    sync_id: float,\n    run_id: Union[Unset, None, float] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    offset: Union[Unset, None, float] = UNSET,\n    after: Union[Unset, None, datetime.datetime] = UNSET,\n    before: Union[Unset, None, datetime.datetime] = UNSET,\n    within: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSyncRunsOrderBy] = ListSyncRunsOrderBy.ID,\n) -&gt; Optional[Union[Any, ListSyncRunsResponse200, ValidateErrorJSON]]:\n\"\"\"List Sync Runs\n\n     List all sync runs under a sync\n\n    Args:\n        client: An authenticated client.\n        sync_id (float):\n        run_id (Union[Unset, None, float]):\n        limit (Union[Unset, None, float]):\n        offset (Union[Unset, None, float]):\n        after (Union[Unset, None, datetime.datetime]):\n        before (Union[Unset, None, datetime.datetime]):\n        within (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSyncRunsOrderBy]):  Default: ListSyncRunsOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            sync_id=sync_id,\n            client=client,\n            run_id=run_id,\n            limit=limit,\n            offset=offset,\n            after=after,\n            before=before,\n            within=within,\n            order_by=order_by,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>List Sync Runs</p> <p>List all sync runs under a sync</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>float</code> required <code>run_id</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>offset</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>after</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>before</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>within</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSyncRunsOrderBy]</code> <code>ListSyncRunsOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListSyncRunsResponse200, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_sync_runs.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    sync_id: float,\n    run_id: Union[Unset, None, float] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    offset: Union[Unset, None, float] = UNSET,\n    after: Union[Unset, None, datetime.datetime] = UNSET,\n    before: Union[Unset, None, datetime.datetime] = UNSET,\n    within: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSyncRunsOrderBy] = ListSyncRunsOrderBy.ID,\n) -&gt; Response[Union[Any, ListSyncRunsResponse200, ValidateErrorJSON]]:\n\"\"\"List Sync Runs\n\n     List all sync runs under a sync\n\n    Args:\n        client: An authenticated client.\n        sync_id (float):\n        run_id (Union[Unset, None, float]):\n        limit (Union[Unset, None, float]):\n        offset (Union[Unset, None, float]):\n        after (Union[Unset, None, datetime.datetime]):\n        before (Union[Unset, None, datetime.datetime]):\n        within (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSyncRunsOrderBy]):  Default: ListSyncRunsOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        sync_id=sync_id,\n        client=client,\n        run_id=run_id,\n        limit=limit,\n        offset=offset,\n        after=after,\n        before=before,\n        within=within,\n        order_by=order_by,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs.sync","title":"<code>sync</code>","text":"<p>List Sync Runs</p> <p>List all sync runs under a sync</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>float</code> required <code>run_id</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>offset</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>after</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>before</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>within</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSyncRunsOrderBy]</code> <code>ListSyncRunsOrderBy.ID</code> <p>Returns:</p> Type Description <code>Optional[Union[Any, ListSyncRunsResponse200, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_sync_runs.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    sync_id: float,\n    run_id: Union[Unset, None, float] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    offset: Union[Unset, None, float] = UNSET,\n    after: Union[Unset, None, datetime.datetime] = UNSET,\n    before: Union[Unset, None, datetime.datetime] = UNSET,\n    within: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSyncRunsOrderBy] = ListSyncRunsOrderBy.ID,\n) -&gt; Optional[Union[Any, ListSyncRunsResponse200, ValidateErrorJSON]]:\n\"\"\"List Sync Runs\n\n     List all sync runs under a sync\n\n    Args:\n        client: An authenticated client.\n        sync_id (float):\n        run_id (Union[Unset, None, float]):\n        limit (Union[Unset, None, float]):\n        offset (Union[Unset, None, float]):\n        after (Union[Unset, None, datetime.datetime]):\n        before (Union[Unset, None, datetime.datetime]):\n        within (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSyncRunsOrderBy]):  Default: ListSyncRunsOrderBy.ID.\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        sync_id=sync_id,\n        client=client,\n        run_id=run_id,\n        limit=limit,\n        offset=offset,\n        after=after,\n        before=before,\n        within=within,\n        order_by=order_by,\n    ).parsed\n</code></pre>"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>List Sync Runs</p> <p>List all sync runs under a sync</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>float</code> required <code>run_id</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>limit</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>offset</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>after</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>before</code> <code>Union[Unset, None, datetime.datetime]</code> <code>UNSET</code> <code>within</code> <code>Union[Unset, None, float]</code> <code>UNSET</code> <code>order_by</code> <code>Union[Unset, None, ListSyncRunsOrderBy]</code> <code>ListSyncRunsOrderBy.ID</code> <p>Returns:</p> Type Description <code>Response[Union[Any, ListSyncRunsResponse200, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/list_sync_runs.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    sync_id: float,\n    run_id: Union[Unset, None, float] = UNSET,\n    limit: Union[Unset, None, float] = UNSET,\n    offset: Union[Unset, None, float] = UNSET,\n    after: Union[Unset, None, datetime.datetime] = UNSET,\n    before: Union[Unset, None, datetime.datetime] = UNSET,\n    within: Union[Unset, None, float] = UNSET,\n    order_by: Union[Unset, None, ListSyncRunsOrderBy] = ListSyncRunsOrderBy.ID,\n) -&gt; Response[Union[Any, ListSyncRunsResponse200, ValidateErrorJSON]]:\n\"\"\"List Sync Runs\n\n     List all sync runs under a sync\n\n    Args:\n        client: An authenticated client.\n        sync_id (float):\n        run_id (Union[Unset, None, float]):\n        limit (Union[Unset, None, float]):\n        offset (Union[Unset, None, float]):\n        after (Union[Unset, None, datetime.datetime]):\n        before (Union[Unset, None, datetime.datetime]):\n        within (Union[Unset, None, float]):\n        order_by (Union[Unset, None, ListSyncRunsOrderBy]):  Default: ListSyncRunsOrderBy.ID.\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        sync_id=sync_id,\n        client=client,\n        run_id=run_id,\n        limit=limit,\n        offset=offset,\n        after=after,\n        before=before,\n        within=within,\n        order_by=order_by,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/trigger_run/","title":"trigger_run","text":""},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run","title":"<code>prefect_hightouch.api_client.api.default.trigger_run</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>Trigger Sync</p> <p>Trigger a new run for the given sync.</p> <p>If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>str</code> required <code>json_body</code> <code>TriggerRunInput</code> <p>The input of a trigger action to run syncs</p> required <p>Returns:</p> Type Description <code>Optional[Union[Any, TriggerRunOutput, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/trigger_run.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    sync_id: str,\n    json_body: TriggerRunInput,\n) -&gt; Optional[Union[Any, TriggerRunOutput, ValidateErrorJSON]]:\n\"\"\"Trigger Sync\n\n     Trigger a new run for the given sync.\n\n    If a run is already in progress, this queues a sync run that will get\n    executed immediately after the current run completes.\n\n    Args:\n        client: An authenticated client.\n        sync_id (str):\n        json_body (TriggerRunInput): The input of a trigger action to run syncs\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            sync_id=sync_id,\n            client=client,\n            json_body=json_body,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>Trigger Sync</p> <p>Trigger a new run for the given sync.</p> <p>If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>str</code> required <code>json_body</code> <code>TriggerRunInput</code> <p>The input of a trigger action to run syncs</p> required <p>Returns:</p> Type Description <code>Response[Union[Any, TriggerRunOutput, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/trigger_run.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    sync_id: str,\n    json_body: TriggerRunInput,\n) -&gt; Response[Union[Any, TriggerRunOutput, ValidateErrorJSON]]:\n\"\"\"Trigger Sync\n\n     Trigger a new run for the given sync.\n\n    If a run is already in progress, this queues a sync run that will get\n    executed immediately after the current run completes.\n\n    Args:\n        client: An authenticated client.\n        sync_id (str):\n        json_body (TriggerRunInput): The input of a trigger action to run syncs\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        sync_id=sync_id,\n        client=client,\n        json_body=json_body,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run.sync","title":"<code>sync</code>","text":"<p>Trigger Sync</p> <p>Trigger a new run for the given sync.</p> <p>If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>str</code> required <code>json_body</code> <code>TriggerRunInput</code> <p>The input of a trigger action to run syncs</p> required <p>Returns:</p> Type Description <code>Optional[Union[Any, TriggerRunOutput, ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/trigger_run.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    sync_id: str,\n    json_body: TriggerRunInput,\n) -&gt; Optional[Union[Any, TriggerRunOutput, ValidateErrorJSON]]:\n\"\"\"Trigger Sync\n\n     Trigger a new run for the given sync.\n\n    If a run is already in progress, this queues a sync run that will get\n    executed immediately after the current run completes.\n\n    Args:\n        client: An authenticated client.\n        sync_id (str):\n        json_body (TriggerRunInput): The input of a trigger action to run syncs\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        sync_id=sync_id,\n        client=client,\n        json_body=json_body,\n    ).parsed\n</code></pre>"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>Trigger Sync</p> <p>Trigger a new run for the given sync.</p> <p>If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>sync_id</code> <code>str</code> required <code>json_body</code> <code>TriggerRunInput</code> <p>The input of a trigger action to run syncs</p> required <p>Returns:</p> Type Description <code>Response[Union[Any, TriggerRunOutput, ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/trigger_run.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    sync_id: str,\n    json_body: TriggerRunInput,\n) -&gt; Response[Union[Any, TriggerRunOutput, ValidateErrorJSON]]:\n\"\"\"Trigger Sync\n\n     Trigger a new run for the given sync.\n\n    If a run is already in progress, this queues a sync run that will get\n    executed immediately after the current run completes.\n\n    Args:\n        client: An authenticated client.\n        sync_id (str):\n        json_body (TriggerRunInput): The input of a trigger action to run syncs\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        sync_id=sync_id,\n        client=client,\n        json_body=json_body,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/trigger_run_custom/","title":"trigger_run_custom","text":""},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom","title":"<code>prefect_hightouch.api_client.api.default.trigger_run_custom</code>","text":"<p>This is a module containing functions, auto-generated from the  REST schema, but note these are not Prefect tasks.</p> <p>Example usage shown below; be sure to replace <code>endpoint_fn</code> with the desired endpoint function.</p> <pre><code>from prefect_hightouch.credentials import HightouchCredentials\nfrom prefect_hightouch.api_client.api.default import endpoint_fn\n\ncredentials = HightouchCredentials(token=\"my-service-token\")\nclient = credentials.get_client()\nresult = endpoint_fn.sync(client=client)\n</code></pre> <p>The functions are described below:</p> <ul> <li><code>asyncio</code>: Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited.</li> <li><code>asyncio_detailed</code>: Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited.</li> <li><code>sync</code>: Blocking request that returns parsed data (if successful) or None.</li> <li><code>sync_detailed</code>: Blocking request that always returns a Request, optionally with parsed set if the request was successful.</li> </ul>"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom.asyncio","title":"<code>asyncio</code>  <code>async</code>","text":"<p>Trigger Sync From ID or Slug</p> <p>Trigger a new run globally based on sync id or sync slug</p> <p>If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>json_body</code> <code>TriggerRunCustomInput</code> <p>The input of a trigger action to run syncs based on sync ID, slug or other filters</p> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Union[TriggerRunOutput, ValidateErrorJSON], ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/trigger_run_custom.py</code> <pre><code>async def asyncio(\n    client: AuthenticatedClient,\n    json_body: TriggerRunCustomInput,\n) -&gt; Optional[\n    Union[Any, Union[TriggerRunOutput, ValidateErrorJSON], ValidateErrorJSON]\n]:\n\"\"\"Trigger Sync From ID or Slug\n\n     Trigger a new run globally based on sync id or sync slug\n\n    If a run is already in progress, this queues a sync run that will get\n    executed immediately after the current run completes.\n\n    Args:\n        client: An authenticated client.\n        json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on\n            sync ID, slug or other filters\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return (\n        await asyncio_detailed(\n            client=client,\n            json_body=json_body,\n        )\n    ).parsed\n</code></pre>"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom.asyncio_detailed","title":"<code>asyncio_detailed</code>  <code>async</code>","text":"<p>Trigger Sync From ID or Slug</p> <p>Trigger a new run globally based on sync id or sync slug</p> <p>If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>json_body</code> <code>TriggerRunCustomInput</code> <p>The input of a trigger action to run syncs based on sync ID, slug or other filters</p> required <p>Returns:</p> Type Description <code>Response[Union[Any, Union[TriggerRunOutput, ValidateErrorJSON], ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/trigger_run_custom.py</code> <pre><code>async def asyncio_detailed(\n    client: AuthenticatedClient,\n    json_body: TriggerRunCustomInput,\n) -&gt; Response[\n    Union[Any, Union[TriggerRunOutput, ValidateErrorJSON], ValidateErrorJSON]\n]:\n\"\"\"Trigger Sync From ID or Slug\n\n     Trigger a new run globally based on sync id or sync slug\n\n    If a run is already in progress, this queues a sync run that will get\n    executed immediately after the current run completes.\n\n    Args:\n        client: An authenticated client.\n        json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on\n            sync ID, slug or other filters\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        json_body=json_body,\n    )\n\n    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:\n        response = await _client.request(**kwargs)\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom.sync","title":"<code>sync</code>","text":"<p>Trigger Sync From ID or Slug</p> <p>Trigger a new run globally based on sync id or sync slug</p> <p>If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>json_body</code> <code>TriggerRunCustomInput</code> <p>The input of a trigger action to run syncs based on sync ID, slug or other filters</p> required <p>Returns:</p> Type Description <code>Optional[Union[Any, Union[TriggerRunOutput, ValidateErrorJSON], ValidateErrorJSON]]</code> <p>The parsed response.</p> Source code in <code>prefect_hightouch/api_client/api/default/trigger_run_custom.py</code> <pre><code>def sync(\n    client: AuthenticatedClient,\n    json_body: TriggerRunCustomInput,\n) -&gt; Optional[\n    Union[Any, Union[TriggerRunOutput, ValidateErrorJSON], ValidateErrorJSON]\n]:\n\"\"\"Trigger Sync From ID or Slug\n\n     Trigger a new run globally based on sync id or sync slug\n\n    If a run is already in progress, this queues a sync run that will get\n    executed immediately after the current run completes.\n\n    Args:\n        client: An authenticated client.\n        json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on\n            sync ID, slug or other filters\n\n    Returns:\n        The parsed response.\n    \"\"\"\n\n    return sync_detailed(\n        client=client,\n        json_body=json_body,\n    ).parsed\n</code></pre>"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom.sync_detailed","title":"<code>sync_detailed</code>","text":"<p>Trigger Sync From ID or Slug</p> <p>Trigger a new run globally based on sync id or sync slug</p> <p>If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AuthenticatedClient</code> <p>An authenticated client.</p> required <code>json_body</code> <code>TriggerRunCustomInput</code> <p>The input of a trigger action to run syncs based on sync ID, slug or other filters</p> required <p>Returns:</p> Type Description <code>Response[Union[Any, Union[TriggerRunOutput, ValidateErrorJSON], ValidateErrorJSON]]</code> <p>The response.</p> Source code in <code>prefect_hightouch/api_client/api/default/trigger_run_custom.py</code> <pre><code>def sync_detailed(\n    client: AuthenticatedClient,\n    json_body: TriggerRunCustomInput,\n) -&gt; Response[\n    Union[Any, Union[TriggerRunOutput, ValidateErrorJSON], ValidateErrorJSON]\n]:\n\"\"\"Trigger Sync From ID or Slug\n\n     Trigger a new run globally based on sync id or sync slug\n\n    If a run is already in progress, this queues a sync run that will get\n    executed immediately after the current run completes.\n\n    Args:\n        client: An authenticated client.\n        json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on\n            sync ID, slug or other filters\n\n    Returns:\n        The response.\n    \"\"\"\n\n    kwargs = _get_kwargs(\n        client=client,\n        json_body=json_body,\n    )\n\n    response = httpx.request(\n        verify=client.verify_ssl,\n        **kwargs,\n    )\n\n    return _build_response(response=response)\n</code></pre>"},{"location":"models/cron_schedule/","title":"CronSchedule","text":""},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule","title":"<code>prefect_hightouch.api_client.models.cron_schedule</code>","text":""},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule","title":"<code>CronSchedule</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>expression</code> <code>str</code> Source code in <code>prefect_hightouch/api_client/models/cron_schedule.py</code> <pre><code>class CronSchedule(BaseModel):\n\"\"\"\n    Attributes:\n        expression (str):\n    \"\"\"\n\n    expression: str = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        expression = self.expression\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"expression\": expression,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        expression = d.pop(\"expression\")\n\n        cron_schedule = cls(\n            expression=expression,\n        )\n\n        cron_schedule.additional_properties = d\n        return cron_schedule\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.expression","title":"<code>expression: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/cron_schedule.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    expression = d.pop(\"expression\")\n\n    cron_schedule = cls(\n        expression=expression,\n    )\n\n    cron_schedule.additional_properties = d\n    return cron_schedule\n</code></pre>"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/cron_schedule.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    expression = self.expression\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"expression\": expression,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/dbt_schedule/","title":"DbtSchedule","text":""},{"location":"models/dbt_schedule/#prefect_hightouch.api_client.models.dbt_schedule","title":"<code>prefect_hightouch.api_client.models.dbt_schedule</code>","text":""},{"location":"models/dbt_schedule_account/","title":"DbtScheduleAccount","text":""},{"location":"models/dbt_schedule_account/#prefect_hightouch.api_client.models.dbt_schedule_account","title":"<code>prefect_hightouch.api_client.models.dbt_schedule_account</code>","text":""},{"location":"models/dbt_schedule_job/","title":"DbtScheduleJob","text":""},{"location":"models/dbt_schedule_job/#prefect_hightouch.api_client.models.dbt_schedule_job","title":"<code>prefect_hightouch.api_client.models.dbt_schedule_job</code>","text":""},{"location":"models/destination/","title":"Destination","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination","title":"<code>prefect_hightouch.api_client.models.destination</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination","title":"<code>Destination</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The service receiving your data (e.g. Salesforce, Hubspot, Customer.io, or a SFTP server)</p> <pre><code>Attributes:\nconfiguration (DestinationConfiguration): The destination's configuration. This specifies general metadata about\n        destination, like hostname and username.\n        Hightouch will be using this configuration to connect to destination.\n\n        The schema depends on the destination.\n\n        Consumers should NOT make assumptions on the contents of the\n        configuration. It may change as Hightouch updates its internal code.\n    created_at (datetime.datetime): The timestamp when the destination was created\n    id (str): The destination's id\nname (str): The destination's name\n    slug (str): The destination's slug\nsyncs (List[str]): A list of syncs that sync to this destination.\ntype (str): The destination's type (e.g. salesforce or hubspot).\nupdated_at (datetime.datetime): The timestamp when the destination was last updated\nworkspace_id (str): The id of the workspace that the destination belongs to\n</code></pre> Source code in <code>prefect_hightouch/api_client/models/destination.py</code> <pre><code>class Destination(BaseModel):\n\"\"\"The service receiving your data (e.g. Salesforce, Hubspot, Customer.io, or a\n    SFTP server)\n\n        Attributes:\n            configuration (DestinationConfiguration): The destination's configuration. This specifies general metadata about\n                destination, like hostname and username.\n                Hightouch will be using this configuration to connect to destination.\n\n                The schema depends on the destination.\n\n                Consumers should NOT make assumptions on the contents of the\n                configuration. It may change as Hightouch updates its internal code.\n            created_at (datetime.datetime): The timestamp when the destination was created\n            id (str): The destination's id\n            name (str): The destination's name\n            slug (str): The destination's slug\n            syncs (List[str]): A list of syncs that sync to this destination.\n            type (str): The destination's type (e.g. salesforce or hubspot).\n            updated_at (datetime.datetime): The timestamp when the destination was last updated\n            workspace_id (str): The id of the workspace that the destination belongs to\n    \"\"\"\n\n    configuration: DestinationConfiguration = None\n    created_at: datetime.datetime = None\n    id: str = None\n    name: str = None\n    slug: str = None\n    syncs: List[str] = None\n    type: str = None\n    updated_at: datetime.datetime = None\n    workspace_id: str = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        configuration = self.configuration.to_dict()\n\n        created_at = self.created_at.isoformat()\n\n        id = self.id\n        name = self.name\n        slug = self.slug\n        syncs = self.syncs\n\n        type = self.type\n        updated_at = self.updated_at.isoformat()\n\n        workspace_id = self.workspace_id\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"configuration\": configuration,\n                \"createdAt\": created_at,\n                \"id\": id,\n                \"name\": name,\n                \"slug\": slug,\n                \"syncs\": syncs,\n                \"type\": type,\n                \"updatedAt\": updated_at,\n                \"workspaceId\": workspace_id,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        configuration = DestinationConfiguration.from_dict(d.pop(\"configuration\"))\n\n        created_at = isoparse(d.pop(\"createdAt\"))\n\n        id = d.pop(\"id\")\n\n        name = d.pop(\"name\")\n\n        slug = d.pop(\"slug\")\n\n        syncs = cast(List[str], d.pop(\"syncs\"))\n\n        type = d.pop(\"type\")\n\n        updated_at = isoparse(d.pop(\"updatedAt\"))\n\n        workspace_id = d.pop(\"workspaceId\")\n\n        destination = cls(\n            configuration=configuration,\n            created_at=created_at,\n            id=id,\n            name=name,\n            slug=slug,\n            syncs=syncs,\n            type=type,\n            updated_at=updated_at,\n            workspace_id=workspace_id,\n        )\n\n        destination.additional_properties = d\n        return destination\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.configuration","title":"<code>configuration: DestinationConfiguration = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.created_at","title":"<code>created_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.id","title":"<code>id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.name","title":"<code>name: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.slug","title":"<code>slug: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.syncs","title":"<code>syncs: List[str] = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.type","title":"<code>type: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.updated_at","title":"<code>updated_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.workspace_id","title":"<code>workspace_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/destination.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    configuration = DestinationConfiguration.from_dict(d.pop(\"configuration\"))\n\n    created_at = isoparse(d.pop(\"createdAt\"))\n\n    id = d.pop(\"id\")\n\n    name = d.pop(\"name\")\n\n    slug = d.pop(\"slug\")\n\n    syncs = cast(List[str], d.pop(\"syncs\"))\n\n    type = d.pop(\"type\")\n\n    updated_at = isoparse(d.pop(\"updatedAt\"))\n\n    workspace_id = d.pop(\"workspaceId\")\n\n    destination = cls(\n        configuration=configuration,\n        created_at=created_at,\n        id=id,\n        name=name,\n        slug=slug,\n        syncs=syncs,\n        type=type,\n        updated_at=updated_at,\n        workspace_id=workspace_id,\n    )\n\n    destination.additional_properties = d\n    return destination\n</code></pre>"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/destination.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    configuration = self.configuration.to_dict()\n\n    created_at = self.created_at.isoformat()\n\n    id = self.id\n    name = self.name\n    slug = self.slug\n    syncs = self.syncs\n\n    type = self.type\n    updated_at = self.updated_at.isoformat()\n\n    workspace_id = self.workspace_id\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"configuration\": configuration,\n            \"createdAt\": created_at,\n            \"id\": id,\n            \"name\": name,\n            \"slug\": slug,\n            \"syncs\": syncs,\n            \"type\": type,\n            \"updatedAt\": updated_at,\n            \"workspaceId\": workspace_id,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/destination_configuration/","title":"DestinationConfiguration","text":""},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration","title":"<code>prefect_hightouch.api_client.models.destination_configuration</code>","text":""},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration","title":"<code>DestinationConfiguration</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The destination's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination.</p> <p>The schema depends on the destination.</p> <p>Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code.</p> Source code in <code>prefect_hightouch/api_client/models/destination_configuration.py</code> <pre><code>class DestinationConfiguration(BaseModel):\n\"\"\"The destination's configuration. This specifies general metadata about destination, like hostname and username.\n    Hightouch will be using this configuration to connect to destination.\n\n    The schema depends on the destination.\n\n    Consumers should NOT make assumptions on the contents of the\n    configuration. It may change as Hightouch updates its internal code.\n\n    \"\"\"\n\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update({})\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        destination_configuration = cls()\n\n        destination_configuration.additional_properties = d\n        return destination_configuration\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/destination_configuration.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    destination_configuration = cls()\n\n    destination_configuration.additional_properties = d\n    return destination_configuration\n</code></pre>"},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/destination_configuration.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update({})\n\n    return field_dict\n</code></pre>"},{"location":"models/interval/","title":"Interval","text":""},{"location":"models/interval/#prefect_hightouch.api_client.models.interval","title":"<code>prefect_hightouch.api_client.models.interval</code>","text":""},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval","title":"<code>Interval</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>quantity</code> <code>float</code> <code>unit</code> <code>IntervalUnit</code> Source code in <code>prefect_hightouch/api_client/models/interval.py</code> <pre><code>class Interval(BaseModel):\n\"\"\"\n    Attributes:\n        quantity (float):\n        unit (IntervalUnit):\n    \"\"\"\n\n    quantity: float = None\n    unit: IntervalUnit = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        quantity = self.quantity\n        unit = self.unit.value\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"quantity\": quantity,\n                \"unit\": unit,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        quantity = d.pop(\"quantity\")\n\n        unit = IntervalUnit(d.pop(\"unit\"))\n\n        interval = cls(\n            quantity=quantity,\n            unit=unit,\n        )\n\n        interval.additional_properties = d\n        return interval\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.quantity","title":"<code>quantity: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.unit","title":"<code>unit: IntervalUnit = None</code>  <code>class-attribute</code>","text":""},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/interval.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    quantity = d.pop(\"quantity\")\n\n    unit = IntervalUnit(d.pop(\"unit\"))\n\n    interval = cls(\n        quantity=quantity,\n        unit=unit,\n    )\n\n    interval.additional_properties = d\n    return interval\n</code></pre>"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/interval.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    quantity = self.quantity\n    unit = self.unit.value\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"quantity\": quantity,\n            \"unit\": unit,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/interval_schedule/","title":"IntervalSchedule","text":""},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule","title":"<code>prefect_hightouch.api_client.models.interval_schedule</code>","text":""},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule","title":"<code>IntervalSchedule</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>interval</code> <code>Interval</code> Source code in <code>prefect_hightouch/api_client/models/interval_schedule.py</code> <pre><code>class IntervalSchedule(BaseModel):\n\"\"\"\n    Attributes:\n        interval (Interval):\n    \"\"\"\n\n    interval: Interval = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        interval = self.interval.to_dict()\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"interval\": interval,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        interval = Interval.from_dict(d.pop(\"interval\"))\n\n        interval_schedule = cls(\n            interval=interval,\n        )\n\n        interval_schedule.additional_properties = d\n        return interval_schedule\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.interval","title":"<code>interval: Interval = None</code>  <code>class-attribute</code>","text":""},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/interval_schedule.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    interval = Interval.from_dict(d.pop(\"interval\"))\n\n    interval_schedule = cls(\n        interval=interval,\n    )\n\n    interval_schedule.additional_properties = d\n    return interval_schedule\n</code></pre>"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/interval_schedule.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    interval = self.interval.to_dict()\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"interval\": interval,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/interval_unit/","title":"IntervalUnit","text":""},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit","title":"<code>prefect_hightouch.api_client.models.interval_unit</code>","text":""},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit.IntervalUnit","title":"<code>IntervalUnit</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/interval_unit.py</code> <pre><code>class IntervalUnit(str, Enum):\n    MINUTE = \"minute\"\n    HOUR = \"hour\"\n    DAY = \"day\"\n    WEEK = \"week\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit.IntervalUnit.DAY","title":"<code>DAY = 'day'</code>  <code>class-attribute</code>","text":""},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit.IntervalUnit.HOUR","title":"<code>HOUR = 'hour'</code>  <code>class-attribute</code>","text":""},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit.IntervalUnit.WEEK","title":"<code>WEEK = 'week'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_destination_order_by/","title":"ListDestinationOrderBy","text":""},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by","title":"<code>prefect_hightouch.api_client.models.list_destination_order_by</code>","text":""},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by.ListDestinationOrderBy","title":"<code>ListDestinationOrderBy</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/list_destination_order_by.py</code> <pre><code>class ListDestinationOrderBy(str, Enum):\n    ID = \"id\"\n    NAME = \"name\"\n    SLUG = \"slug\"\n    CREATEDAT = \"createdAt\"\n    UPDATEDAT = \"updatedAt\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by.ListDestinationOrderBy.ID","title":"<code>ID = 'id'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by.ListDestinationOrderBy.NAME","title":"<code>NAME = 'name'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by.ListDestinationOrderBy.SLUG","title":"<code>SLUG = 'slug'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_destination_response_200/","title":"ListDestinationResponse200","text":""},{"location":"models/list_destination_response_200/#prefect_hightouch.api_client.models.list_destination_response_200","title":"<code>prefect_hightouch.api_client.models.list_destination_response_200</code>","text":""},{"location":"models/list_model_order_by/","title":"ListModelOrderBy","text":""},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by","title":"<code>prefect_hightouch.api_client.models.list_model_order_by</code>","text":""},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by.ListModelOrderBy","title":"<code>ListModelOrderBy</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/list_model_order_by.py</code> <pre><code>class ListModelOrderBy(str, Enum):\n    ID = \"id\"\n    NAME = \"name\"\n    SLUG = \"slug\"\n    CREATEDAT = \"createdAt\"\n    UPDATEDAT = \"updatedAt\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by.ListModelOrderBy.ID","title":"<code>ID = 'id'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by.ListModelOrderBy.NAME","title":"<code>NAME = 'name'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by.ListModelOrderBy.SLUG","title":"<code>SLUG = 'slug'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_model_response_200/","title":"ListModelResponse200","text":""},{"location":"models/list_model_response_200/#prefect_hightouch.api_client.models.list_model_response_200","title":"<code>prefect_hightouch.api_client.models.list_model_response_200</code>","text":""},{"location":"models/list_source_order_by/","title":"ListSourceOrderBy","text":""},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by","title":"<code>prefect_hightouch.api_client.models.list_source_order_by</code>","text":""},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by.ListSourceOrderBy","title":"<code>ListSourceOrderBy</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/list_source_order_by.py</code> <pre><code>class ListSourceOrderBy(str, Enum):\n    ID = \"id\"\n    NAME = \"name\"\n    SLUG = \"slug\"\n    CREATEDAT = \"createdAt\"\n    UPDATEDAT = \"updatedAt\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by.ListSourceOrderBy.ID","title":"<code>ID = 'id'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by.ListSourceOrderBy.NAME","title":"<code>NAME = 'name'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by.ListSourceOrderBy.SLUG","title":"<code>SLUG = 'slug'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_source_response_200/","title":"ListSourceResponse200","text":""},{"location":"models/list_source_response_200/#prefect_hightouch.api_client.models.list_source_response_200","title":"<code>prefect_hightouch.api_client.models.list_source_response_200</code>","text":""},{"location":"models/list_sync_order_by/","title":"ListSyncOrderBy","text":""},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by","title":"<code>prefect_hightouch.api_client.models.list_sync_order_by</code>","text":""},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by.ListSyncOrderBy","title":"<code>ListSyncOrderBy</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/list_sync_order_by.py</code> <pre><code>class ListSyncOrderBy(str, Enum):\n    ID = \"id\"\n    NAME = \"name\"\n    SLUG = \"slug\"\n    CREATEDAT = \"createdAt\"\n    UPDATEDAT = \"updatedAt\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by.ListSyncOrderBy.ID","title":"<code>ID = 'id'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by.ListSyncOrderBy.NAME","title":"<code>NAME = 'name'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by.ListSyncOrderBy.SLUG","title":"<code>SLUG = 'slug'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_sync_response_200/","title":"ListSyncResponse200","text":""},{"location":"models/list_sync_response_200/#prefect_hightouch.api_client.models.list_sync_response_200","title":"<code>prefect_hightouch.api_client.models.list_sync_response_200</code>","text":""},{"location":"models/list_sync_runs_order_by/","title":"ListSyncRunsOrderBy","text":""},{"location":"models/list_sync_runs_order_by/#prefect_hightouch.api_client.models.list_sync_runs_order_by","title":"<code>prefect_hightouch.api_client.models.list_sync_runs_order_by</code>","text":""},{"location":"models/list_sync_runs_order_by/#prefect_hightouch.api_client.models.list_sync_runs_order_by.ListSyncRunsOrderBy","title":"<code>ListSyncRunsOrderBy</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/list_sync_runs_order_by.py</code> <pre><code>class ListSyncRunsOrderBy(str, Enum):\n    ID = \"id\"\n    CREATEDAT = \"createdAt\"\n    STARTEDAT = \"startedAt\"\n    FINISHEDAT = \"finishedAt\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/list_sync_runs_order_by/#prefect_hightouch.api_client.models.list_sync_runs_order_by.ListSyncRunsOrderBy.ID","title":"<code>ID = 'id'</code>  <code>class-attribute</code>","text":""},{"location":"models/list_sync_runs_response_200/","title":"ListSyncRunsResponse200","text":""},{"location":"models/list_sync_runs_response_200/#prefect_hightouch.api_client.models.list_sync_runs_response_200","title":"<code>prefect_hightouch.api_client.models.list_sync_runs_response_200</code>","text":""},{"location":"models/model/","title":"Model","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model","title":"<code>prefect_hightouch.api_client.models.model</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model","title":"<code>Model</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The SQL query that pulls data from your source to send to your destination. We send your SQL query directly to your source so any SQL that is valid for your source (including functions) is valid in Hightouch.</p> <pre><code>Attributes:\ncreated_at (datetime.datetime): The timestamp when model was created\nid (str): The id of the model\nis_schema (bool): If is_schema is true, the model is just used to build other models.\nEither as part of visual querying, or as the root of a visual query.\nname (str): The name of the model\nprimary_key (str): The primary key will be null if the query doesn't get directly synced (e.g. a relationship\n        table for visual querying)\n    query_type (str): The type of the query. Available options: custom, raw_sql, tabel, dbt and visual.\n    slug (str): The slug of the model\n    source_id (str): The id of the source that model is connected to\n    syncs (List[str]): The list of id of syncs that uses this model\n    tags (ModelTags): The tags of the model\n    updated_at (datetime.datetime): The timestamp when model was lastly updated\n    workspace_id (str): The id of the workspace where the model belongs to\n    custom (Union[Unset, ModelCustom]): Custom query for sources that doesn't support sql. For example, Airtable.\ndbt (Union[Unset, ModelDbt]): Query that is based on a dbt model\nraw (Union[Unset, ModelRaw]): Standard raw SQL query\ntable (Union[Unset, ModelTable]): Table-based query that fetches on a table instead of SQL\nvisual (Union[Unset, ModelVisual]): Visual query, used by audience\n</code></pre> Source code in <code>prefect_hightouch/api_client/models/model.py</code> <pre><code>class Model(BaseModel):\n\"\"\"The SQL query that pulls data from your source to send to your destination.\n    We send your SQL query directly to your source so any SQL that is valid for your source (including functions) is\n    valid in Hightouch.\n\n        Attributes:\n            created_at (datetime.datetime): The timestamp when model was created\n            id (str): The id of the model\n            is_schema (bool): If is_schema is true, the model is just used to build other models.\n                Either as part of visual querying, or as the root of a visual query.\n            name (str): The name of the model\n            primary_key (str): The primary key will be null if the query doesn't get directly synced (e.g. a relationship\n                table for visual querying)\n            query_type (str): The type of the query. Available options: custom, raw_sql, tabel, dbt and visual.\n            slug (str): The slug of the model\n            source_id (str): The id of the source that model is connected to\n            syncs (List[str]): The list of id of syncs that uses this model\n            tags (ModelTags): The tags of the model\n            updated_at (datetime.datetime): The timestamp when model was lastly updated\n            workspace_id (str): The id of the workspace where the model belongs to\n            custom (Union[Unset, ModelCustom]): Custom query for sources that doesn't support sql. For example, Airtable.\n            dbt (Union[Unset, ModelDbt]): Query that is based on a dbt model\n            raw (Union[Unset, ModelRaw]): Standard raw SQL query\n            table (Union[Unset, ModelTable]): Table-based query that fetches on a table instead of SQL\n            visual (Union[Unset, ModelVisual]): Visual query, used by audience\n    \"\"\"\n\n    created_at: datetime.datetime = None\n    id: str = None\n    is_schema: bool = None\n    name: str = None\n    primary_key: str = None\n    query_type: str = None\n    slug: str = None\n    source_id: str = None\n    syncs: List[str] = None\n    tags: ModelTags = None\n    updated_at: datetime.datetime = None\n    workspace_id: str = None\n    custom: Union[Unset, ModelCustom] = UNSET\n    dbt: Union[Unset, ModelDbt] = UNSET\n    raw: Union[Unset, ModelRaw] = UNSET\n    table: Union[Unset, ModelTable] = UNSET\n    visual: Union[Unset, ModelVisual] = UNSET\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        created_at = self.created_at.isoformat()\n\n        id = self.id\n        is_schema = self.is_schema\n        name = self.name\n        primary_key = self.primary_key\n        query_type = self.query_type\n        slug = self.slug\n        source_id = self.source_id\n        syncs = self.syncs\n\n        tags = self.tags.to_dict()\n\n        updated_at = self.updated_at.isoformat()\n\n        workspace_id = self.workspace_id\n        custom: Union[Unset, Dict[str, Any]] = UNSET\n        if not isinstance(self.custom, Unset):\n            custom = self.custom.to_dict()\n\n        dbt: Union[Unset, Dict[str, Any]] = UNSET\n        if not isinstance(self.dbt, Unset):\n            dbt = self.dbt.to_dict()\n\n        raw: Union[Unset, Dict[str, Any]] = UNSET\n        if not isinstance(self.raw, Unset):\n            raw = self.raw.to_dict()\n\n        table: Union[Unset, Dict[str, Any]] = UNSET\n        if not isinstance(self.table, Unset):\n            table = self.table.to_dict()\n\n        visual: Union[Unset, Dict[str, Any]] = UNSET\n        if not isinstance(self.visual, Unset):\n            visual = self.visual.to_dict()\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"createdAt\": created_at,\n                \"id\": id,\n                \"isSchema\": is_schema,\n                \"name\": name,\n                \"primaryKey\": primary_key,\n                \"queryType\": query_type,\n                \"slug\": slug,\n                \"sourceId\": source_id,\n                \"syncs\": syncs,\n                \"tags\": tags,\n                \"updatedAt\": updated_at,\n                \"workspaceId\": workspace_id,\n            }\n        )\n        if custom is not UNSET:\n            field_dict[\"custom\"] = custom\n        if dbt is not UNSET:\n            field_dict[\"dbt\"] = dbt\n        if raw is not UNSET:\n            field_dict[\"raw\"] = raw\n        if table is not UNSET:\n            field_dict[\"table\"] = table\n        if visual is not UNSET:\n            field_dict[\"visual\"] = visual\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        created_at = isoparse(d.pop(\"createdAt\"))\n\n        id = d.pop(\"id\")\n\n        is_schema = d.pop(\"isSchema\")\n\n        name = d.pop(\"name\")\n\n        primary_key = d.pop(\"primaryKey\")\n\n        query_type = d.pop(\"queryType\")\n\n        slug = d.pop(\"slug\")\n\n        source_id = d.pop(\"sourceId\")\n\n        syncs = cast(List[str], d.pop(\"syncs\"))\n\n        tags = ModelTags.from_dict(d.pop(\"tags\"))\n\n        updated_at = isoparse(d.pop(\"updatedAt\"))\n\n        workspace_id = d.pop(\"workspaceId\")\n\n        _custom = d.pop(\"custom\", UNSET)\n        custom: Union[Unset, ModelCustom]\n        if isinstance(_custom, Unset):\n            custom = UNSET\n        else:\n            custom = ModelCustom.from_dict(_custom)\n\n        _dbt = d.pop(\"dbt\", UNSET)\n        dbt: Union[Unset, ModelDbt]\n        if isinstance(_dbt, Unset):\n            dbt = UNSET\n        else:\n            dbt = ModelDbt.from_dict(_dbt)\n\n        _raw = d.pop(\"raw\", UNSET)\n        raw: Union[Unset, ModelRaw]\n        if isinstance(_raw, Unset):\n            raw = UNSET\n        else:\n            raw = ModelRaw.from_dict(_raw)\n\n        _table = d.pop(\"table\", UNSET)\n        table: Union[Unset, ModelTable]\n        if isinstance(_table, Unset):\n            table = UNSET\n        else:\n            table = ModelTable.from_dict(_table)\n\n        _visual = d.pop(\"visual\", UNSET)\n        visual: Union[Unset, ModelVisual]\n        if isinstance(_visual, Unset):\n            visual = UNSET\n        else:\n            visual = ModelVisual.from_dict(_visual)\n\n        model = cls(\n            created_at=created_at,\n            id=id,\n            is_schema=is_schema,\n            name=name,\n            primary_key=primary_key,\n            query_type=query_type,\n            slug=slug,\n            source_id=source_id,\n            syncs=syncs,\n            tags=tags,\n            updated_at=updated_at,\n            workspace_id=workspace_id,\n            custom=custom,\n            dbt=dbt,\n            raw=raw,\n            table=table,\n            visual=visual,\n        )\n\n        model.additional_properties = d\n        return model\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.created_at","title":"<code>created_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.custom","title":"<code>custom: Union[Unset, ModelCustom] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.dbt","title":"<code>dbt: Union[Unset, ModelDbt] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.id","title":"<code>id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.is_schema","title":"<code>is_schema: bool = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.name","title":"<code>name: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.primary_key","title":"<code>primary_key: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.query_type","title":"<code>query_type: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.raw","title":"<code>raw: Union[Unset, ModelRaw] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.slug","title":"<code>slug: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.source_id","title":"<code>source_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.syncs","title":"<code>syncs: List[str] = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.table","title":"<code>table: Union[Unset, ModelTable] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.tags","title":"<code>tags: ModelTags = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.updated_at","title":"<code>updated_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.visual","title":"<code>visual: Union[Unset, ModelVisual] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.workspace_id","title":"<code>workspace_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    created_at = isoparse(d.pop(\"createdAt\"))\n\n    id = d.pop(\"id\")\n\n    is_schema = d.pop(\"isSchema\")\n\n    name = d.pop(\"name\")\n\n    primary_key = d.pop(\"primaryKey\")\n\n    query_type = d.pop(\"queryType\")\n\n    slug = d.pop(\"slug\")\n\n    source_id = d.pop(\"sourceId\")\n\n    syncs = cast(List[str], d.pop(\"syncs\"))\n\n    tags = ModelTags.from_dict(d.pop(\"tags\"))\n\n    updated_at = isoparse(d.pop(\"updatedAt\"))\n\n    workspace_id = d.pop(\"workspaceId\")\n\n    _custom = d.pop(\"custom\", UNSET)\n    custom: Union[Unset, ModelCustom]\n    if isinstance(_custom, Unset):\n        custom = UNSET\n    else:\n        custom = ModelCustom.from_dict(_custom)\n\n    _dbt = d.pop(\"dbt\", UNSET)\n    dbt: Union[Unset, ModelDbt]\n    if isinstance(_dbt, Unset):\n        dbt = UNSET\n    else:\n        dbt = ModelDbt.from_dict(_dbt)\n\n    _raw = d.pop(\"raw\", UNSET)\n    raw: Union[Unset, ModelRaw]\n    if isinstance(_raw, Unset):\n        raw = UNSET\n    else:\n        raw = ModelRaw.from_dict(_raw)\n\n    _table = d.pop(\"table\", UNSET)\n    table: Union[Unset, ModelTable]\n    if isinstance(_table, Unset):\n        table = UNSET\n    else:\n        table = ModelTable.from_dict(_table)\n\n    _visual = d.pop(\"visual\", UNSET)\n    visual: Union[Unset, ModelVisual]\n    if isinstance(_visual, Unset):\n        visual = UNSET\n    else:\n        visual = ModelVisual.from_dict(_visual)\n\n    model = cls(\n        created_at=created_at,\n        id=id,\n        is_schema=is_schema,\n        name=name,\n        primary_key=primary_key,\n        query_type=query_type,\n        slug=slug,\n        source_id=source_id,\n        syncs=syncs,\n        tags=tags,\n        updated_at=updated_at,\n        workspace_id=workspace_id,\n        custom=custom,\n        dbt=dbt,\n        raw=raw,\n        table=table,\n        visual=visual,\n    )\n\n    model.additional_properties = d\n    return model\n</code></pre>"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    created_at = self.created_at.isoformat()\n\n    id = self.id\n    is_schema = self.is_schema\n    name = self.name\n    primary_key = self.primary_key\n    query_type = self.query_type\n    slug = self.slug\n    source_id = self.source_id\n    syncs = self.syncs\n\n    tags = self.tags.to_dict()\n\n    updated_at = self.updated_at.isoformat()\n\n    workspace_id = self.workspace_id\n    custom: Union[Unset, Dict[str, Any]] = UNSET\n    if not isinstance(self.custom, Unset):\n        custom = self.custom.to_dict()\n\n    dbt: Union[Unset, Dict[str, Any]] = UNSET\n    if not isinstance(self.dbt, Unset):\n        dbt = self.dbt.to_dict()\n\n    raw: Union[Unset, Dict[str, Any]] = UNSET\n    if not isinstance(self.raw, Unset):\n        raw = self.raw.to_dict()\n\n    table: Union[Unset, Dict[str, Any]] = UNSET\n    if not isinstance(self.table, Unset):\n        table = self.table.to_dict()\n\n    visual: Union[Unset, Dict[str, Any]] = UNSET\n    if not isinstance(self.visual, Unset):\n        visual = self.visual.to_dict()\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"createdAt\": created_at,\n            \"id\": id,\n            \"isSchema\": is_schema,\n            \"name\": name,\n            \"primaryKey\": primary_key,\n            \"queryType\": query_type,\n            \"slug\": slug,\n            \"sourceId\": source_id,\n            \"syncs\": syncs,\n            \"tags\": tags,\n            \"updatedAt\": updated_at,\n            \"workspaceId\": workspace_id,\n        }\n    )\n    if custom is not UNSET:\n        field_dict[\"custom\"] = custom\n    if dbt is not UNSET:\n        field_dict[\"dbt\"] = dbt\n    if raw is not UNSET:\n        field_dict[\"raw\"] = raw\n    if table is not UNSET:\n        field_dict[\"table\"] = table\n    if visual is not UNSET:\n        field_dict[\"visual\"] = visual\n\n    return field_dict\n</code></pre>"},{"location":"models/model_custom/","title":"ModelCustom","text":""},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom","title":"<code>prefect_hightouch.api_client.models.model_custom</code>","text":""},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom","title":"<code>ModelCustom</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Custom query for sources that doesn't support sql. For example, Airtable.</p> <p>Attributes:</p> Name Type Description <code>query</code> <code>Any</code> Source code in <code>prefect_hightouch/api_client/models/model_custom.py</code> <pre><code>class ModelCustom(BaseModel):\n\"\"\"Custom query for sources that doesn't support sql. For example, Airtable.\n\n    Attributes:\n        query (Any):\n    \"\"\"\n\n    query: Any = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        query = self.query\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"query\": query,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        query = d.pop(\"query\")\n\n        model_custom = cls(\n            query=query,\n        )\n\n        model_custom.additional_properties = d\n        return model_custom\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.query","title":"<code>query: Any = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model_custom.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    query = d.pop(\"query\")\n\n    model_custom = cls(\n        query=query,\n    )\n\n    model_custom.additional_properties = d\n    return model_custom\n</code></pre>"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model_custom.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    query = self.query\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"query\": query,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/model_dbt/","title":"ModelDbt","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt","title":"<code>prefect_hightouch.api_client.models.model_dbt</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt","title":"<code>ModelDbt</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Query that is based on a dbt model</p> <p>Attributes:</p> Name Type Description <code>compiled_sql</code> <code>str</code> <p>Compiled SQL in the dbt model</p> <code>database</code> <code>str</code> <p>Name of the database containing the generated table</p> <code>dbt_unique_id</code> <code>str</code> <p>Unique ID of the model assigned by dbt (usually some combination of the schema and table name)</p> <code>model_id</code> <code>str</code> <p>Model id that refer to a dbt model</p> <code>name</code> <code>str</code> <p>Name of the table generated by the dbt model</p> <code>raw_sql</code> <code>str</code> <p>Raw SQL in the dbt model</p> <code>schema</code> <code>str</code> <p>Name of the schema containing the generated table</p> Source code in <code>prefect_hightouch/api_client/models/model_dbt.py</code> <pre><code>class ModelDbt(BaseModel):\n\"\"\"Query that is based on a dbt model\n\n    Attributes:\n        compiled_sql (str): Compiled SQL in the dbt model\n        database (str): Name of the database containing the generated table\n        dbt_unique_id (str): Unique ID of the model assigned by dbt (usually some combination of the schema and table\n            name)\n        model_id (str): Model id that refer to a dbt model\n        name (str): Name of the table generated by the dbt model\n        raw_sql (str): Raw SQL in the dbt model\n        schema (str): Name of the schema containing the generated table\n    \"\"\"\n\n    compiled_sql: str = None\n    database: str = None\n    dbt_unique_id: str = None\n    model_id: str = None\n    name: str = None\n    raw_sql: str = None\n    schema_: str = Field(default=..., alias=\"schema\")\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        compiled_sql = self.compiled_sql\n        database = self.database\n        dbt_unique_id = self.dbt_unique_id\n        model_id = self.model_id\n        name = self.name\n        raw_sql = self.raw_sql\n        schema = self.schema\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"compiledSql\": compiled_sql,\n                \"database\": database,\n                \"dbtUniqueId\": dbt_unique_id,\n                \"modelId\": model_id,\n                \"name\": name,\n                \"rawSql\": raw_sql,\n                \"schema\": schema,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        compiled_sql = d.pop(\"compiledSql\")\n\n        database = d.pop(\"database\")\n\n        dbt_unique_id = d.pop(\"dbtUniqueId\")\n\n        model_id = d.pop(\"modelId\")\n\n        name = d.pop(\"name\")\n\n        raw_sql = d.pop(\"rawSql\")\n\n        schema = d.pop(\"schema\")\n\n        model_dbt = cls(\n            compiled_sql=compiled_sql,\n            database=database,\n            dbt_unique_id=dbt_unique_id,\n            model_id=model_id,\n            name=name,\n            raw_sql=raw_sql,\n            schema=schema,\n        )\n\n        model_dbt.additional_properties = d\n        return model_dbt\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.compiled_sql","title":"<code>compiled_sql: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.database","title":"<code>database: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.dbt_unique_id","title":"<code>dbt_unique_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.model_id","title":"<code>model_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.name","title":"<code>name: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.raw_sql","title":"<code>raw_sql: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.schema_","title":"<code>schema_: str = Field(default=Ellipsis, alias='schema')</code>  <code>class-attribute</code>","text":""},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model_dbt.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    compiled_sql = d.pop(\"compiledSql\")\n\n    database = d.pop(\"database\")\n\n    dbt_unique_id = d.pop(\"dbtUniqueId\")\n\n    model_id = d.pop(\"modelId\")\n\n    name = d.pop(\"name\")\n\n    raw_sql = d.pop(\"rawSql\")\n\n    schema = d.pop(\"schema\")\n\n    model_dbt = cls(\n        compiled_sql=compiled_sql,\n        database=database,\n        dbt_unique_id=dbt_unique_id,\n        model_id=model_id,\n        name=name,\n        raw_sql=raw_sql,\n        schema=schema,\n    )\n\n    model_dbt.additional_properties = d\n    return model_dbt\n</code></pre>"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model_dbt.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    compiled_sql = self.compiled_sql\n    database = self.database\n    dbt_unique_id = self.dbt_unique_id\n    model_id = self.model_id\n    name = self.name\n    raw_sql = self.raw_sql\n    schema = self.schema\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"compiledSql\": compiled_sql,\n            \"database\": database,\n            \"dbtUniqueId\": dbt_unique_id,\n            \"modelId\": model_id,\n            \"name\": name,\n            \"rawSql\": raw_sql,\n            \"schema\": schema,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/model_raw/","title":"ModelRaw","text":""},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw","title":"<code>prefect_hightouch.api_client.models.model_raw</code>","text":""},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw","title":"<code>ModelRaw</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Standard raw SQL query</p> <p>Attributes:</p> Name Type Description <code>sql</code> <code>str</code> Source code in <code>prefect_hightouch/api_client/models/model_raw.py</code> <pre><code>class ModelRaw(BaseModel):\n\"\"\"Standard raw SQL query\n\n    Attributes:\n        sql (str):\n    \"\"\"\n\n    sql: str = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        sql = self.sql\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"sql\": sql,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        sql = d.pop(\"sql\")\n\n        model_raw = cls(\n            sql=sql,\n        )\n\n        model_raw.additional_properties = d\n        return model_raw\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.sql","title":"<code>sql: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model_raw.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    sql = d.pop(\"sql\")\n\n    model_raw = cls(\n        sql=sql,\n    )\n\n    model_raw.additional_properties = d\n    return model_raw\n</code></pre>"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model_raw.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    sql = self.sql\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"sql\": sql,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/model_table/","title":"ModelTable","text":""},{"location":"models/model_table/#prefect_hightouch.api_client.models.model_table","title":"<code>prefect_hightouch.api_client.models.model_table</code>","text":""},{"location":"models/model_tags/","title":"ModelTags","text":""},{"location":"models/model_tags/#prefect_hightouch.api_client.models.model_tags","title":"<code>prefect_hightouch.api_client.models.model_tags</code>","text":""},{"location":"models/model_visual/","title":"ModelVisual","text":""},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual","title":"<code>prefect_hightouch.api_client.models.model_visual</code>","text":""},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual","title":"<code>ModelVisual</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Visual query, used by audience</p> <p>Attributes:</p> Name Type Description <code>filter_</code> <code>Any</code> <code>parent_id</code> <code>str</code> <p>Parent id of the schema that visual query is based on</p> <code>primary_label</code> <code>str</code> <code>secondary_label</code> <code>str</code> Source code in <code>prefect_hightouch/api_client/models/model_visual.py</code> <pre><code>class ModelVisual(BaseModel):\n\"\"\"Visual query, used by audience\n\n    Attributes:\n        filter_ (Any):\n        parent_id (str): Parent id of the schema that visual query is based on\n        primary_label (str):\n        secondary_label (str):\n    \"\"\"\n\n    filter_: Any = None\n    parent_id: str = None\n    primary_label: str = None\n    secondary_label: str = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        filter_ = self.filter_\n        parent_id = self.parent_id\n        primary_label = self.primary_label\n        secondary_label = self.secondary_label\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"filter\": filter_,\n                \"parentId\": parent_id,\n                \"primaryLabel\": primary_label,\n                \"secondaryLabel\": secondary_label,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        filter_ = d.pop(\"filter\")\n\n        parent_id = d.pop(\"parentId\")\n\n        primary_label = d.pop(\"primaryLabel\")\n\n        secondary_label = d.pop(\"secondaryLabel\")\n\n        model_visual = cls(\n            filter_=filter_,\n            parent_id=parent_id,\n            primary_label=primary_label,\n            secondary_label=secondary_label,\n        )\n\n        model_visual.additional_properties = d\n        return model_visual\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.filter_","title":"<code>filter_: Any = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.parent_id","title":"<code>parent_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.primary_label","title":"<code>primary_label: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.secondary_label","title":"<code>secondary_label: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model_visual.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    filter_ = d.pop(\"filter\")\n\n    parent_id = d.pop(\"parentId\")\n\n    primary_label = d.pop(\"primaryLabel\")\n\n    secondary_label = d.pop(\"secondaryLabel\")\n\n    model_visual = cls(\n        filter_=filter_,\n        parent_id=parent_id,\n        primary_label=primary_label,\n        secondary_label=secondary_label,\n    )\n\n    model_visual.additional_properties = d\n    return model_visual\n</code></pre>"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/model_visual.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    filter_ = self.filter_\n    parent_id = self.parent_id\n    primary_label = self.primary_label\n    secondary_label = self.secondary_label\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"filter\": filter_,\n            \"parentId\": parent_id,\n            \"primaryLabel\": primary_label,\n            \"secondaryLabel\": secondary_label,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/record_day_boolean_or_undefined/","title":"RecordDayBooleanOrUndefined","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined","title":"<code>prefect_hightouch.api_client.models.record_day_boolean_or_undefined</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined","title":"<code>RecordDayBooleanOrUndefined</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Construct a type with a set of properties K of type T</p> <p>Attributes:</p> Name Type Description <code>friday</code> <code>Union[Unset, bool]</code> <code>monday</code> <code>Union[Unset, bool]</code> <code>saturday</code> <code>Union[Unset, bool]</code> <code>sunday</code> <code>Union[Unset, bool]</code> <code>thursday</code> <code>Union[Unset, bool]</code> <code>tuesday</code> <code>Union[Unset, bool]</code> <code>wednesday</code> <code>Union[Unset, bool]</code> Source code in <code>prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py</code> <pre><code>class RecordDayBooleanOrUndefined(BaseModel):\n\"\"\"Construct a type with a set of properties K of type T\n\n    Attributes:\n        friday (Union[Unset, bool]):\n        monday (Union[Unset, bool]):\n        saturday (Union[Unset, bool]):\n        sunday (Union[Unset, bool]):\n        thursday (Union[Unset, bool]):\n        tuesday (Union[Unset, bool]):\n        wednesday (Union[Unset, bool]):\n    \"\"\"\n\n    friday: Union[Unset, bool] = UNSET\n    monday: Union[Unset, bool] = UNSET\n    saturday: Union[Unset, bool] = UNSET\n    sunday: Union[Unset, bool] = UNSET\n    thursday: Union[Unset, bool] = UNSET\n    tuesday: Union[Unset, bool] = UNSET\n    wednesday: Union[Unset, bool] = UNSET\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        friday = self.friday\n        monday = self.monday\n        saturday = self.saturday\n        sunday = self.sunday\n        thursday = self.thursday\n        tuesday = self.tuesday\n        wednesday = self.wednesday\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update({})\n        if friday is not UNSET:\n            field_dict[\"friday\"] = friday\n        if monday is not UNSET:\n            field_dict[\"monday\"] = monday\n        if saturday is not UNSET:\n            field_dict[\"saturday\"] = saturday\n        if sunday is not UNSET:\n            field_dict[\"sunday\"] = sunday\n        if thursday is not UNSET:\n            field_dict[\"thursday\"] = thursday\n        if tuesday is not UNSET:\n            field_dict[\"tuesday\"] = tuesday\n        if wednesday is not UNSET:\n            field_dict[\"wednesday\"] = wednesday\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        friday = d.pop(\"friday\", UNSET)\n\n        monday = d.pop(\"monday\", UNSET)\n\n        saturday = d.pop(\"saturday\", UNSET)\n\n        sunday = d.pop(\"sunday\", UNSET)\n\n        thursday = d.pop(\"thursday\", UNSET)\n\n        tuesday = d.pop(\"tuesday\", UNSET)\n\n        wednesday = d.pop(\"wednesday\", UNSET)\n\n        record_day_boolean_or_undefined = cls(\n            friday=friday,\n            monday=monday,\n            saturday=saturday,\n            sunday=sunday,\n            thursday=thursday,\n            tuesday=tuesday,\n            wednesday=wednesday,\n        )\n\n        record_day_boolean_or_undefined.additional_properties = d\n        return record_day_boolean_or_undefined\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.friday","title":"<code>friday: Union[Unset, bool] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.monday","title":"<code>monday: Union[Unset, bool] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.saturday","title":"<code>saturday: Union[Unset, bool] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.sunday","title":"<code>sunday: Union[Unset, bool] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.thursday","title":"<code>thursday: Union[Unset, bool] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.tuesday","title":"<code>tuesday: Union[Unset, bool] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.wednesday","title":"<code>wednesday: Union[Unset, bool] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    friday = d.pop(\"friday\", UNSET)\n\n    monday = d.pop(\"monday\", UNSET)\n\n    saturday = d.pop(\"saturday\", UNSET)\n\n    sunday = d.pop(\"sunday\", UNSET)\n\n    thursday = d.pop(\"thursday\", UNSET)\n\n    tuesday = d.pop(\"tuesday\", UNSET)\n\n    wednesday = d.pop(\"wednesday\", UNSET)\n\n    record_day_boolean_or_undefined = cls(\n        friday=friday,\n        monday=monday,\n        saturday=saturday,\n        sunday=sunday,\n        thursday=thursday,\n        tuesday=tuesday,\n        wednesday=wednesday,\n    )\n\n    record_day_boolean_or_undefined.additional_properties = d\n    return record_day_boolean_or_undefined\n</code></pre>"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    friday = self.friday\n    monday = self.monday\n    saturday = self.saturday\n    sunday = self.sunday\n    thursday = self.thursday\n    tuesday = self.tuesday\n    wednesday = self.wednesday\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update({})\n    if friday is not UNSET:\n        field_dict[\"friday\"] = friday\n    if monday is not UNSET:\n        field_dict[\"monday\"] = monday\n    if saturday is not UNSET:\n        field_dict[\"saturday\"] = saturday\n    if sunday is not UNSET:\n        field_dict[\"sunday\"] = sunday\n    if thursday is not UNSET:\n        field_dict[\"thursday\"] = thursday\n    if tuesday is not UNSET:\n        field_dict[\"tuesday\"] = tuesday\n    if wednesday is not UNSET:\n        field_dict[\"wednesday\"] = wednesday\n\n    return field_dict\n</code></pre>"},{"location":"models/source/","title":"Source","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source","title":"<code>prefect_hightouch.api_client.models.source</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source","title":"<code>Source</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The database or warehouse where your data is stored. The starting point for a Hightouch data pipeline.</p> <pre><code>Attributes:\nconfiguration (SourceConfiguration): The source's configuration. This specifies general metadata about sources,\n        like connection details\n        Hightouch will use this configuration to connect to underlying source.\n\n        The schema depends on the destination.\n\n        Consumers should NOT make assumptions on the contents of the\n        configuration. It may change as Hightouch updates its internal code.\n    created_at (datetime.datetime): The timestamp when the source was created\n    id (str): The source's id\nname (str): The source's name\n    slug (str): The source's slug\ntype (str): The source's type (e.g. snowflake or postgres).\nupdated_at (datetime.datetime): The timestamp when the source was last updated\nworkspace_id (str): The id of the workspace that the source belongs to\n</code></pre> Source code in <code>prefect_hightouch/api_client/models/source.py</code> <pre><code>class Source(BaseModel):\n\"\"\"The database or warehouse where your data is stored. The starting point for\n    a Hightouch data pipeline.\n\n        Attributes:\n            configuration (SourceConfiguration): The source's configuration. This specifies general metadata about sources,\n                like connection details\n                Hightouch will use this configuration to connect to underlying source.\n\n                The schema depends on the destination.\n\n                Consumers should NOT make assumptions on the contents of the\n                configuration. It may change as Hightouch updates its internal code.\n            created_at (datetime.datetime): The timestamp when the source was created\n            id (str): The source's id\n            name (str): The source's name\n            slug (str): The source's slug\n            type (str): The source's type (e.g. snowflake or postgres).\n            updated_at (datetime.datetime): The timestamp when the source was last updated\n            workspace_id (str): The id of the workspace that the source belongs to\n    \"\"\"\n\n    configuration: SourceConfiguration = None\n    created_at: datetime.datetime = None\n    id: str = None\n    name: str = None\n    slug: str = None\n    type: str = None\n    updated_at: datetime.datetime = None\n    workspace_id: str = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        configuration = self.configuration.to_dict()\n\n        created_at = self.created_at.isoformat()\n\n        id = self.id\n        name = self.name\n        slug = self.slug\n        type = self.type\n        updated_at = self.updated_at.isoformat()\n\n        workspace_id = self.workspace_id\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"configuration\": configuration,\n                \"createdAt\": created_at,\n                \"id\": id,\n                \"name\": name,\n                \"slug\": slug,\n                \"type\": type,\n                \"updatedAt\": updated_at,\n                \"workspaceId\": workspace_id,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        configuration = SourceConfiguration.from_dict(d.pop(\"configuration\"))\n\n        created_at = isoparse(d.pop(\"createdAt\"))\n\n        id = d.pop(\"id\")\n\n        name = d.pop(\"name\")\n\n        slug = d.pop(\"slug\")\n\n        type = d.pop(\"type\")\n\n        updated_at = isoparse(d.pop(\"updatedAt\"))\n\n        workspace_id = d.pop(\"workspaceId\")\n\n        source = cls(\n            configuration=configuration,\n            created_at=created_at,\n            id=id,\n            name=name,\n            slug=slug,\n            type=type,\n            updated_at=updated_at,\n            workspace_id=workspace_id,\n        )\n\n        source.additional_properties = d\n        return source\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.configuration","title":"<code>configuration: SourceConfiguration = None</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.created_at","title":"<code>created_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.id","title":"<code>id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.name","title":"<code>name: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.slug","title":"<code>slug: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.type","title":"<code>type: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.updated_at","title":"<code>updated_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.workspace_id","title":"<code>workspace_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/source.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    configuration = SourceConfiguration.from_dict(d.pop(\"configuration\"))\n\n    created_at = isoparse(d.pop(\"createdAt\"))\n\n    id = d.pop(\"id\")\n\n    name = d.pop(\"name\")\n\n    slug = d.pop(\"slug\")\n\n    type = d.pop(\"type\")\n\n    updated_at = isoparse(d.pop(\"updatedAt\"))\n\n    workspace_id = d.pop(\"workspaceId\")\n\n    source = cls(\n        configuration=configuration,\n        created_at=created_at,\n        id=id,\n        name=name,\n        slug=slug,\n        type=type,\n        updated_at=updated_at,\n        workspace_id=workspace_id,\n    )\n\n    source.additional_properties = d\n    return source\n</code></pre>"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/source.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    configuration = self.configuration.to_dict()\n\n    created_at = self.created_at.isoformat()\n\n    id = self.id\n    name = self.name\n    slug = self.slug\n    type = self.type\n    updated_at = self.updated_at.isoformat()\n\n    workspace_id = self.workspace_id\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"configuration\": configuration,\n            \"createdAt\": created_at,\n            \"id\": id,\n            \"name\": name,\n            \"slug\": slug,\n            \"type\": type,\n            \"updatedAt\": updated_at,\n            \"workspaceId\": workspace_id,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/source_configuration/","title":"SourceConfiguration","text":""},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration","title":"<code>prefect_hightouch.api_client.models.source_configuration</code>","text":""},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration","title":"<code>SourceConfiguration</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The source's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source.</p> <p>The schema depends on the destination.</p> <p>Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code.</p> Source code in <code>prefect_hightouch/api_client/models/source_configuration.py</code> <pre><code>class SourceConfiguration(BaseModel):\n\"\"\"The source's configuration. This specifies general metadata about sources, like connection details\n    Hightouch will use this configuration to connect to underlying source.\n\n    The schema depends on the destination.\n\n    Consumers should NOT make assumptions on the contents of the\n    configuration. It may change as Hightouch updates its internal code.\n\n    \"\"\"\n\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update({})\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        source_configuration = cls()\n\n        source_configuration.additional_properties = d\n        return source_configuration\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/source_configuration.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    source_configuration = cls()\n\n    source_configuration.additional_properties = d\n    return source_configuration\n</code></pre>"},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/source_configuration.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update({})\n\n    return field_dict\n</code></pre>"},{"location":"models/sync/","title":"Sync","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync","title":"<code>prefect_hightouch.api_client.models.sync</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync","title":"<code>Sync</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Syncs define how data from models are mapped to destinations. Each time a sync runs, Hightouch calculates the rows that have changed since the last run, and syncs them to Sync's destination.</p> <pre><code>Attributes:\nconfiguration (SyncConfiguration): The sync's configuration. This specifies how data is mapped, among other\n        configuration.\n\n        The schema depends on the destination.\n\n        Consumers should NOT make assumptions on the contents of the\n        configuration. It may change as Hightouch updates its internal code.\n    created_at (datetime.datetime): The timestamp when the sync was created\n    destination_id (str): The id of the Destination that sync is connected to\n    disabled (bool): Whether the sync has been disabled by the user.\n    id (str): The sync's id\nlast_run_at (datetime.datetime): The timestamp of the last sync run\nmodel_id (str): The id of the Model that sync is connected to\nprimary_key (str): The primary key that sync uses to identify data from source\nreferenced_columns (List[str]): The reference column that sync depends on to sync data from source\nschedule (SyncSchedule): The scheduling configuration. It can be triggerd based on several ways:\n\nInterval: the sync will be trigged based on certain interval(minutes/hours/days/weeks)\n\nCron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron.\n\nVisual: the sync will be trigged based a visual cron configuration on UI\n\nDBT-cloud: the sync will be trigged based on a dbt cloud job\nslug (str): The sync's slug\nstatus (SyncStatus):\nupdated_at (datetime.datetime): The timestamp when the sync was last updated\nworkspace_id (str): The id of the workspace that the sync belongs to\n</code></pre> Source code in <code>prefect_hightouch/api_client/models/sync.py</code> <pre><code>class Sync(BaseModel):\n\"\"\"Syncs define how data from models are mapped to destinations. Each time a\n    sync runs, Hightouch calculates the rows that have changed since the last\n    run, and syncs them to Sync's destination.\n\n        Attributes:\n            configuration (SyncConfiguration): The sync's configuration. This specifies how data is mapped, among other\n                configuration.\n\n                The schema depends on the destination.\n\n                Consumers should NOT make assumptions on the contents of the\n                configuration. It may change as Hightouch updates its internal code.\n            created_at (datetime.datetime): The timestamp when the sync was created\n            destination_id (str): The id of the Destination that sync is connected to\n            disabled (bool): Whether the sync has been disabled by the user.\n            id (str): The sync's id\n            last_run_at (datetime.datetime): The timestamp of the last sync run\n            model_id (str): The id of the Model that sync is connected to\n            primary_key (str): The primary key that sync uses to identify data from source\n            referenced_columns (List[str]): The reference column that sync depends on to sync data from source\n            schedule (SyncSchedule): The scheduling configuration. It can be triggerd based on several ways:\n\n                Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks)\n\n                Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron.\n\n                Visual: the sync will be trigged based a visual cron configuration on UI\n\n                DBT-cloud: the sync will be trigged based on a dbt cloud job\n            slug (str): The sync's slug\n            status (SyncStatus):\n            updated_at (datetime.datetime): The timestamp when the sync was last updated\n            workspace_id (str): The id of the workspace that the sync belongs to\n    \"\"\"\n\n    configuration: SyncConfiguration = None\n    created_at: datetime.datetime = None\n    destination_id: str = None\n    disabled: bool = None\n    id: str = None\n    last_run_at: datetime.datetime = None\n    model_id: str = None\n    primary_key: str = None\n    referenced_columns: List[str] = None\n    schedule: SyncSchedule = None\n    slug: str = None\n    status: SyncStatus = None\n    updated_at: datetime.datetime = None\n    workspace_id: str = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        configuration = self.configuration.to_dict()\n\n        created_at = self.created_at.isoformat()\n\n        destination_id = self.destination_id\n        disabled = self.disabled\n        id = self.id\n        last_run_at = self.last_run_at.isoformat()\n\n        model_id = self.model_id\n        primary_key = self.primary_key\n        referenced_columns = self.referenced_columns\n\n        schedule = self.schedule.to_dict()\n\n        slug = self.slug\n        status = self.status.value\n\n        updated_at = self.updated_at.isoformat()\n\n        workspace_id = self.workspace_id\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"configuration\": configuration,\n                \"createdAt\": created_at,\n                \"destinationId\": destination_id,\n                \"disabled\": disabled,\n                \"id\": id,\n                \"lastRunAt\": last_run_at,\n                \"modelId\": model_id,\n                \"primaryKey\": primary_key,\n                \"referencedColumns\": referenced_columns,\n                \"schedule\": schedule,\n                \"slug\": slug,\n                \"status\": status,\n                \"updatedAt\": updated_at,\n                \"workspaceId\": workspace_id,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        configuration = SyncConfiguration.from_dict(d.pop(\"configuration\"))\n\n        created_at = isoparse(d.pop(\"createdAt\"))\n\n        destination_id = d.pop(\"destinationId\")\n\n        disabled = d.pop(\"disabled\")\n\n        id = d.pop(\"id\")\n\n        last_run_at = isoparse(d.pop(\"lastRunAt\"))\n\n        model_id = d.pop(\"modelId\")\n\n        primary_key = d.pop(\"primaryKey\")\n\n        referenced_columns = cast(List[str], d.pop(\"referencedColumns\"))\n\n        schedule = SyncSchedule.from_dict(d.pop(\"schedule\"))\n\n        slug = d.pop(\"slug\")\n\n        status = SyncStatus(d.pop(\"status\"))\n\n        updated_at = isoparse(d.pop(\"updatedAt\"))\n\n        workspace_id = d.pop(\"workspaceId\")\n\n        sync = cls(\n            configuration=configuration,\n            created_at=created_at,\n            destination_id=destination_id,\n            disabled=disabled,\n            id=id,\n            last_run_at=last_run_at,\n            model_id=model_id,\n            primary_key=primary_key,\n            referenced_columns=referenced_columns,\n            schedule=schedule,\n            slug=slug,\n            status=status,\n            updated_at=updated_at,\n            workspace_id=workspace_id,\n        )\n\n        sync.additional_properties = d\n        return sync\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.configuration","title":"<code>configuration: SyncConfiguration = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.created_at","title":"<code>created_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.destination_id","title":"<code>destination_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.disabled","title":"<code>disabled: bool = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.id","title":"<code>id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.last_run_at","title":"<code>last_run_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.model_id","title":"<code>model_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.primary_key","title":"<code>primary_key: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.referenced_columns","title":"<code>referenced_columns: List[str] = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.schedule","title":"<code>schedule: SyncSchedule = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.slug","title":"<code>slug: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.status","title":"<code>status: SyncStatus = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.updated_at","title":"<code>updated_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.workspace_id","title":"<code>workspace_id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    configuration = SyncConfiguration.from_dict(d.pop(\"configuration\"))\n\n    created_at = isoparse(d.pop(\"createdAt\"))\n\n    destination_id = d.pop(\"destinationId\")\n\n    disabled = d.pop(\"disabled\")\n\n    id = d.pop(\"id\")\n\n    last_run_at = isoparse(d.pop(\"lastRunAt\"))\n\n    model_id = d.pop(\"modelId\")\n\n    primary_key = d.pop(\"primaryKey\")\n\n    referenced_columns = cast(List[str], d.pop(\"referencedColumns\"))\n\n    schedule = SyncSchedule.from_dict(d.pop(\"schedule\"))\n\n    slug = d.pop(\"slug\")\n\n    status = SyncStatus(d.pop(\"status\"))\n\n    updated_at = isoparse(d.pop(\"updatedAt\"))\n\n    workspace_id = d.pop(\"workspaceId\")\n\n    sync = cls(\n        configuration=configuration,\n        created_at=created_at,\n        destination_id=destination_id,\n        disabled=disabled,\n        id=id,\n        last_run_at=last_run_at,\n        model_id=model_id,\n        primary_key=primary_key,\n        referenced_columns=referenced_columns,\n        schedule=schedule,\n        slug=slug,\n        status=status,\n        updated_at=updated_at,\n        workspace_id=workspace_id,\n    )\n\n    sync.additional_properties = d\n    return sync\n</code></pre>"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    configuration = self.configuration.to_dict()\n\n    created_at = self.created_at.isoformat()\n\n    destination_id = self.destination_id\n    disabled = self.disabled\n    id = self.id\n    last_run_at = self.last_run_at.isoformat()\n\n    model_id = self.model_id\n    primary_key = self.primary_key\n    referenced_columns = self.referenced_columns\n\n    schedule = self.schedule.to_dict()\n\n    slug = self.slug\n    status = self.status.value\n\n    updated_at = self.updated_at.isoformat()\n\n    workspace_id = self.workspace_id\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"configuration\": configuration,\n            \"createdAt\": created_at,\n            \"destinationId\": destination_id,\n            \"disabled\": disabled,\n            \"id\": id,\n            \"lastRunAt\": last_run_at,\n            \"modelId\": model_id,\n            \"primaryKey\": primary_key,\n            \"referencedColumns\": referenced_columns,\n            \"schedule\": schedule,\n            \"slug\": slug,\n            \"status\": status,\n            \"updatedAt\": updated_at,\n            \"workspaceId\": workspace_id,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/sync_configuration/","title":"SyncConfiguration","text":""},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration","title":"<code>prefect_hightouch.api_client.models.sync_configuration</code>","text":""},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration","title":"<code>SyncConfiguration</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The sync's configuration. This specifies how data is mapped, among other configuration.</p> <p>The schema depends on the destination.</p> <p>Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code.</p> Source code in <code>prefect_hightouch/api_client/models/sync_configuration.py</code> <pre><code>class SyncConfiguration(BaseModel):\n\"\"\"The sync's configuration. This specifies how data is mapped, among other\n    configuration.\n\n    The schema depends on the destination.\n\n    Consumers should NOT make assumptions on the contents of the\n    configuration. It may change as Hightouch updates its internal code.\n\n    \"\"\"\n\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update({})\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        sync_configuration = cls()\n\n        sync_configuration.additional_properties = d\n        return sync_configuration\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_configuration.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    sync_configuration = cls()\n\n    sync_configuration.additional_properties = d\n    return sync_configuration\n</code></pre>"},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_configuration.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update({})\n\n    return field_dict\n</code></pre>"},{"location":"models/sync_run/","title":"SyncRun","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run","title":"<code>prefect_hightouch.api_client.models.sync_run</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun","title":"<code>SyncRun</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>completion_ratio</code> <code>float</code> <p>The completion ratio of sync run, showing the progress of a sync run</p> <code>created_at</code> <code>datetime.datetime</code> <p>The timestamp when sync run was created. In most cases this will be equivalent to <code>startedAt</code>, but it may be earlier if the sync was triggered while a run was already in progress, and the new run didn't start for a while.</p> <code>failed_rows</code> <code>SyncRunFailedRows</code> <p>The number of rows that we attempted to sync, but were rejected by the destination.</p> <p>This does not include rows that weren't attempted due to the sync being cancelled.</p> <code>finished_at</code> <code>datetime.datetime</code> <p>The timestamp when the sync run finished</p> <code>id</code> <code>str</code> <p>The sync run's id</p> <code>planned_rows</code> <code>SyncRunPlannedRows</code> <p>The number of planned rows that this sync run was supposed to execute.</p> <p>Note that the counts for <code>successfulRows</code> and <code>failedRows</code> may not add up to <code>plannedRows</code> if the sync was cancelled.</p> <code>query_size</code> <code>float</code> <p>The number of rows in the query.</p> <code>started_at</code> <code>datetime.datetime</code> <p>The timestamp when the sync run started</p> <code>status</code> <code>SyncRunStatus</code> <p>The status of sync runs</p> <code>successful_rows</code> <code>SyncRunSuccessfulRows</code> <p>The number of rows that were successfully processed by the destination.</p> <code>error</code> <code>Union[Unset, str]</code> <p>Error message if the sync run didn't finish successfully</p> Source code in <code>prefect_hightouch/api_client/models/sync_run.py</code> <pre><code>class SyncRun(BaseModel):\n\"\"\"\n    Attributes:\n        completion_ratio (float): The completion ratio of sync run, showing the progress of a sync run\n        created_at (datetime.datetime): The timestamp when sync run was created. In most cases this will be\n            equivalent to `startedAt`, but it may be earlier if the sync was triggered\n            while a run was already in progress, and the new run didn't start for\n            a while.\n        failed_rows (SyncRunFailedRows): The number of rows that we attempted to sync, but were rejected by the\n            destination.\n\n            This does not include rows that weren't attempted due to the sync being\n            cancelled.\n        finished_at (datetime.datetime): The timestamp when the sync run finished\n        id (str): The sync run's id\n        planned_rows (SyncRunPlannedRows): The number of planned rows that this sync run was supposed to execute.\n\n            Note that the counts for `successfulRows` and `failedRows` may not add up\n            to `plannedRows` if the sync was cancelled.\n        query_size (float): The number of rows in the query.\n        started_at (datetime.datetime): The timestamp when the sync run started\n        status (SyncRunStatus): The status of sync runs\n        successful_rows (SyncRunSuccessfulRows): The number of rows that were successfully processed by the destination.\n        error (Union[Unset, str]): Error message if the sync run didn't finish successfully\n    \"\"\"\n\n    completion_ratio: float = None\n    created_at: datetime.datetime = None\n    failed_rows: SyncRunFailedRows = None\n    finished_at: datetime.datetime = None\n    id: str = None\n    planned_rows: SyncRunPlannedRows = None\n    query_size: float = None\n    started_at: datetime.datetime = None\n    status: SyncRunStatus = None\n    successful_rows: SyncRunSuccessfulRows = None\n    error: Union[Unset, str] = UNSET\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        completion_ratio = self.completion_ratio\n        created_at = self.created_at.isoformat()\n\n        failed_rows = self.failed_rows.to_dict()\n\n        finished_at = self.finished_at.isoformat()\n\n        id = self.id\n        planned_rows = self.planned_rows.to_dict()\n\n        query_size = self.query_size\n        started_at = self.started_at.isoformat()\n\n        status = self.status.value\n\n        successful_rows = self.successful_rows.to_dict()\n\n        error = self.error\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"completionRatio\": completion_ratio,\n                \"createdAt\": created_at,\n                \"failedRows\": failed_rows,\n                \"finishedAt\": finished_at,\n                \"id\": id,\n                \"plannedRows\": planned_rows,\n                \"querySize\": query_size,\n                \"startedAt\": started_at,\n                \"status\": status,\n                \"successfulRows\": successful_rows,\n            }\n        )\n        if error is not UNSET:\n            field_dict[\"error\"] = error\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        completion_ratio = d.pop(\"completionRatio\")\n\n        created_at = isoparse(d.pop(\"createdAt\"))\n\n        failed_rows = SyncRunFailedRows.from_dict(d.pop(\"failedRows\"))\n\n        finished_at = isoparse(d.pop(\"finishedAt\"))\n\n        id = d.pop(\"id\")\n\n        planned_rows = SyncRunPlannedRows.from_dict(d.pop(\"plannedRows\"))\n\n        query_size = d.pop(\"querySize\")\n\n        started_at = isoparse(d.pop(\"startedAt\"))\n\n        status = SyncRunStatus(d.pop(\"status\"))\n\n        successful_rows = SyncRunSuccessfulRows.from_dict(d.pop(\"successfulRows\"))\n\n        error = d.pop(\"error\", UNSET)\n\n        sync_run = cls(\n            completion_ratio=completion_ratio,\n            created_at=created_at,\n            failed_rows=failed_rows,\n            finished_at=finished_at,\n            id=id,\n            planned_rows=planned_rows,\n            query_size=query_size,\n            started_at=started_at,\n            status=status,\n            successful_rows=successful_rows,\n            error=error,\n        )\n\n        sync_run.additional_properties = d\n        return sync_run\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.completion_ratio","title":"<code>completion_ratio: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.created_at","title":"<code>created_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.error","title":"<code>error: Union[Unset, str] = UNSET</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.failed_rows","title":"<code>failed_rows: SyncRunFailedRows = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.finished_at","title":"<code>finished_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.id","title":"<code>id: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.planned_rows","title":"<code>planned_rows: SyncRunPlannedRows = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.query_size","title":"<code>query_size: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.started_at","title":"<code>started_at: datetime.datetime = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.status","title":"<code>status: SyncRunStatus = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.successful_rows","title":"<code>successful_rows: SyncRunSuccessfulRows = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_run.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    completion_ratio = d.pop(\"completionRatio\")\n\n    created_at = isoparse(d.pop(\"createdAt\"))\n\n    failed_rows = SyncRunFailedRows.from_dict(d.pop(\"failedRows\"))\n\n    finished_at = isoparse(d.pop(\"finishedAt\"))\n\n    id = d.pop(\"id\")\n\n    planned_rows = SyncRunPlannedRows.from_dict(d.pop(\"plannedRows\"))\n\n    query_size = d.pop(\"querySize\")\n\n    started_at = isoparse(d.pop(\"startedAt\"))\n\n    status = SyncRunStatus(d.pop(\"status\"))\n\n    successful_rows = SyncRunSuccessfulRows.from_dict(d.pop(\"successfulRows\"))\n\n    error = d.pop(\"error\", UNSET)\n\n    sync_run = cls(\n        completion_ratio=completion_ratio,\n        created_at=created_at,\n        failed_rows=failed_rows,\n        finished_at=finished_at,\n        id=id,\n        planned_rows=planned_rows,\n        query_size=query_size,\n        started_at=started_at,\n        status=status,\n        successful_rows=successful_rows,\n        error=error,\n    )\n\n    sync_run.additional_properties = d\n    return sync_run\n</code></pre>"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_run.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    completion_ratio = self.completion_ratio\n    created_at = self.created_at.isoformat()\n\n    failed_rows = self.failed_rows.to_dict()\n\n    finished_at = self.finished_at.isoformat()\n\n    id = self.id\n    planned_rows = self.planned_rows.to_dict()\n\n    query_size = self.query_size\n    started_at = self.started_at.isoformat()\n\n    status = self.status.value\n\n    successful_rows = self.successful_rows.to_dict()\n\n    error = self.error\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"completionRatio\": completion_ratio,\n            \"createdAt\": created_at,\n            \"failedRows\": failed_rows,\n            \"finishedAt\": finished_at,\n            \"id\": id,\n            \"plannedRows\": planned_rows,\n            \"querySize\": query_size,\n            \"startedAt\": started_at,\n            \"status\": status,\n            \"successfulRows\": successful_rows,\n        }\n    )\n    if error is not UNSET:\n        field_dict[\"error\"] = error\n\n    return field_dict\n</code></pre>"},{"location":"models/sync_run_failed_rows/","title":"SyncRunFailedRows","text":""},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows","title":"<code>prefect_hightouch.api_client.models.sync_run_failed_rows</code>","text":""},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows","title":"<code>SyncRunFailedRows</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The number of rows that we attempted to sync, but were rejected by the destination.</p> <p>This does not include rows that weren't attempted due to the sync being cancelled.</p> <pre><code>Attributes:\nadded_count (float): The number of failed adds.\nchanged_count (float): The number of failed changes.\nremoved_count (float): The number of failed removes.\n</code></pre> Source code in <code>prefect_hightouch/api_client/models/sync_run_failed_rows.py</code> <pre><code>class SyncRunFailedRows(BaseModel):\n\"\"\"The number of rows that we attempted to sync, but were rejected by the\n    destination.\n\n    This does not include rows that weren't attempted due to the sync being\n    cancelled.\n\n        Attributes:\n            added_count (float): The number of failed adds.\n            changed_count (float): The number of failed changes.\n            removed_count (float): The number of failed removes.\n    \"\"\"\n\n    added_count: float = None\n    changed_count: float = None\n    removed_count: float = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        added_count = self.added_count\n        changed_count = self.changed_count\n        removed_count = self.removed_count\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"addedCount\": added_count,\n                \"changedCount\": changed_count,\n                \"removedCount\": removed_count,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        added_count = d.pop(\"addedCount\")\n\n        changed_count = d.pop(\"changedCount\")\n\n        removed_count = d.pop(\"removedCount\")\n\n        sync_run_failed_rows = cls(\n            added_count=added_count,\n            changed_count=changed_count,\n            removed_count=removed_count,\n        )\n\n        sync_run_failed_rows.additional_properties = d\n        return sync_run_failed_rows\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.added_count","title":"<code>added_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.changed_count","title":"<code>changed_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.removed_count","title":"<code>removed_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_run_failed_rows.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    added_count = d.pop(\"addedCount\")\n\n    changed_count = d.pop(\"changedCount\")\n\n    removed_count = d.pop(\"removedCount\")\n\n    sync_run_failed_rows = cls(\n        added_count=added_count,\n        changed_count=changed_count,\n        removed_count=removed_count,\n    )\n\n    sync_run_failed_rows.additional_properties = d\n    return sync_run_failed_rows\n</code></pre>"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_run_failed_rows.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    added_count = self.added_count\n    changed_count = self.changed_count\n    removed_count = self.removed_count\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"addedCount\": added_count,\n            \"changedCount\": changed_count,\n            \"removedCount\": removed_count,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/sync_run_planned_rows/","title":"SyncRunPlannedRows","text":""},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows","title":"<code>prefect_hightouch.api_client.models.sync_run_planned_rows</code>","text":""},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows","title":"<code>SyncRunPlannedRows</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The number of planned rows that this sync run was supposed to execute.</p> <p>Note that the counts for <code>successfulRows</code> and <code>failedRows</code> may not add up to <code>plannedRows</code> if the sync was cancelled.</p> <pre><code>Attributes:\nadded_count (float): The number of added rows.\nchanged_count (float): The number of changed rows.\nremoved_count (float): The number of removed rows.\n</code></pre> Source code in <code>prefect_hightouch/api_client/models/sync_run_planned_rows.py</code> <pre><code>class SyncRunPlannedRows(BaseModel):\n\"\"\"The number of planned rows that this sync run was supposed to execute.\n\n    Note that the counts for `successfulRows` and `failedRows` may not add up\n    to `plannedRows` if the sync was cancelled.\n\n        Attributes:\n            added_count (float): The number of added rows.\n            changed_count (float): The number of changed rows.\n            removed_count (float): The number of removed rows.\n    \"\"\"\n\n    added_count: float = None\n    changed_count: float = None\n    removed_count: float = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        added_count = self.added_count\n        changed_count = self.changed_count\n        removed_count = self.removed_count\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"addedCount\": added_count,\n                \"changedCount\": changed_count,\n                \"removedCount\": removed_count,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        added_count = d.pop(\"addedCount\")\n\n        changed_count = d.pop(\"changedCount\")\n\n        removed_count = d.pop(\"removedCount\")\n\n        sync_run_planned_rows = cls(\n            added_count=added_count,\n            changed_count=changed_count,\n            removed_count=removed_count,\n        )\n\n        sync_run_planned_rows.additional_properties = d\n        return sync_run_planned_rows\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.added_count","title":"<code>added_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.changed_count","title":"<code>changed_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.removed_count","title":"<code>removed_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_run_planned_rows.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    added_count = d.pop(\"addedCount\")\n\n    changed_count = d.pop(\"changedCount\")\n\n    removed_count = d.pop(\"removedCount\")\n\n    sync_run_planned_rows = cls(\n        added_count=added_count,\n        changed_count=changed_count,\n        removed_count=removed_count,\n    )\n\n    sync_run_planned_rows.additional_properties = d\n    return sync_run_planned_rows\n</code></pre>"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_run_planned_rows.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    added_count = self.added_count\n    changed_count = self.changed_count\n    removed_count = self.removed_count\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"addedCount\": added_count,\n            \"changedCount\": changed_count,\n            \"removedCount\": removed_count,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/sync_run_status/","title":"SyncRunStatus","text":""},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status","title":"<code>prefect_hightouch.api_client.models.sync_run_status</code>","text":""},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus","title":"<code>SyncRunStatus</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/sync_run_status.py</code> <pre><code>class SyncRunStatus(str, Enum):\n    CANCELLED = \"cancelled\"\n    FAILED = \"failed\"\n    QUEUED = \"queued\"\n    SUCCESS = \"success\"\n    WARNING = \"warning\"\n    QUERYING = \"querying\"\n    PROCESSING = \"processing\"\n    REPORTING = \"reporting\"\n    INTERRUPTED = \"interrupted\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.CANCELLED","title":"<code>CANCELLED = 'cancelled'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.FAILED","title":"<code>FAILED = 'failed'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.PROCESSING","title":"<code>PROCESSING = 'processing'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.QUERYING","title":"<code>QUERYING = 'querying'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.QUEUED","title":"<code>QUEUED = 'queued'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.SUCCESS","title":"<code>SUCCESS = 'success'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.WARNING","title":"<code>WARNING = 'warning'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_successful_rows/","title":"SyncRunSuccessfulRows","text":""},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows","title":"<code>prefect_hightouch.api_client.models.sync_run_successful_rows</code>","text":""},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows","title":"<code>SyncRunSuccessfulRows</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The number of rows that were successfully processed by the destination.</p> <p>Attributes:</p> Name Type Description <code>added_count</code> <code>float</code> <p>The number of successful adds.</p> <code>changed_count</code> <code>float</code> <p>The number of successful changes.</p> <code>removed_count</code> <code>float</code> <p>The number of successful removes.</p> Source code in <code>prefect_hightouch/api_client/models/sync_run_successful_rows.py</code> <pre><code>class SyncRunSuccessfulRows(BaseModel):\n\"\"\"The number of rows that were successfully processed by the destination.\n\n    Attributes:\n        added_count (float): The number of successful adds.\n        changed_count (float): The number of successful changes.\n        removed_count (float): The number of successful removes.\n    \"\"\"\n\n    added_count: float = None\n    changed_count: float = None\n    removed_count: float = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        added_count = self.added_count\n        changed_count = self.changed_count\n        removed_count = self.removed_count\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"addedCount\": added_count,\n                \"changedCount\": changed_count,\n                \"removedCount\": removed_count,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        added_count = d.pop(\"addedCount\")\n\n        changed_count = d.pop(\"changedCount\")\n\n        removed_count = d.pop(\"removedCount\")\n\n        sync_run_successful_rows = cls(\n            added_count=added_count,\n            changed_count=changed_count,\n            removed_count=removed_count,\n        )\n\n        sync_run_successful_rows.additional_properties = d\n        return sync_run_successful_rows\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.added_count","title":"<code>added_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.changed_count","title":"<code>changed_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.removed_count","title":"<code>removed_count: float = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_run_successful_rows.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    added_count = d.pop(\"addedCount\")\n\n    changed_count = d.pop(\"changedCount\")\n\n    removed_count = d.pop(\"removedCount\")\n\n    sync_run_successful_rows = cls(\n        added_count=added_count,\n        changed_count=changed_count,\n        removed_count=removed_count,\n    )\n\n    sync_run_successful_rows.additional_properties = d\n    return sync_run_successful_rows\n</code></pre>"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_run_successful_rows.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    added_count = self.added_count\n    changed_count = self.changed_count\n    removed_count = self.removed_count\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"addedCount\": added_count,\n            \"changedCount\": changed_count,\n            \"removedCount\": removed_count,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/sync_schedule/","title":"SyncSchedule","text":""},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule","title":"<code>prefect_hightouch.api_client.models.sync_schedule</code>","text":""},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule","title":"<code>SyncSchedule</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The scheduling configuration. It can be triggerd based on several ways:</p> <p>Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks)</p> <p>Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron.</p> <p>Visual: the sync will be trigged based a visual cron configuration on UI</p> the sync will be trigged based on a dbt cloud job Source code in <code>prefect_hightouch/api_client/models/sync_schedule.py</code> <pre><code>class SyncSchedule(BaseModel):\n\"\"\"The scheduling configuration. It can be triggerd based on several ways:\n\n    Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks)\n\n    Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron.\n\n    Visual: the sync will be trigged based a visual cron configuration on UI\n\n    DBT-cloud: the sync will be trigged based on a dbt cloud job\n\n        Attributes:\n            schedule (Union[CronSchedule, DBTSchedule, IntervalSchedule, VisualCronSchedule]):\n            type (str):\n    \"\"\"\n\n    schedule: Union[\n        CronSchedule, DBTSchedule, IntervalSchedule, VisualCronSchedule\n    ] = None\n    type: str = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        schedule: Dict[str, Any]\n\n        if isinstance(self.schedule, IntervalSchedule):\n            schedule = self.schedule.to_dict()\n\n        elif isinstance(self.schedule, CronSchedule):\n            schedule = self.schedule.to_dict()\n\n        elif isinstance(self.schedule, VisualCronSchedule):\n            schedule = self.schedule.to_dict()\n\n        else:\n            schedule = self.schedule.to_dict()\n\n        type = self.type\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"schedule\": schedule,\n                \"type\": type,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n\n        def _parse_schedule(\n            data: object,\n        ) -&gt; Union[CronSchedule, DBTSchedule, IntervalSchedule, VisualCronSchedule]:\n            try:\n                if not isinstance(data, dict):\n                    raise TypeError()\n                schedule_type_0 = IntervalSchedule.from_dict(data)\n\n                return schedule_type_0\n            except:  # noqa: E722\n                pass\n            try:\n                if not isinstance(data, dict):\n                    raise TypeError()\n                schedule_type_1 = CronSchedule.from_dict(data)\n\n                return schedule_type_1\n            except:  # noqa: E722\n                pass\n            try:\n                if not isinstance(data, dict):\n                    raise TypeError()\n                schedule_type_2 = VisualCronSchedule.from_dict(data)\n\n                return schedule_type_2\n            except:  # noqa: E722\n                pass\n            if not isinstance(data, dict):\n                raise TypeError()\n            schedule_type_3 = DBTSchedule.from_dict(data)\n\n            return schedule_type_3\n\n        schedule = _parse_schedule(d.pop(\"schedule\"))\n\n        type = d.pop(\"type\")\n\n        sync_schedule = cls(\n            schedule=schedule,\n            type=type,\n        )\n\n        sync_schedule.additional_properties = d\n        return sync_schedule\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.schedule","title":"<code>schedule: Union[CronSchedule, DBTSchedule, IntervalSchedule, VisualCronSchedule] = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.type","title":"<code>type: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_schedule.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n\n    def _parse_schedule(\n        data: object,\n    ) -&gt; Union[CronSchedule, DBTSchedule, IntervalSchedule, VisualCronSchedule]:\n        try:\n            if not isinstance(data, dict):\n                raise TypeError()\n            schedule_type_0 = IntervalSchedule.from_dict(data)\n\n            return schedule_type_0\n        except:  # noqa: E722\n            pass\n        try:\n            if not isinstance(data, dict):\n                raise TypeError()\n            schedule_type_1 = CronSchedule.from_dict(data)\n\n            return schedule_type_1\n        except:  # noqa: E722\n            pass\n        try:\n            if not isinstance(data, dict):\n                raise TypeError()\n            schedule_type_2 = VisualCronSchedule.from_dict(data)\n\n            return schedule_type_2\n        except:  # noqa: E722\n            pass\n        if not isinstance(data, dict):\n            raise TypeError()\n        schedule_type_3 = DBTSchedule.from_dict(data)\n\n        return schedule_type_3\n\n    schedule = _parse_schedule(d.pop(\"schedule\"))\n\n    type = d.pop(\"type\")\n\n    sync_schedule = cls(\n        schedule=schedule,\n        type=type,\n    )\n\n    sync_schedule.additional_properties = d\n    return sync_schedule\n</code></pre>"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/sync_schedule.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    schedule: Dict[str, Any]\n\n    if isinstance(self.schedule, IntervalSchedule):\n        schedule = self.schedule.to_dict()\n\n    elif isinstance(self.schedule, CronSchedule):\n        schedule = self.schedule.to_dict()\n\n    elif isinstance(self.schedule, VisualCronSchedule):\n        schedule = self.schedule.to_dict()\n\n    else:\n        schedule = self.schedule.to_dict()\n\n    type = self.type\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"schedule\": schedule,\n            \"type\": type,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/sync_status/","title":"SyncStatus","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status","title":"<code>prefect_hightouch.api_client.models.sync_status</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus","title":"<code>SyncStatus</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/sync_status.py</code> <pre><code>class SyncStatus(str, Enum):\n    DISABLED = \"disabled\"\n    PENDING = \"pending\"\n    CANCELLED = \"cancelled\"\n    FAILED = \"failed\"\n    QUEUED = \"queued\"\n    SUCCESS = \"success\"\n    WARNING = \"warning\"\n    QUERYING = \"querying\"\n    PROCESSING = \"processing\"\n    REPORTING = \"reporting\"\n    INTERRUPTED = \"interrupted\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.CANCELLED","title":"<code>CANCELLED = 'cancelled'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.DISABLED","title":"<code>DISABLED = 'disabled'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.FAILED","title":"<code>FAILED = 'failed'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.PENDING","title":"<code>PENDING = 'pending'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.PROCESSING","title":"<code>PROCESSING = 'processing'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.QUERYING","title":"<code>QUERYING = 'querying'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.QUEUED","title":"<code>QUEUED = 'queued'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.SUCCESS","title":"<code>SUCCESS = 'success'</code>  <code>class-attribute</code>","text":""},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.WARNING","title":"<code>WARNING = 'warning'</code>  <code>class-attribute</code>","text":""},{"location":"models/trigger_run_custom_input/","title":"TriggerRunCustomInput","text":""},{"location":"models/trigger_run_custom_input/#prefect_hightouch.api_client.models.trigger_run_custom_input","title":"<code>prefect_hightouch.api_client.models.trigger_run_custom_input</code>","text":""},{"location":"models/trigger_run_input/","title":"TriggerRunInput","text":""},{"location":"models/trigger_run_input/#prefect_hightouch.api_client.models.trigger_run_input","title":"<code>prefect_hightouch.api_client.models.trigger_run_input</code>","text":""},{"location":"models/trigger_run_output/","title":"TriggerRunOutput","text":""},{"location":"models/trigger_run_output/#prefect_hightouch.api_client.models.trigger_run_output","title":"<code>prefect_hightouch.api_client.models.trigger_run_output</code>","text":""},{"location":"models/validate_error_json/","title":"ValidateErrorJson","text":""},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json","title":"<code>prefect_hightouch.api_client.models.validate_error_json</code>","text":""},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON","title":"<code>ValidateErrorJSON</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>details</code> <code>ValidateErrorJSONDetails</code> <code>message</code> <code>ValidateErrorJSONMessage</code> Source code in <code>prefect_hightouch/api_client/models/validate_error_json.py</code> <pre><code>class ValidateErrorJSON(BaseModel):\n\"\"\"\n    Attributes:\n        details (ValidateErrorJSONDetails):\n        message (ValidateErrorJSONMessage):\n    \"\"\"\n\n    details: ValidateErrorJSONDetails = None\n    message: ValidateErrorJSONMessage = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        details = self.details.to_dict()\n\n        message = self.message.value\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"details\": details,\n                \"message\": message,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        details = ValidateErrorJSONDetails.from_dict(d.pop(\"details\"))\n\n        message = ValidateErrorJSONMessage(d.pop(\"message\"))\n\n        validate_error_json = cls(\n            details=details,\n            message=message,\n        )\n\n        validate_error_json.additional_properties = d\n        return validate_error_json\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.details","title":"<code>details: ValidateErrorJSONDetails = None</code>  <code>class-attribute</code>","text":""},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.message","title":"<code>message: ValidateErrorJSONMessage = None</code>  <code>class-attribute</code>","text":""},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/validate_error_json.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    details = ValidateErrorJSONDetails.from_dict(d.pop(\"details\"))\n\n    message = ValidateErrorJSONMessage(d.pop(\"message\"))\n\n    validate_error_json = cls(\n        details=details,\n        message=message,\n    )\n\n    validate_error_json.additional_properties = d\n    return validate_error_json\n</code></pre>"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/validate_error_json.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    details = self.details.to_dict()\n\n    message = self.message.value\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"details\": details,\n            \"message\": message,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/validate_error_json_details/","title":"ValidateErrorJsonDetails","text":""},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details","title":"<code>prefect_hightouch.api_client.models.validate_error_json_details</code>","text":""},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails","title":"<code>ValidateErrorJSONDetails</code>","text":"<p>         Bases: <code>BaseModel</code></p> Source code in <code>prefect_hightouch/api_client/models/validate_error_json_details.py</code> <pre><code>class ValidateErrorJSONDetails(BaseModel):\n\"\"\" \"\"\"\n\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update({})\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        validate_error_json_details = cls()\n\n        validate_error_json_details.additional_properties = d\n        return validate_error_json_details\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/validate_error_json_details.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    validate_error_json_details = cls()\n\n    validate_error_json_details.additional_properties = d\n    return validate_error_json_details\n</code></pre>"},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/validate_error_json_details.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update({})\n\n    return field_dict\n</code></pre>"},{"location":"models/validate_error_json_message/","title":"ValidateErrorJsonMessage","text":""},{"location":"models/validate_error_json_message/#prefect_hightouch.api_client.models.validate_error_json_message","title":"<code>prefect_hightouch.api_client.models.validate_error_json_message</code>","text":""},{"location":"models/validate_error_json_message/#prefect_hightouch.api_client.models.validate_error_json_message.ValidateErrorJSONMessage","title":"<code>ValidateErrorJSONMessage</code>","text":"<p>         Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>prefect_hightouch/api_client/models/validate_error_json_message.py</code> <pre><code>class ValidateErrorJSONMessage(str, Enum):\n    VALIDATION_FAILED = \"Validation failed\"\n\n    def __str__(self) -&gt; str:\n        return str(self.value)\n</code></pre>"},{"location":"models/visual_cron_schedule/","title":"VisualCronSchedule","text":""},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule","title":"<code>prefect_hightouch.api_client.models.visual_cron_schedule</code>","text":""},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule","title":"<code>VisualCronSchedule</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>expressions</code> <code>List[VisualCronScheduleExpressionsItem]</code> Source code in <code>prefect_hightouch/api_client/models/visual_cron_schedule.py</code> <pre><code>class VisualCronSchedule(BaseModel):\n\"\"\"\n    Attributes:\n        expressions (List[VisualCronScheduleExpressionsItem]):\n    \"\"\"\n\n    expressions: List[VisualCronScheduleExpressionsItem] = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        expressions = []\n        for expressions_item_data in self.expressions:\n            expressions_item = expressions_item_data.to_dict()\n\n            expressions.append(expressions_item)\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"expressions\": expressions,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        expressions = []\n        _expressions = d.pop(\"expressions\")\n        for expressions_item_data in _expressions:\n            expressions_item = VisualCronScheduleExpressionsItem.from_dict(\n                expressions_item_data\n            )\n\n            expressions.append(expressions_item)\n\n        visual_cron_schedule = cls(\n            expressions=expressions,\n        )\n\n        visual_cron_schedule.additional_properties = d\n        return visual_cron_schedule\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.expressions","title":"<code>expressions: List[VisualCronScheduleExpressionsItem] = None</code>  <code>class-attribute</code>","text":""},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/visual_cron_schedule.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    expressions = []\n    _expressions = d.pop(\"expressions\")\n    for expressions_item_data in _expressions:\n        expressions_item = VisualCronScheduleExpressionsItem.from_dict(\n            expressions_item_data\n        )\n\n        expressions.append(expressions_item)\n\n    visual_cron_schedule = cls(\n        expressions=expressions,\n    )\n\n    visual_cron_schedule.additional_properties = d\n    return visual_cron_schedule\n</code></pre>"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/visual_cron_schedule.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    expressions = []\n    for expressions_item_data in self.expressions:\n        expressions_item = expressions_item_data.to_dict()\n\n        expressions.append(expressions_item)\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"expressions\": expressions,\n        }\n    )\n\n    return field_dict\n</code></pre>"},{"location":"models/visual_cron_schedule_expressions_item/","title":"VisualCronScheduleExpressionsItem","text":""},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item","title":"<code>prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item</code>","text":""},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem","title":"<code>VisualCronScheduleExpressionsItem</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Attributes:</p> Name Type Description <code>days</code> <code>RecordDayBooleanOrUndefined</code> <p>Construct a type with a set of properties K of type T</p> <code>time</code> <code>str</code> Source code in <code>prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py</code> <pre><code>class VisualCronScheduleExpressionsItem(BaseModel):\n\"\"\"\n    Attributes:\n        days (RecordDayBooleanOrUndefined): Construct a type with a set of properties K of type T\n        time (str):\n    \"\"\"\n\n    days: RecordDayBooleanOrUndefined = None\n    time: str = None\n    additional_properties: Dict[str, Any] = Field(default_factory=dict)\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        days = self.days.to_dict()\n\n        time = self.time\n\n        field_dict: Dict[str, Any] = {}\n        field_dict.update(self.additional_properties)\n        field_dict.update(\n            {\n                \"days\": days,\n                \"time\": time,\n            }\n        )\n\n        return field_dict\n\n    @classmethod\n    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n        if src_dict is None or src_dict is UNSET:\n            return {}\n        d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n        days = RecordDayBooleanOrUndefined.from_dict(d.pop(\"days\"))\n\n        time = d.pop(\"time\")\n\n        visual_cron_schedule_expressions_item = cls(\n            days=days,\n            time=time,\n        )\n\n        visual_cron_schedule_expressions_item.additional_properties = d\n        return visual_cron_schedule_expressions_item\n\n    @property\n    def additional_keys(self) -&gt; List[str]:\n        return list(self.additional_properties.keys())\n\n    def __getitem__(self, key: str) -&gt; Any:\n        return self.additional_properties.get(key)\n\n    def __setitem__(self, key: str, value: Any) -&gt; None:\n        self.additional_properties[key] = value\n\n    def __delitem__(self, key: str) -&gt; None:\n        del self.additional_properties[key]\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key in self.additional_properties\n</code></pre>"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.additional_keys","title":"<code>additional_keys: List[str]</code>  <code>property</code>","text":""},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.additional_properties","title":"<code>additional_properties: Dict[str, Any] = Field(default_factory=dict)</code>  <code>class-attribute</code>","text":""},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.days","title":"<code>days: RecordDayBooleanOrUndefined = None</code>  <code>class-attribute</code>","text":""},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.time","title":"<code>time: str = None</code>  <code>class-attribute</code>","text":""},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.from_dict","title":"<code>from_dict</code>  <code>classmethod</code>","text":"Source code in <code>prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py</code> <pre><code>@classmethod\ndef from_dict(cls: Type[T], src_dict: Dict[str, Any]) -&gt; T:\n    if src_dict is None or src_dict is UNSET:\n        return {}\n    d = {k: v if v is not None else UNSET for k, v in src_dict.items()}\n    days = RecordDayBooleanOrUndefined.from_dict(d.pop(\"days\"))\n\n    time = d.pop(\"time\")\n\n    visual_cron_schedule_expressions_item = cls(\n        days=days,\n        time=time,\n    )\n\n    visual_cron_schedule_expressions_item.additional_properties = d\n    return visual_cron_schedule_expressions_item\n</code></pre>"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.to_dict","title":"<code>to_dict</code>","text":"Source code in <code>prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    days = self.days.to_dict()\n\n    time = self.time\n\n    field_dict: Dict[str, Any] = {}\n    field_dict.update(self.additional_properties)\n    field_dict.update(\n        {\n            \"days\": days,\n            \"time\": time,\n        }\n    )\n\n    return field_dict\n</code></pre>"}]}