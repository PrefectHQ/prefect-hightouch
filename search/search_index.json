{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-hightouch Welcome! Prefect integrations for interacting with Hightouch. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-hightouch with pip : pip install prefect-hightouch Then, register to view the block on Prefect Cloud: prefect block register -m prefect_hightouch.credentials Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Trigger a sync run and wait for completion from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion @flow def sync_flow (): hightouch_credentials = HightouchCredentials . load ( \"hightouch-token\" ) sync_metadata = trigger_sync_run_and_wait_for_completion ( hightouch_credentials = hightouch_credentials , sync_id = 12345 , full_resync = True , max_wait_seconds = 1800 , poll_frequency_seconds = 10 , ) return sync_metadata sync_flow () List, get, and trigger syncs from prefect import flow from prefect_hightouch import HightouchCredentials , api_models from prefect_hightouch.syncs import ( list_sync , get_sync , list_sync_runs , trigger_run , trigger_run_custom , ) @flow def hightouch_sync_flow (): hightouch_credentials = HightouchCredentials . load ( \"hightouch-token\" ) # list all syncs syncs = list_sync ( hightouch_credentials , order_by = api_models . ListSyncOrderBy . CREATEDAT ) # get first sync sync_id = syncs [ 0 ] . id sync = get_sync ( hightouch_credentials , sync_id ) # list previous runs sync_runs = list_sync_runs ( hightouch_credentials , sync_id ) # trigger by id sync_run = trigger_run ( hightouch_credentials , sync_id , json_body = api_models . TriggerRunInput ( full_resync = False ), ) # trigger by slug sync_slug = syncs [ 0 ] . slug sync_run_2 = trigger_run_custom ( hightouch_credentials , json_body = api_models . TriggerRunCustomInput ( sync_slug = sync_slug , full_resync = False , ), ) return sync_runs hightouch_sync_flow () Call API endpoints If an API endpoint is not exposed as a task, you can call the underlying API endpoint functions, but note, these are not Prefect tasks. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import list_destination credentials = HightouchCredentials . load ( token = \"my-service-token\" ) client = credentials . get_client () response = list_destination . sync_detailed ( client = client ) data = response . parsed . data Resources If you encounter any bugs while using prefect-hightouch , feel free to open an issue in the prefect-hightouch repository. If you have any questions or issues while using prefect-hightouch , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-hightouch for updates too! Development If you'd like to install a version of prefect-hightouch for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-hightouch.git cd prefect-hightouch/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-hightouch","text":"","title":"prefect-hightouch"},{"location":"#welcome","text":"Prefect integrations for interacting with Hightouch.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-hightouch with pip : pip install prefect-hightouch Then, register to view the block on Prefect Cloud: prefect block register -m prefect_hightouch.credentials Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#trigger-a-sync-run-and-wait-for-completion","text":"from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion @flow def sync_flow (): hightouch_credentials = HightouchCredentials . load ( \"hightouch-token\" ) sync_metadata = trigger_sync_run_and_wait_for_completion ( hightouch_credentials = hightouch_credentials , sync_id = 12345 , full_resync = True , max_wait_seconds = 1800 , poll_frequency_seconds = 10 , ) return sync_metadata sync_flow ()","title":"Trigger a sync run and wait for completion"},{"location":"#list-get-and-trigger-syncs","text":"from prefect import flow from prefect_hightouch import HightouchCredentials , api_models from prefect_hightouch.syncs import ( list_sync , get_sync , list_sync_runs , trigger_run , trigger_run_custom , ) @flow def hightouch_sync_flow (): hightouch_credentials = HightouchCredentials . load ( \"hightouch-token\" ) # list all syncs syncs = list_sync ( hightouch_credentials , order_by = api_models . ListSyncOrderBy . CREATEDAT ) # get first sync sync_id = syncs [ 0 ] . id sync = get_sync ( hightouch_credentials , sync_id ) # list previous runs sync_runs = list_sync_runs ( hightouch_credentials , sync_id ) # trigger by id sync_run = trigger_run ( hightouch_credentials , sync_id , json_body = api_models . TriggerRunInput ( full_resync = False ), ) # trigger by slug sync_slug = syncs [ 0 ] . slug sync_run_2 = trigger_run_custom ( hightouch_credentials , json_body = api_models . TriggerRunCustomInput ( sync_slug = sync_slug , full_resync = False , ), ) return sync_runs hightouch_sync_flow ()","title":"List, get, and trigger syncs"},{"location":"#call-api-endpoints","text":"If an API endpoint is not exposed as a task, you can call the underlying API endpoint functions, but note, these are not Prefect tasks. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import list_destination credentials = HightouchCredentials . load ( token = \"my-service-token\" ) client = credentials . get_client () response = list_destination . sync_detailed ( client = client ) data = response . parsed . data","title":"Call API endpoints"},{"location":"#resources","text":"If you encounter any bugs while using prefect-hightouch , feel free to open an issue in the prefect-hightouch repository. If you have any questions or issues while using prefect-hightouch , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-hightouch for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-hightouch for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-hightouch.git cd prefect-hightouch/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_hightouch.credentials generated This is a module containing credentials, auto-generated, used to perform authenticated interactions with Hightouch. HightouchCredentials Bases: Block Block used to manage Hightouch authentication. Attributes: Name Type Description token SecretStr The token to authenticate with Hightouch. timeout float Number of seconds before the request times out. client_kwargs Dict [ str , Any ] Additional keyword arguments to pass to prefect_hightouch.api_client.client.AuthenticatedClient . Examples: Load stored Hightouch credentials: from prefect_hightouch import HightouchCredentials hightouch_credentials_block = HightouchCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_hightouch/credentials/generated.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class HightouchCredentials ( Block ): \"\"\" Block used to manage Hightouch authentication. Attributes: token: The token to authenticate with Hightouch. timeout: Number of seconds before the request times out. client_kwargs: Additional keyword arguments to pass to `prefect_hightouch.api_client.client.AuthenticatedClient`. Examples: Load stored Hightouch credentials: ```python from prefect_hightouch import HightouchCredentials hightouch_credentials_block = HightouchCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Hightouch Credentials\" # _logo_url = \"<UPDATE _logo_url IN __init__.py>\" # noqa token : SecretStr = Field ( default =... , description = \"Token used for authentication.\" ) timeout : float = Field ( default = 5.0 , description = \"Number of seconds before the request times out.\" ) client_kwargs : Dict [ str , Any ] = Field ( default_factory = dict , title = \"Additional configuration\" , description = ( \"Additional keyword arguments to pass to \" \"`prefect_hightouch.api_client.client.AuthenticatedClient`.\" ), ) def get_client ( self ) -> AuthenticatedClient : \"\"\" Gets a Hightouch REST API Authenticated Client. Returns: A Hightouch REST API Authenticated Client. Example: Gets a Hightouch REST API Authenticated Client. ```python from prefect import flow from prefect_hightouch import HightouchCredentials @flow def example_get_client_flow(): token = \"consumer_key\" hightouch_credentials = HightouchCredentials(token=token) client = hightouch_credentials.get_client() return client example_get_client_flow() ``` \"\"\" base_url = \"https://api.hightouch.com/api/v1\" client_kwargs = self . client_kwargs . copy () token = self . token . get_secret_value () prefix = \"Bearer\" client = AuthenticatedClient ( base_url = base_url , token = token , prefix = prefix , timeout = self . timeout , ** client_kwargs ) return client get_client Gets a Hightouch REST API Authenticated Client. Returns: Type Description AuthenticatedClient A Hightouch REST API Authenticated Client. Example Gets a Hightouch REST API Authenticated Client. from prefect import flow from prefect_hightouch import HightouchCredentials @flow def example_get_client_flow (): token = \"consumer_key\" hightouch_credentials = HightouchCredentials ( token = token ) client = hightouch_credentials . get_client () return client example_get_client_flow () Source code in prefect_hightouch/credentials/generated.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def get_client ( self ) -> AuthenticatedClient : \"\"\" Gets a Hightouch REST API Authenticated Client. Returns: A Hightouch REST API Authenticated Client. Example: Gets a Hightouch REST API Authenticated Client. ```python from prefect import flow from prefect_hightouch import HightouchCredentials @flow def example_get_client_flow(): token = \"consumer_key\" hightouch_credentials = HightouchCredentials(token=token) client = hightouch_credentials.get_client() return client example_get_client_flow() ``` \"\"\" base_url = \"https://api.hightouch.com/api/v1\" client_kwargs = self . client_kwargs . copy () token = self . token . get_secret_value () prefix = \"Bearer\" client = AuthenticatedClient ( base_url = base_url , token = token , prefix = prefix , timeout = self . timeout , ** client_kwargs ) return client","title":"Credentials"},{"location":"credentials/#prefect_hightouch.credentials","text":"","title":"credentials"},{"location":"credentials/#prefect_hightouch.credentials.generated","text":"This is a module containing credentials, auto-generated, used to perform authenticated interactions with Hightouch.","title":"generated"},{"location":"credentials/#prefect_hightouch.credentials.generated.HightouchCredentials","text":"Bases: Block Block used to manage Hightouch authentication. Attributes: Name Type Description token SecretStr The token to authenticate with Hightouch. timeout float Number of seconds before the request times out. client_kwargs Dict [ str , Any ] Additional keyword arguments to pass to prefect_hightouch.api_client.client.AuthenticatedClient . Examples: Load stored Hightouch credentials: from prefect_hightouch import HightouchCredentials hightouch_credentials_block = HightouchCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_hightouch/credentials/generated.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class HightouchCredentials ( Block ): \"\"\" Block used to manage Hightouch authentication. Attributes: token: The token to authenticate with Hightouch. timeout: Number of seconds before the request times out. client_kwargs: Additional keyword arguments to pass to `prefect_hightouch.api_client.client.AuthenticatedClient`. Examples: Load stored Hightouch credentials: ```python from prefect_hightouch import HightouchCredentials hightouch_credentials_block = HightouchCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Hightouch Credentials\" # _logo_url = \"<UPDATE _logo_url IN __init__.py>\" # noqa token : SecretStr = Field ( default =... , description = \"Token used for authentication.\" ) timeout : float = Field ( default = 5.0 , description = \"Number of seconds before the request times out.\" ) client_kwargs : Dict [ str , Any ] = Field ( default_factory = dict , title = \"Additional configuration\" , description = ( \"Additional keyword arguments to pass to \" \"`prefect_hightouch.api_client.client.AuthenticatedClient`.\" ), ) def get_client ( self ) -> AuthenticatedClient : \"\"\" Gets a Hightouch REST API Authenticated Client. Returns: A Hightouch REST API Authenticated Client. Example: Gets a Hightouch REST API Authenticated Client. ```python from prefect import flow from prefect_hightouch import HightouchCredentials @flow def example_get_client_flow(): token = \"consumer_key\" hightouch_credentials = HightouchCredentials(token=token) client = hightouch_credentials.get_client() return client example_get_client_flow() ``` \"\"\" base_url = \"https://api.hightouch.com/api/v1\" client_kwargs = self . client_kwargs . copy () token = self . token . get_secret_value () prefix = \"Bearer\" client = AuthenticatedClient ( base_url = base_url , token = token , prefix = prefix , timeout = self . timeout , ** client_kwargs ) return client","title":"HightouchCredentials"},{"location":"credentials/#prefect_hightouch.credentials.generated.HightouchCredentials.get_client","text":"Gets a Hightouch REST API Authenticated Client. Returns: Type Description AuthenticatedClient A Hightouch REST API Authenticated Client. Example Gets a Hightouch REST API Authenticated Client. from prefect import flow from prefect_hightouch import HightouchCredentials @flow def example_get_client_flow (): token = \"consumer_key\" hightouch_credentials = HightouchCredentials ( token = token ) client = hightouch_credentials . get_client () return client example_get_client_flow () Source code in prefect_hightouch/credentials/generated.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def get_client ( self ) -> AuthenticatedClient : \"\"\" Gets a Hightouch REST API Authenticated Client. Returns: A Hightouch REST API Authenticated Client. Example: Gets a Hightouch REST API Authenticated Client. ```python from prefect import flow from prefect_hightouch import HightouchCredentials @flow def example_get_client_flow(): token = \"consumer_key\" hightouch_credentials = HightouchCredentials(token=token) client = hightouch_credentials.get_client() return client example_get_client_flow() ``` \"\"\" base_url = \"https://api.hightouch.com/api/v1\" client_kwargs = self . client_kwargs . copy () token = self . token . get_secret_value () prefix = \"Bearer\" client = AuthenticatedClient ( base_url = base_url , token = token , prefix = prefix , timeout = self . timeout , ** client_kwargs ) return client","title":"get_client()"},{"location":"exceptions/","text":"prefect_hightouch.exceptions This is a module containing exceptions used within prefect-hightouch. HightouchSyncRunCancelled Bases: HightouchSyncRunError Raised when Hightouch sync run is cancelled. Source code in prefect_hightouch/exceptions.py 27 28 29 30 class HightouchSyncRunCancelled ( HightouchSyncRunError ): \"\"\" Raised when Hightouch sync run is cancelled. \"\"\" HightouchSyncRunDisabled Bases: HightouchSyncRunError Raised when Hightouch sync run is disabled. Source code in prefect_hightouch/exceptions.py 21 22 23 24 class HightouchSyncRunDisabled ( HightouchSyncRunError ): \"\"\" Raised when Hightouch sync run is disabled. \"\"\" HightouchSyncRunError Bases: RuntimeError A generic Hightouch sync exception. Source code in prefect_hightouch/exceptions.py 8 9 10 11 class HightouchSyncRunError ( RuntimeError ): \"\"\" A generic Hightouch sync exception. \"\"\" HightouchSyncRunFailed Bases: HightouchSyncRunError Raised when Hightouch sync run is failed. Source code in prefect_hightouch/exceptions.py 33 34 35 36 class HightouchSyncRunFailed ( HightouchSyncRunError ): \"\"\" Raised when Hightouch sync run is failed. \"\"\" HightouchSyncRunInterrupted Bases: HightouchSyncRunError Raised when Hightouch sync run is interrupted. Source code in prefect_hightouch/exceptions.py 39 40 41 42 class HightouchSyncRunInterrupted ( HightouchSyncRunError ): \"\"\" Raised when Hightouch sync run is interrupted. \"\"\"","title":"Exceptions"},{"location":"exceptions/#prefect_hightouch.exceptions","text":"This is a module containing exceptions used within prefect-hightouch.","title":"exceptions"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunCancelled","text":"Bases: HightouchSyncRunError Raised when Hightouch sync run is cancelled. Source code in prefect_hightouch/exceptions.py 27 28 29 30 class HightouchSyncRunCancelled ( HightouchSyncRunError ): \"\"\" Raised when Hightouch sync run is cancelled. \"\"\"","title":"HightouchSyncRunCancelled"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunDisabled","text":"Bases: HightouchSyncRunError Raised when Hightouch sync run is disabled. Source code in prefect_hightouch/exceptions.py 21 22 23 24 class HightouchSyncRunDisabled ( HightouchSyncRunError ): \"\"\" Raised when Hightouch sync run is disabled. \"\"\"","title":"HightouchSyncRunDisabled"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunError","text":"Bases: RuntimeError A generic Hightouch sync exception. Source code in prefect_hightouch/exceptions.py 8 9 10 11 class HightouchSyncRunError ( RuntimeError ): \"\"\" A generic Hightouch sync exception. \"\"\"","title":"HightouchSyncRunError"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunFailed","text":"Bases: HightouchSyncRunError Raised when Hightouch sync run is failed. Source code in prefect_hightouch/exceptions.py 33 34 35 36 class HightouchSyncRunFailed ( HightouchSyncRunError ): \"\"\" Raised when Hightouch sync run is failed. \"\"\"","title":"HightouchSyncRunFailed"},{"location":"exceptions/#prefect_hightouch.exceptions.HightouchSyncRunInterrupted","text":"Bases: HightouchSyncRunError Raised when Hightouch sync run is interrupted. Source code in prefect_hightouch/exceptions.py 39 40 41 42 class HightouchSyncRunInterrupted ( HightouchSyncRunError ): \"\"\" Raised when Hightouch sync run is interrupted. \"\"\"","title":"HightouchSyncRunInterrupted"},{"location":"syncs/","text":"prefect_hightouch.syncs flows This is a module containing flows used for interacting with syncs. trigger_sync_run_and_wait_for_completion async Flow that triggers a sync run and waits for the triggered run to complete. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id str Sync ID used in formatting the endpoint URL. required full_resync bool Whether to resync all the rows in the query (i.e. ignoring previously synced rows). False max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Type Description api_models . sync . Sync id : str slug : str workspace_id : str created_at : str updated_at : str destination_id : str model_id : str configuration : Dict schedule : Dict status : \"models.SyncStatus\" disabled : bool last_run_at : str referenced_columns : List[str] primary_key : str Examples: Trigger a Hightouch sync run and wait for completion as a stand alone flow. import asyncio from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion asyncio . run ( trigger_sync_run_and_wait_for_completion ( hightouch_credentials = HightouchCredentials ( token = \"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\" ), sync_id = 12345 , full_resync = True , max_wait_seconds = 1800 , poll_frequency_seconds = 5 , ) ) Trigger a Hightouch sync run and wait for completion as a subflow. from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion @flow def sync_flow (): hightouch_credentials = HightouchCredentials . load ( \"hightouch-token\" ) sync_metadata = trigger_sync_run_and_wait_for_completion ( hightouch_credentials = hightouch_credentials , sync_id = 12345 , full_resync = True , max_wait_seconds = 1800 , poll_frequency_seconds = 10 , ) return sync_metadata sync_flow () Source code in prefect_hightouch/syncs/flows.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 @flow async def trigger_sync_run_and_wait_for_completion ( hightouch_credentials : HightouchCredentials , sync_id : str , full_resync : bool = False , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> api_models . sync . Sync : \"\"\" Flow that triggers a sync run and waits for the triggered run to complete. Args: hightouch_credentials: Credentials to use for authentication with Hightouch. sync_id: Sync ID used in formatting the endpoint URL. full_resync: Whether to resync all the rows in the query (i.e. ignoring previously synced rows). max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: - `id`: `str`<br> - `slug`: `str`<br> - `workspace_id`: `str`<br> - `created_at`: `str`<br> - `updated_at`: `str`<br> - `destination_id`: `str`<br> - `model_id`: `str`<br> - `configuration`: `Dict`<br> - `schedule`: `Dict`<br> - `status`: `\"models.SyncStatus\"`<br> - `disabled`: `bool`<br> - `last_run_at`: `str`<br> - `referenced_columns`: `List[str]`<br> - `primary_key`: `str`<br> Examples: Trigger a Hightouch sync run and wait for completion as a stand alone flow. ```python import asyncio from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion asyncio.run( trigger_sync_run_and_wait_for_completion( hightouch_credentials=HightouchCredentials( token=\"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\" ), sync_id=12345, full_resync=True, max_wait_seconds=1800, poll_frequency_seconds=5, ) ) ``` Trigger a Hightouch sync run and wait for completion as a subflow. ```python from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion @flow def sync_flow(): hightouch_credentials = HightouchCredentials.load(\"hightouch-token\") sync_metadata = trigger_sync_run_and_wait_for_completion( hightouch_credentials=hightouch_credentials, sync_id=12345, full_resync=True, max_wait_seconds=1800, poll_frequency_seconds=10, ) return sync_metadata sync_flow() ``` \"\"\" logger = get_run_logger () json_body = api_models . trigger_run_input . TriggerRunInput ( full_resync = full_resync ) sync_run_future = await trigger_run . submit ( hightouch_credentials = hightouch_credentials , sync_id = sync_id , json_body = json_body , ) sync_run = await sync_run_future . result () logger . info ( \"Started sync %s run %s ; open %s and append %s to view results on webpage.\" , repr ( sync_id ), repr ( sync_run . id ), \"https://app.hightouch.com/\" , f \"/sources/ { sync_id } /runs/ { sync_run . id } \" , ) sync_status , sync_metadata = await wait_for_sync_run_completion ( hightouch_credentials = hightouch_credentials , sync_id = sync_id , max_wait_seconds = max_wait_seconds , poll_frequency_seconds = poll_frequency_seconds , ) if sync_status == api_models . sync . SyncStatus . SUCCESS : return sync_metadata else : raise TERMINAL_STATUS_EXCEPTIONS . get ( sync_status , HightouchSyncRunError )( f \"Sync ( { sync_metadata . slug !r} , ID { sync_id !r} ) \" f \"was unsuccessful with { sync_status . value !r} status\" ) wait_for_sync_run_completion async Flow that waits for the triggered sync run to complete. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id str Sync ID used in formatting the endpoint URL. required max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Type Description api_models . sync . SyncStatus value api_models . sync . Sync id : str slug : str workspace_id : str created_at : str updated_at : str destination_id : str model_id : str configuration : Dict schedule : Dict status : \"api_models.SyncStatus\" disabled : bool last_run_at : str referenced_columns : List[str] primary_key : str Examples: Wait for completion as a subflow. from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import wait_for_sync_run_completion @flow def wait_flow (): hightouch_credentials = HightouchCredentials . load ( \"hightouch-token\" ) sync_status , sync_metadata = wait_for_sync_run_completion ( hightouch_credentials = hightouch_credentials , sync_id = 12345 , max_wait_seconds = 1800 , poll_frequency_seconds = 20 , ) return sync_metadata wait_flow () Source code in prefect_hightouch/syncs/flows.py 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 @flow async def wait_for_sync_run_completion ( hightouch_credentials : HightouchCredentials , sync_id : str , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> Tuple [ api_models . sync . SyncStatus , api_models . sync . Sync ]: \"\"\" Flow that waits for the triggered sync run to complete. Args: hightouch_credentials: Credentials to use for authentication with Hightouch. sync_id: Sync ID used in formatting the endpoint URL. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: - `value` - `id`: `str`<br> - `slug`: `str`<br> - `workspace_id`: `str`<br> - `created_at`: `str`<br> - `updated_at`: `str`<br> - `destination_id`: `str`<br> - `model_id`: `str`<br> - `configuration`: `Dict`<br> - `schedule`: `Dict`<br> - `status`: `\"api_models.SyncStatus\"`<br> - `disabled`: `bool`<br> - `last_run_at`: `str`<br> - `referenced_columns`: `List[str]`<br> - `primary_key`: `str`<br> Examples: Wait for completion as a subflow. ```python from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import wait_for_sync_run_completion @flow def wait_flow(): hightouch_credentials = HightouchCredentials.load(\"hightouch-token\") sync_status, sync_metadata = wait_for_sync_run_completion( hightouch_credentials=hightouch_credentials, sync_id=12345, max_wait_seconds=1800, poll_frequency_seconds=20, ) return sync_metadata wait_flow() ``` \"\"\" logger = get_run_logger () seconds_waited_for_run_completion = 0 wait_for = [] while seconds_waited_for_run_completion <= max_wait_seconds : sync_future = await get_sync . submit ( hightouch_credentials = hightouch_credentials , sync_id = sync_id , wait_for = wait_for , ) wait_for = [ sync_future ] sync_metadata = await sync_future . result () sync_slug = sync_metadata . slug sync_status = sync_metadata . status if sync_status in TERMINAL_STATUS_EXCEPTIONS . keys (): return sync_status , sync_metadata logger . info ( \"Waiting on sync ( %s , ID %s ) with sync status %s for %s seconds\" , repr ( sync_slug ), repr ( sync_id ), repr ( sync_status . value ), poll_frequency_seconds , ) await asyncio . sleep ( poll_frequency_seconds ) seconds_waited_for_run_completion += poll_frequency_seconds raise HightouchSyncRunTimedOut ( f \"Max wait time of { max_wait_seconds } seconds exceeded while waiting \" f \"for sync ( { sync_slug !r} , ID { sync_id !r} )\" ) generated This is a module containing tasks, auto-generated from the Hightouch REST schema, used for interacting with syncs. get_sync async Retrieve sync from sync ID. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id float Sync ID used in formatting the endpoint URL. required Returns: Type Description api_models . sync . Sync id : str slug : str workspace_id : str created_at : str updated_at : str destination_id : str model_id : str configuration : Dict schedule : Dict status : \"models.SyncStatus\" disabled : bool last_run_at : str referenced_columns : List[str] primary_key : str API Endpoint: /syncs/{sync_id} API Responses: Response Description 200 Ok. 401 Unauthorized. 404 Not found. Source code in prefect_hightouch/syncs/generated.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 @task @_update_kwargs_and_execute ( _get_sync_endpoint ) async def get_sync ( * args , ** kwargs ) -> api_models . sync . Sync : \"\"\" Retrieve sync from sync ID. Args: hightouch_credentials (HightouchCredentials): Credentials to use for authentication with Hightouch. sync_id (float): Sync ID used in formatting the endpoint URL. Returns: - `id`: `str`<br> - `slug`: `str`<br> - `workspace_id`: `str`<br> - `created_at`: `str`<br> - `updated_at`: `str`<br> - `destination_id`: `str`<br> - `model_id`: `str`<br> - `configuration`: `Dict`<br> - `schedule`: `Dict`<br> - `status`: `\"models.SyncStatus\"`<br> - `disabled`: `bool`<br> - `last_run_at`: `str`<br> - `referenced_columns`: `List[str]`<br> - `primary_key`: `str`<br> <h4>API Endpoint:</h4> `/syncs/{sync_id}` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Ok. | | 401 | Unauthorized. | | 404 | Not found. | \"\"\" # noqa ... # pragma: no cover because only the decorated function gets run list_sync async List all the syncs in the current workspace. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required slug Optional[str]] Filter based on slug. required model_id Optional[float]] Filter based on modelId. required after Optional[datetime.datetime]] Select syncs that were run after given time. required before Optional[datetime.datetime]] Select syncs that were run before given time. required limit Optional[float]] Limit the number of object it returns. Default is 100. required order_by Optional[models.list_sync_order_by.ListSyncOrderBy]] Specify the order. required Returns: Type Description typing . List [ api_models . sync . Sync ] data : List API Endpoint: /syncs API Responses: Response Description 200 Ok. 400 Bad request. 401 Unauthorized. 422 Validation Failed. Source code in prefect_hightouch/syncs/generated.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 @task @_update_kwargs_and_execute ( _list_sync_endpoint ) async def list_sync ( * args , ** kwargs ) -> typing . List [ api_models . sync . Sync ]: \"\"\" List all the syncs in the current workspace. Args: hightouch_credentials (HightouchCredentials): Credentials to use for authentication with Hightouch. slug (Optional[str]]): Filter based on slug. model_id (Optional[float]]): Filter based on modelId. after (Optional[datetime.datetime]]): Select syncs that were run after given time. before (Optional[datetime.datetime]]): Select syncs that were run before given time. limit (Optional[float]]): Limit the number of object it returns. Default is 100. order_by (Optional[models.list_sync_order_by.ListSyncOrderBy]]): Specify the order. Returns: - `data`: `List`<br> <h4>API Endpoint:</h4> `/syncs` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Ok. | | 400 | Bad request. | | 401 | Unauthorized. | | 422 | Validation Failed. | \"\"\" # noqa ... # pragma: no cover because only the decorated function gets run list_sync_runs async List all sync runs under a sync. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id float Sync ID used in formatting the endpoint URL. required run_id Optional[float]] Query for specific run id. required limit Optional[float]] Limit the number of object it returns. Default is 5. required offset Optional[float]] Setting offset from result(for pagination). required after Optional[datetime.datetime]] Select sync runs that are started after given timestamp. required before Optional[datetime.datetime]] Select sync runs that are started before certain timestamp. required within Optional[float]] Select sync runs that are started within last given minutes. required order_by Optional[models.list_sync_runs_order_by.ListSyncRunsOrderBy]] Specify the order. required Returns: Type Description typing . List [ api_models . sync_run . SyncRun ] data : List API Endpoint: /syncs/{sync_id}/runs API Responses: Response Description 200 Ok. 400 Bad request. 401 Unauthorized. 422 Validation Failed. Source code in prefect_hightouch/syncs/generated.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 @task @_update_kwargs_and_execute ( _list_sync_runs_endpoint ) async def list_sync_runs ( * args , ** kwargs ) -> typing . List [ api_models . sync_run . SyncRun ]: \"\"\" List all sync runs under a sync. Args: hightouch_credentials (HightouchCredentials): Credentials to use for authentication with Hightouch. sync_id (float): Sync ID used in formatting the endpoint URL. run_id (Optional[float]]): Query for specific run id. limit (Optional[float]]): Limit the number of object it returns. Default is 5. offset (Optional[float]]): Setting offset from result(for pagination). after (Optional[datetime.datetime]]): Select sync runs that are started after given timestamp. before (Optional[datetime.datetime]]): Select sync runs that are started before certain timestamp. within (Optional[float]]): Select sync runs that are started within last given minutes. order_by (Optional[models.list_sync_runs_order_by.ListSyncRunsOrderBy]]): Specify the order. Returns: - `data`: `List`<br> <h4>API Endpoint:</h4> `/syncs/{sync_id}/runs` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Ok. | | 400 | Bad request. | | 401 | Unauthorized. | | 422 | Validation Failed. | \"\"\" # noqa ... # pragma: no cover because only the decorated function gets run trigger_run async Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id str Sync ID used in formatting the endpoint URL. required json_body models . trigger_run_input . TriggerRunInput The input of a trigger action to run syncs. required Returns: Type Description api_models . trigger_run_output . TriggerRunOutput id : str API Endpoint: /syncs/{sync_id}/trigger API Responses: Response Description 200 Ok. 400 Bad request. 401 Unauthorized. 422 Validation Failed. Source code in prefect_hightouch/syncs/generated.py 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 @task @_update_kwargs_and_execute ( _trigger_run_endpoint ) async def trigger_run ( * args , ** kwargs ) -> api_models . trigger_run_output . TriggerRunOutput : \"\"\" Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: hightouch_credentials (HightouchCredentials): Credentials to use for authentication with Hightouch. sync_id (str): Sync ID used in formatting the endpoint URL. json_body (models.trigger_run_input.TriggerRunInput): The input of a trigger action to run syncs. Returns: - `id`: `str`<br> <h4>API Endpoint:</h4> `/syncs/{sync_id}/trigger` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Ok. | | 400 | Bad request. | | 401 | Unauthorized. | | 422 | Validation Failed. | \"\"\" # noqa ... # pragma: no cover because only the decorated function gets run trigger_run_custom async Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required json_body models . trigger_run_custom_input . TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters. required Returns: Type Description api_models . trigger_run_output . TriggerRunOutput id : str message : str details : Dict API Endpoint: /syncs/trigger API Responses: Response Description 200 Ok. 400 Bad request. 401 Unauthorized. 422 Validation Failed. Source code in prefect_hightouch/syncs/generated.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 @task @_update_kwargs_and_execute ( _trigger_run_custom_endpoint ) async def trigger_run_custom ( * args , ** kwargs ) -> api_models . trigger_run_output . TriggerRunOutput : \"\"\" Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: hightouch_credentials (HightouchCredentials): Credentials to use for authentication with Hightouch. json_body (models.trigger_run_custom_input.TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters. Returns: - `id`: `str`<br> - `message`: `str`<br> - `details`: `Dict`<br> <h4>API Endpoint:</h4> `/syncs/trigger` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Ok. | | 400 | Bad request. | | 401 | Unauthorized. | | 422 | Validation Failed. | \"\"\" # noqa ... # pragma: no cover because only the decorated function gets run","title":"Syncs"},{"location":"syncs/#prefect_hightouch.syncs","text":"","title":"syncs"},{"location":"syncs/#prefect_hightouch.syncs.flows","text":"This is a module containing flows used for interacting with syncs.","title":"flows"},{"location":"syncs/#prefect_hightouch.syncs.flows.trigger_sync_run_and_wait_for_completion","text":"Flow that triggers a sync run and waits for the triggered run to complete. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id str Sync ID used in formatting the endpoint URL. required full_resync bool Whether to resync all the rows in the query (i.e. ignoring previously synced rows). False max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Type Description api_models . sync . Sync id : str slug : str workspace_id : str created_at : str updated_at : str destination_id : str model_id : str configuration : Dict schedule : Dict status : \"models.SyncStatus\" disabled : bool last_run_at : str referenced_columns : List[str] primary_key : str Examples: Trigger a Hightouch sync run and wait for completion as a stand alone flow. import asyncio from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion asyncio . run ( trigger_sync_run_and_wait_for_completion ( hightouch_credentials = HightouchCredentials ( token = \"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\" ), sync_id = 12345 , full_resync = True , max_wait_seconds = 1800 , poll_frequency_seconds = 5 , ) ) Trigger a Hightouch sync run and wait for completion as a subflow. from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion @flow def sync_flow (): hightouch_credentials = HightouchCredentials . load ( \"hightouch-token\" ) sync_metadata = trigger_sync_run_and_wait_for_completion ( hightouch_credentials = hightouch_credentials , sync_id = 12345 , full_resync = True , max_wait_seconds = 1800 , poll_frequency_seconds = 10 , ) return sync_metadata sync_flow () Source code in prefect_hightouch/syncs/flows.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 @flow async def trigger_sync_run_and_wait_for_completion ( hightouch_credentials : HightouchCredentials , sync_id : str , full_resync : bool = False , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> api_models . sync . Sync : \"\"\" Flow that triggers a sync run and waits for the triggered run to complete. Args: hightouch_credentials: Credentials to use for authentication with Hightouch. sync_id: Sync ID used in formatting the endpoint URL. full_resync: Whether to resync all the rows in the query (i.e. ignoring previously synced rows). max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: - `id`: `str`<br> - `slug`: `str`<br> - `workspace_id`: `str`<br> - `created_at`: `str`<br> - `updated_at`: `str`<br> - `destination_id`: `str`<br> - `model_id`: `str`<br> - `configuration`: `Dict`<br> - `schedule`: `Dict`<br> - `status`: `\"models.SyncStatus\"`<br> - `disabled`: `bool`<br> - `last_run_at`: `str`<br> - `referenced_columns`: `List[str]`<br> - `primary_key`: `str`<br> Examples: Trigger a Hightouch sync run and wait for completion as a stand alone flow. ```python import asyncio from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion asyncio.run( trigger_sync_run_and_wait_for_completion( hightouch_credentials=HightouchCredentials( token=\"1abc0d23-1234-1a2b-abc3-12ab456c7d8e\" ), sync_id=12345, full_resync=True, max_wait_seconds=1800, poll_frequency_seconds=5, ) ) ``` Trigger a Hightouch sync run and wait for completion as a subflow. ```python from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import trigger_sync_run_and_wait_for_completion @flow def sync_flow(): hightouch_credentials = HightouchCredentials.load(\"hightouch-token\") sync_metadata = trigger_sync_run_and_wait_for_completion( hightouch_credentials=hightouch_credentials, sync_id=12345, full_resync=True, max_wait_seconds=1800, poll_frequency_seconds=10, ) return sync_metadata sync_flow() ``` \"\"\" logger = get_run_logger () json_body = api_models . trigger_run_input . TriggerRunInput ( full_resync = full_resync ) sync_run_future = await trigger_run . submit ( hightouch_credentials = hightouch_credentials , sync_id = sync_id , json_body = json_body , ) sync_run = await sync_run_future . result () logger . info ( \"Started sync %s run %s ; open %s and append %s to view results on webpage.\" , repr ( sync_id ), repr ( sync_run . id ), \"https://app.hightouch.com/\" , f \"/sources/ { sync_id } /runs/ { sync_run . id } \" , ) sync_status , sync_metadata = await wait_for_sync_run_completion ( hightouch_credentials = hightouch_credentials , sync_id = sync_id , max_wait_seconds = max_wait_seconds , poll_frequency_seconds = poll_frequency_seconds , ) if sync_status == api_models . sync . SyncStatus . SUCCESS : return sync_metadata else : raise TERMINAL_STATUS_EXCEPTIONS . get ( sync_status , HightouchSyncRunError )( f \"Sync ( { sync_metadata . slug !r} , ID { sync_id !r} ) \" f \"was unsuccessful with { sync_status . value !r} status\" )","title":"trigger_sync_run_and_wait_for_completion()"},{"location":"syncs/#prefect_hightouch.syncs.flows.wait_for_sync_run_completion","text":"Flow that waits for the triggered sync run to complete. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id str Sync ID used in formatting the endpoint URL. required max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Type Description api_models . sync . SyncStatus value api_models . sync . Sync id : str slug : str workspace_id : str created_at : str updated_at : str destination_id : str model_id : str configuration : Dict schedule : Dict status : \"api_models.SyncStatus\" disabled : bool last_run_at : str referenced_columns : List[str] primary_key : str Examples: Wait for completion as a subflow. from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import wait_for_sync_run_completion @flow def wait_flow (): hightouch_credentials = HightouchCredentials . load ( \"hightouch-token\" ) sync_status , sync_metadata = wait_for_sync_run_completion ( hightouch_credentials = hightouch_credentials , sync_id = 12345 , max_wait_seconds = 1800 , poll_frequency_seconds = 20 , ) return sync_metadata wait_flow () Source code in prefect_hightouch/syncs/flows.py 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 @flow async def wait_for_sync_run_completion ( hightouch_credentials : HightouchCredentials , sync_id : str , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ) -> Tuple [ api_models . sync . SyncStatus , api_models . sync . Sync ]: \"\"\" Flow that waits for the triggered sync run to complete. Args: hightouch_credentials: Credentials to use for authentication with Hightouch. sync_id: Sync ID used in formatting the endpoint URL. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: - `value` - `id`: `str`<br> - `slug`: `str`<br> - `workspace_id`: `str`<br> - `created_at`: `str`<br> - `updated_at`: `str`<br> - `destination_id`: `str`<br> - `model_id`: `str`<br> - `configuration`: `Dict`<br> - `schedule`: `Dict`<br> - `status`: `\"api_models.SyncStatus\"`<br> - `disabled`: `bool`<br> - `last_run_at`: `str`<br> - `referenced_columns`: `List[str]`<br> - `primary_key`: `str`<br> Examples: Wait for completion as a subflow. ```python from prefect import flow from prefect_hightouch import HightouchCredentials from prefect_hightouch.syncs import wait_for_sync_run_completion @flow def wait_flow(): hightouch_credentials = HightouchCredentials.load(\"hightouch-token\") sync_status, sync_metadata = wait_for_sync_run_completion( hightouch_credentials=hightouch_credentials, sync_id=12345, max_wait_seconds=1800, poll_frequency_seconds=20, ) return sync_metadata wait_flow() ``` \"\"\" logger = get_run_logger () seconds_waited_for_run_completion = 0 wait_for = [] while seconds_waited_for_run_completion <= max_wait_seconds : sync_future = await get_sync . submit ( hightouch_credentials = hightouch_credentials , sync_id = sync_id , wait_for = wait_for , ) wait_for = [ sync_future ] sync_metadata = await sync_future . result () sync_slug = sync_metadata . slug sync_status = sync_metadata . status if sync_status in TERMINAL_STATUS_EXCEPTIONS . keys (): return sync_status , sync_metadata logger . info ( \"Waiting on sync ( %s , ID %s ) with sync status %s for %s seconds\" , repr ( sync_slug ), repr ( sync_id ), repr ( sync_status . value ), poll_frequency_seconds , ) await asyncio . sleep ( poll_frequency_seconds ) seconds_waited_for_run_completion += poll_frequency_seconds raise HightouchSyncRunTimedOut ( f \"Max wait time of { max_wait_seconds } seconds exceeded while waiting \" f \"for sync ( { sync_slug !r} , ID { sync_id !r} )\" )","title":"wait_for_sync_run_completion()"},{"location":"syncs/#prefect_hightouch.syncs.generated","text":"This is a module containing tasks, auto-generated from the Hightouch REST schema, used for interacting with syncs.","title":"generated"},{"location":"syncs/#prefect_hightouch.syncs.generated.get_sync","text":"Retrieve sync from sync ID. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id float Sync ID used in formatting the endpoint URL. required Returns: Type Description api_models . sync . Sync id : str slug : str workspace_id : str created_at : str updated_at : str destination_id : str model_id : str configuration : Dict schedule : Dict status : \"models.SyncStatus\" disabled : bool last_run_at : str referenced_columns : List[str] primary_key : str","title":"get_sync()"},{"location":"syncs/#prefect_hightouch.syncs.generated.list_sync","text":"List all the syncs in the current workspace. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required slug Optional[str]] Filter based on slug. required model_id Optional[float]] Filter based on modelId. required after Optional[datetime.datetime]] Select syncs that were run after given time. required before Optional[datetime.datetime]] Select syncs that were run before given time. required limit Optional[float]] Limit the number of object it returns. Default is 100. required order_by Optional[models.list_sync_order_by.ListSyncOrderBy]] Specify the order. required Returns: Type Description typing . List [ api_models . sync . Sync ] data : List","title":"list_sync()"},{"location":"syncs/#prefect_hightouch.syncs.generated.list_sync_runs","text":"List all sync runs under a sync. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id float Sync ID used in formatting the endpoint URL. required run_id Optional[float]] Query for specific run id. required limit Optional[float]] Limit the number of object it returns. Default is 5. required offset Optional[float]] Setting offset from result(for pagination). required after Optional[datetime.datetime]] Select sync runs that are started after given timestamp. required before Optional[datetime.datetime]] Select sync runs that are started before certain timestamp. required within Optional[float]] Select sync runs that are started within last given minutes. required order_by Optional[models.list_sync_runs_order_by.ListSyncRunsOrderBy]] Specify the order. required Returns: Type Description typing . List [ api_models . sync_run . SyncRun ] data : List","title":"list_sync_runs()"},{"location":"syncs/#prefect_hightouch.syncs.generated.trigger_run","text":"Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required sync_id str Sync ID used in formatting the endpoint URL. required json_body models . trigger_run_input . TriggerRunInput The input of a trigger action to run syncs. required Returns: Type Description api_models . trigger_run_output . TriggerRunOutput id : str","title":"trigger_run()"},{"location":"syncs/#prefect_hightouch.syncs.generated.trigger_run_custom","text":"Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default hightouch_credentials HightouchCredentials Credentials to use for authentication with Hightouch. required json_body models . trigger_run_custom_input . TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters. required Returns: Type Description api_models . trigger_run_output . TriggerRunOutput id : str message : str details : Dict","title":"trigger_run_custom()"},{"location":"endpoints/get_destination/","text":"prefect_hightouch.api_client.api.default.get_destination This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async Get Destination Retrieve a destination based on its Hightouch ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required destination_id float required Returns: Type Description Optional [ Union [ Any , Destination ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_destination.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 async def asyncio ( client : AuthenticatedClient , destination_id : float , ) -> Optional [ Union [ Any , Destination ]]: \"\"\"Get Destination Retrieve a destination based on its Hightouch ID Args: client: An authenticated client. destination_id (float): Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( destination_id = destination_id , client = client , ) ) . parsed asyncio_detailed async Get Destination Retrieve a destination based on its Hightouch ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required destination_id float required Returns: Type Description Response [ Union [ Any , Destination ]] The response. Source code in prefect_hightouch/api_client/api/default/get_destination.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 async def asyncio_detailed ( client : AuthenticatedClient , destination_id : float , ) -> Response [ Union [ Any , Destination ]]: \"\"\"Get Destination Retrieve a destination based on its Hightouch ID Args: client: An authenticated client. destination_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( destination_id = destination_id , client = client , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync Get Destination Retrieve a destination based on its Hightouch ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required destination_id float required Returns: Type Description Optional [ Union [ Any , Destination ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_destination.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def sync ( client : AuthenticatedClient , destination_id : float , ) -> Optional [ Union [ Any , Destination ]]: \"\"\"Get Destination Retrieve a destination based on its Hightouch ID Args: client: An authenticated client. destination_id (float): Returns: The parsed response. \"\"\" return sync_detailed ( destination_id = destination_id , client = client , ) . parsed sync_detailed Get Destination Retrieve a destination based on its Hightouch ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required destination_id float required Returns: Type Description Response [ Union [ Any , Destination ]] The response. Source code in prefect_hightouch/api_client/api/default/get_destination.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def sync_detailed ( client : AuthenticatedClient , destination_id : float , ) -> Response [ Union [ Any , Destination ]]: \"\"\"Get Destination Retrieve a destination based on its Hightouch ID Args: client: An authenticated client. destination_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( destination_id = destination_id , client = client , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"get_destination"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"get_destination"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination.asyncio","text":"Get Destination Retrieve a destination based on its Hightouch ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required destination_id float required Returns: Type Description Optional [ Union [ Any , Destination ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_destination.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 async def asyncio ( client : AuthenticatedClient , destination_id : float , ) -> Optional [ Union [ Any , Destination ]]: \"\"\"Get Destination Retrieve a destination based on its Hightouch ID Args: client: An authenticated client. destination_id (float): Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( destination_id = destination_id , client = client , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination.asyncio_detailed","text":"Get Destination Retrieve a destination based on its Hightouch ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required destination_id float required Returns: Type Description Response [ Union [ Any , Destination ]] The response. Source code in prefect_hightouch/api_client/api/default/get_destination.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 async def asyncio_detailed ( client : AuthenticatedClient , destination_id : float , ) -> Response [ Union [ Any , Destination ]]: \"\"\"Get Destination Retrieve a destination based on its Hightouch ID Args: client: An authenticated client. destination_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( destination_id = destination_id , client = client , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination.sync","text":"Get Destination Retrieve a destination based on its Hightouch ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required destination_id float required Returns: Type Description Optional [ Union [ Any , Destination ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_destination.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def sync ( client : AuthenticatedClient , destination_id : float , ) -> Optional [ Union [ Any , Destination ]]: \"\"\"Get Destination Retrieve a destination based on its Hightouch ID Args: client: An authenticated client. destination_id (float): Returns: The parsed response. \"\"\" return sync_detailed ( destination_id = destination_id , client = client , ) . parsed","title":"sync()"},{"location":"endpoints/get_destination/#prefect_hightouch.api_client.api.default.get_destination.sync_detailed","text":"Get Destination Retrieve a destination based on its Hightouch ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required destination_id float required Returns: Type Description Response [ Union [ Any , Destination ]] The response. Source code in prefect_hightouch/api_client/api/default/get_destination.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def sync_detailed ( client : AuthenticatedClient , destination_id : float , ) -> Response [ Union [ Any , Destination ]]: \"\"\"Get Destination Retrieve a destination based on its Hightouch ID Args: client: An authenticated client. destination_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( destination_id = destination_id , client = client , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/get_model/","text":"prefect_hightouch.api_client.api.default.get_model This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async Get Model Retrieve models from model ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required model_id float required Returns: Type Description Optional [ Union [ Any , Model ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_model.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 async def asyncio ( client : AuthenticatedClient , model_id : float , ) -> Optional [ Union [ Any , Model ]]: \"\"\"Get Model Retrieve models from model ID Args: client: An authenticated client. model_id (float): Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( model_id = model_id , client = client , ) ) . parsed asyncio_detailed async Get Model Retrieve models from model ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required model_id float required Returns: Type Description Response [ Union [ Any , Model ]] The response. Source code in prefect_hightouch/api_client/api/default/get_model.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 async def asyncio_detailed ( client : AuthenticatedClient , model_id : float , ) -> Response [ Union [ Any , Model ]]: \"\"\"Get Model Retrieve models from model ID Args: client: An authenticated client. model_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( model_id = model_id , client = client , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync Get Model Retrieve models from model ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required model_id float required Returns: Type Description Optional [ Union [ Any , Model ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_model.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def sync ( client : AuthenticatedClient , model_id : float , ) -> Optional [ Union [ Any , Model ]]: \"\"\"Get Model Retrieve models from model ID Args: client: An authenticated client. model_id (float): Returns: The parsed response. \"\"\" return sync_detailed ( model_id = model_id , client = client , ) . parsed sync_detailed Get Model Retrieve models from model ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required model_id float required Returns: Type Description Response [ Union [ Any , Model ]] The response. Source code in prefect_hightouch/api_client/api/default/get_model.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def sync_detailed ( client : AuthenticatedClient , model_id : float , ) -> Response [ Union [ Any , Model ]]: \"\"\"Get Model Retrieve models from model ID Args: client: An authenticated client. model_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( model_id = model_id , client = client , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"get_model"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"get_model"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model.asyncio","text":"Get Model Retrieve models from model ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required model_id float required Returns: Type Description Optional [ Union [ Any , Model ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_model.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 async def asyncio ( client : AuthenticatedClient , model_id : float , ) -> Optional [ Union [ Any , Model ]]: \"\"\"Get Model Retrieve models from model ID Args: client: An authenticated client. model_id (float): Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( model_id = model_id , client = client , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model.asyncio_detailed","text":"Get Model Retrieve models from model ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required model_id float required Returns: Type Description Response [ Union [ Any , Model ]] The response. Source code in prefect_hightouch/api_client/api/default/get_model.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 async def asyncio_detailed ( client : AuthenticatedClient , model_id : float , ) -> Response [ Union [ Any , Model ]]: \"\"\"Get Model Retrieve models from model ID Args: client: An authenticated client. model_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( model_id = model_id , client = client , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model.sync","text":"Get Model Retrieve models from model ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required model_id float required Returns: Type Description Optional [ Union [ Any , Model ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_model.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def sync ( client : AuthenticatedClient , model_id : float , ) -> Optional [ Union [ Any , Model ]]: \"\"\"Get Model Retrieve models from model ID Args: client: An authenticated client. model_id (float): Returns: The parsed response. \"\"\" return sync_detailed ( model_id = model_id , client = client , ) . parsed","title":"sync()"},{"location":"endpoints/get_model/#prefect_hightouch.api_client.api.default.get_model.sync_detailed","text":"Get Model Retrieve models from model ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required model_id float required Returns: Type Description Response [ Union [ Any , Model ]] The response. Source code in prefect_hightouch/api_client/api/default/get_model.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def sync_detailed ( client : AuthenticatedClient , model_id : float , ) -> Response [ Union [ Any , Model ]]: \"\"\"Get Model Retrieve models from model ID Args: client: An authenticated client. model_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( model_id = model_id , client = client , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/get_source/","text":"prefect_hightouch.api_client.api.default.get_source This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async Get Source Retrieve source from source ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required source_id float required Returns: Type Description Optional [ Union [ Any , Source , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_source.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 async def asyncio ( client : AuthenticatedClient , source_id : float , ) -> Optional [ Union [ Any , Source , ValidateErrorJSON ]]: \"\"\"Get Source Retrieve source from source ID Args: client: An authenticated client. source_id (float): Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( source_id = source_id , client = client , ) ) . parsed asyncio_detailed async Get Source Retrieve source from source ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required source_id float required Returns: Type Description Response [ Union [ Any , Source , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/get_source.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 async def asyncio_detailed ( client : AuthenticatedClient , source_id : float , ) -> Response [ Union [ Any , Source , ValidateErrorJSON ]]: \"\"\"Get Source Retrieve source from source ID Args: client: An authenticated client. source_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( source_id = source_id , client = client , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync Get Source Retrieve source from source ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required source_id float required Returns: Type Description Optional [ Union [ Any , Source , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_source.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 def sync ( client : AuthenticatedClient , source_id : float , ) -> Optional [ Union [ Any , Source , ValidateErrorJSON ]]: \"\"\"Get Source Retrieve source from source ID Args: client: An authenticated client. source_id (float): Returns: The parsed response. \"\"\" return sync_detailed ( source_id = source_id , client = client , ) . parsed sync_detailed Get Source Retrieve source from source ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required source_id float required Returns: Type Description Response [ Union [ Any , Source , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/get_source.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def sync_detailed ( client : AuthenticatedClient , source_id : float , ) -> Response [ Union [ Any , Source , ValidateErrorJSON ]]: \"\"\"Get Source Retrieve source from source ID Args: client: An authenticated client. source_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( source_id = source_id , client = client , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"get_source"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"get_source"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source.asyncio","text":"Get Source Retrieve source from source ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required source_id float required Returns: Type Description Optional [ Union [ Any , Source , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_source.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 async def asyncio ( client : AuthenticatedClient , source_id : float , ) -> Optional [ Union [ Any , Source , ValidateErrorJSON ]]: \"\"\"Get Source Retrieve source from source ID Args: client: An authenticated client. source_id (float): Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( source_id = source_id , client = client , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source.asyncio_detailed","text":"Get Source Retrieve source from source ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required source_id float required Returns: Type Description Response [ Union [ Any , Source , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/get_source.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 async def asyncio_detailed ( client : AuthenticatedClient , source_id : float , ) -> Response [ Union [ Any , Source , ValidateErrorJSON ]]: \"\"\"Get Source Retrieve source from source ID Args: client: An authenticated client. source_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( source_id = source_id , client = client , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source.sync","text":"Get Source Retrieve source from source ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required source_id float required Returns: Type Description Optional [ Union [ Any , Source , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_source.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 def sync ( client : AuthenticatedClient , source_id : float , ) -> Optional [ Union [ Any , Source , ValidateErrorJSON ]]: \"\"\"Get Source Retrieve source from source ID Args: client: An authenticated client. source_id (float): Returns: The parsed response. \"\"\" return sync_detailed ( source_id = source_id , client = client , ) . parsed","title":"sync()"},{"location":"endpoints/get_source/#prefect_hightouch.api_client.api.default.get_source.sync_detailed","text":"Get Source Retrieve source from source ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required source_id float required Returns: Type Description Response [ Union [ Any , Source , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/get_source.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 def sync_detailed ( client : AuthenticatedClient , source_id : float , ) -> Response [ Union [ Any , Source , ValidateErrorJSON ]]: \"\"\"Get Source Retrieve source from source ID Args: client: An authenticated client. source_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( source_id = source_id , client = client , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/get_sync/","text":"prefect_hightouch.api_client.api.default.get_sync This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async Get Sync Retrieve sync from sync ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required Returns: Type Description Optional [ Union [ Any , Sync ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_sync.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 async def asyncio ( client : AuthenticatedClient , sync_id : float , ) -> Optional [ Union [ Any , Sync ]]: \"\"\"Get Sync Retrieve sync from sync ID Args: client: An authenticated client. sync_id (float): Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( sync_id = sync_id , client = client , ) ) . parsed asyncio_detailed async Get Sync Retrieve sync from sync ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required Returns: Type Description Response [ Union [ Any , Sync ]] The response. Source code in prefect_hightouch/api_client/api/default/get_sync.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 async def asyncio_detailed ( client : AuthenticatedClient , sync_id : float , ) -> Response [ Union [ Any , Sync ]]: \"\"\"Get Sync Retrieve sync from sync ID Args: client: An authenticated client. sync_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync Get Sync Retrieve sync from sync ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required Returns: Type Description Optional [ Union [ Any , Sync ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_sync.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def sync ( client : AuthenticatedClient , sync_id : float , ) -> Optional [ Union [ Any , Sync ]]: \"\"\"Get Sync Retrieve sync from sync ID Args: client: An authenticated client. sync_id (float): Returns: The parsed response. \"\"\" return sync_detailed ( sync_id = sync_id , client = client , ) . parsed sync_detailed Get Sync Retrieve sync from sync ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required Returns: Type Description Response [ Union [ Any , Sync ]] The response. Source code in prefect_hightouch/api_client/api/default/get_sync.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def sync_detailed ( client : AuthenticatedClient , sync_id : float , ) -> Response [ Union [ Any , Sync ]]: \"\"\"Get Sync Retrieve sync from sync ID Args: client: An authenticated client. sync_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"get_sync"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"get_sync"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync.asyncio","text":"Get Sync Retrieve sync from sync ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required Returns: Type Description Optional [ Union [ Any , Sync ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_sync.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 async def asyncio ( client : AuthenticatedClient , sync_id : float , ) -> Optional [ Union [ Any , Sync ]]: \"\"\"Get Sync Retrieve sync from sync ID Args: client: An authenticated client. sync_id (float): Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( sync_id = sync_id , client = client , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync.asyncio_detailed","text":"Get Sync Retrieve sync from sync ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required Returns: Type Description Response [ Union [ Any , Sync ]] The response. Source code in prefect_hightouch/api_client/api/default/get_sync.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 async def asyncio_detailed ( client : AuthenticatedClient , sync_id : float , ) -> Response [ Union [ Any , Sync ]]: \"\"\"Get Sync Retrieve sync from sync ID Args: client: An authenticated client. sync_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync.sync","text":"Get Sync Retrieve sync from sync ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required Returns: Type Description Optional [ Union [ Any , Sync ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/get_sync.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def sync ( client : AuthenticatedClient , sync_id : float , ) -> Optional [ Union [ Any , Sync ]]: \"\"\"Get Sync Retrieve sync from sync ID Args: client: An authenticated client. sync_id (float): Returns: The parsed response. \"\"\" return sync_detailed ( sync_id = sync_id , client = client , ) . parsed","title":"sync()"},{"location":"endpoints/get_sync/#prefect_hightouch.api_client.api.default.get_sync.sync_detailed","text":"Get Sync Retrieve sync from sync ID Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required Returns: Type Description Response [ Union [ Any , Sync ]] The response. Source code in prefect_hightouch/api_client/api/default/get_sync.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def sync_detailed ( client : AuthenticatedClient , sync_id : float , ) -> Response [ Union [ Any , Sync ]]: \"\"\"Get Sync Retrieve sync from sync ID Args: client: An authenticated client. sync_id (float): Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/list_destination/","text":"prefect_hightouch.api_client.api.default.list_destination This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async List Destinations List the destinations in the user's workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListDestinationOrderBy ] ListDestinationOrderBy.ID. ListDestinationOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_destination.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 async def asyncio ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListDestinationOrderBy ] = ListDestinationOrderBy . ID , ) -> Optional [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]]: \"\"\"List Destinations List the destinations in the user's workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListDestinationOrderBy]): Default: ListDestinationOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) ) . parsed asyncio_detailed async List Destinations List the destinations in the user's workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListDestinationOrderBy ] ListDestinationOrderBy.ID. ListDestinationOrderBy.ID Returns: Type Description Response [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_destination.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 async def asyncio_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListDestinationOrderBy ] = ListDestinationOrderBy . ID , ) -> Response [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]]: \"\"\"List Destinations List the destinations in the user's workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListDestinationOrderBy]): Default: ListDestinationOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync List Destinations List the destinations in the user's workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListDestinationOrderBy ] ListDestinationOrderBy.ID. ListDestinationOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_destination.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def sync ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListDestinationOrderBy ] = ListDestinationOrderBy . ID , ) -> Optional [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]]: \"\"\"List Destinations List the destinations in the user's workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListDestinationOrderBy]): Default: ListDestinationOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) . parsed sync_detailed List Destinations List the destinations in the user's workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListDestinationOrderBy ] ListDestinationOrderBy.ID. ListDestinationOrderBy.ID Returns: Type Description Response [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_destination.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def sync_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListDestinationOrderBy ] = ListDestinationOrderBy . ID , ) -> Response [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]]: \"\"\"List Destinations List the destinations in the user's workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListDestinationOrderBy]): Default: ListDestinationOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"list_destination"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"list_destination"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination.asyncio","text":"List Destinations List the destinations in the user's workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListDestinationOrderBy ] ListDestinationOrderBy.ID. ListDestinationOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_destination.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 async def asyncio ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListDestinationOrderBy ] = ListDestinationOrderBy . ID , ) -> Optional [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]]: \"\"\"List Destinations List the destinations in the user's workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListDestinationOrderBy]): Default: ListDestinationOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination.asyncio_detailed","text":"List Destinations List the destinations in the user's workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListDestinationOrderBy ] ListDestinationOrderBy.ID. ListDestinationOrderBy.ID Returns: Type Description Response [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_destination.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 async def asyncio_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListDestinationOrderBy ] = ListDestinationOrderBy . ID , ) -> Response [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]]: \"\"\"List Destinations List the destinations in the user's workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListDestinationOrderBy]): Default: ListDestinationOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination.sync","text":"List Destinations List the destinations in the user's workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListDestinationOrderBy ] ListDestinationOrderBy.ID. ListDestinationOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_destination.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def sync ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListDestinationOrderBy ] = ListDestinationOrderBy . ID , ) -> Optional [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]]: \"\"\"List Destinations List the destinations in the user's workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListDestinationOrderBy]): Default: ListDestinationOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) . parsed","title":"sync()"},{"location":"endpoints/list_destination/#prefect_hightouch.api_client.api.default.list_destination.sync_detailed","text":"List Destinations List the destinations in the user's workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListDestinationOrderBy ] ListDestinationOrderBy.ID. ListDestinationOrderBy.ID Returns: Type Description Response [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_destination.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def sync_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListDestinationOrderBy ] = ListDestinationOrderBy . ID , ) -> Response [ Union [ Any , ListDestinationResponse200 , ValidateErrorJSON ]]: \"\"\"List Destinations List the destinations in the user's workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListDestinationOrderBy]): Default: ListDestinationOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/list_model/","text":"prefect_hightouch.api_client.api.default.list_model This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async List Models List all the models in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListModelOrderBy ] ListModelOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_model.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 async def asyncio ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListModelOrderBy ] = ListModelOrderBy . ID , ) -> Optional [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]]: \"\"\"List Models List all the models in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListModelOrderBy]): Default: ListModelOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) ) . parsed asyncio_detailed async List Models List all the models in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListModelOrderBy ] ListModelOrderBy.ID Returns: Type Description Response [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_model.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 async def asyncio_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListModelOrderBy ] = ListModelOrderBy . ID , ) -> Response [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]]: \"\"\"List Models List all the models in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListModelOrderBy]): Default: ListModelOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync List Models List all the models in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListModelOrderBy ] ListModelOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_model.py 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def sync ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListModelOrderBy ] = ListModelOrderBy . ID , ) -> Optional [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]]: \"\"\"List Models List all the models in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListModelOrderBy]): Default: ListModelOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) . parsed sync_detailed List Models List all the models in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListModelOrderBy ] ListModelOrderBy.ID Returns: Type Description Response [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_model.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 def sync_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListModelOrderBy ] = ListModelOrderBy . ID , ) -> Response [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]]: \"\"\"List Models List all the models in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListModelOrderBy]): Default: ListModelOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"list_model"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"list_model"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model.asyncio","text":"List Models List all the models in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListModelOrderBy ] ListModelOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_model.py 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 async def asyncio ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListModelOrderBy ] = ListModelOrderBy . ID , ) -> Optional [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]]: \"\"\"List Models List all the models in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListModelOrderBy]): Default: ListModelOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model.asyncio_detailed","text":"List Models List all the models in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListModelOrderBy ] ListModelOrderBy.ID Returns: Type Description Response [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_model.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 async def asyncio_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListModelOrderBy ] = ListModelOrderBy . ID , ) -> Response [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]]: \"\"\"List Models List all the models in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListModelOrderBy]): Default: ListModelOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model.sync","text":"List Models List all the models in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListModelOrderBy ] ListModelOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_model.py 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def sync ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListModelOrderBy ] = ListModelOrderBy . ID , ) -> Optional [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]]: \"\"\"List Models List all the models in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListModelOrderBy]): Default: ListModelOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) . parsed","title":"sync()"},{"location":"endpoints/list_model/#prefect_hightouch.api_client.api.default.list_model.sync_detailed","text":"List Models List all the models in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListModelOrderBy ] ListModelOrderBy.ID Returns: Type Description Response [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_model.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 def sync_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListModelOrderBy ] = ListModelOrderBy . ID , ) -> Response [ Union [ Any , ListModelResponse200 , ValidateErrorJSON ]]: \"\"\"List Models List all the models in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListModelOrderBy]): Default: ListModelOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/list_source/","text":"prefect_hightouch.api_client.api.default.list_source This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async List Sources List all the sources in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSourceOrderBy ] ListSourceOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSourceResponse200 ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_source.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 async def asyncio ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSourceOrderBy ] = ListSourceOrderBy . ID , ) -> Optional [ Union [ Any , ListSourceResponse200 ]]: \"\"\"List Sources List all the sources in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSourceOrderBy]): Default: ListSourceOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) ) . parsed asyncio_detailed async List Sources List all the sources in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSourceOrderBy ] ListSourceOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSourceResponse200 ]] The response. Source code in prefect_hightouch/api_client/api/default/list_source.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 async def asyncio_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSourceOrderBy ] = ListSourceOrderBy . ID , ) -> Response [ Union [ Any , ListSourceResponse200 ]]: \"\"\"List Sources List all the sources in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSourceOrderBy]): Default: ListSourceOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync List Sources List all the sources in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSourceOrderBy ] ListSourceOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSourceResponse200 ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_source.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 def sync ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSourceOrderBy ] = ListSourceOrderBy . ID , ) -> Optional [ Union [ Any , ListSourceResponse200 ]]: \"\"\"List Sources List all the sources in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSourceOrderBy]): Default: ListSourceOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) . parsed sync_detailed List Sources List all the sources in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSourceOrderBy ] ListSourceOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSourceResponse200 ]] The response. Source code in prefect_hightouch/api_client/api/default/list_source.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def sync_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSourceOrderBy ] = ListSourceOrderBy . ID , ) -> Response [ Union [ Any , ListSourceResponse200 ]]: \"\"\"List Sources List all the sources in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSourceOrderBy]): Default: ListSourceOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"list_source"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"list_source"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source.asyncio","text":"List Sources List all the sources in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSourceOrderBy ] ListSourceOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSourceResponse200 ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_source.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 async def asyncio ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSourceOrderBy ] = ListSourceOrderBy . ID , ) -> Optional [ Union [ Any , ListSourceResponse200 ]]: \"\"\"List Sources List all the sources in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSourceOrderBy]): Default: ListSourceOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source.asyncio_detailed","text":"List Sources List all the sources in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSourceOrderBy ] ListSourceOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSourceResponse200 ]] The response. Source code in prefect_hightouch/api_client/api/default/list_source.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 async def asyncio_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSourceOrderBy ] = ListSourceOrderBy . ID , ) -> Response [ Union [ Any , ListSourceResponse200 ]]: \"\"\"List Sources List all the sources in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSourceOrderBy]): Default: ListSourceOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source.sync","text":"List Sources List all the sources in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSourceOrderBy ] ListSourceOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSourceResponse200 ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_source.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 def sync ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSourceOrderBy ] = ListSourceOrderBy . ID , ) -> Optional [ Union [ Any , ListSourceResponse200 ]]: \"\"\"List Sources List all the sources in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSourceOrderBy]): Default: ListSourceOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) . parsed","title":"sync()"},{"location":"endpoints/list_source/#prefect_hightouch.api_client.api.default.list_source.sync_detailed","text":"List Sources List all the sources in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required name Union [ Unset , None, str ] UNSET slug Union [ Unset , None, str ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSourceOrderBy ] ListSourceOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSourceResponse200 ]] The response. Source code in prefect_hightouch/api_client/api/default/list_source.py 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def sync_detailed ( client : AuthenticatedClient , name : Union [ Unset , None , str ] = UNSET , slug : Union [ Unset , None , str ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSourceOrderBy ] = ListSourceOrderBy . ID , ) -> Response [ Union [ Any , ListSourceResponse200 ]]: \"\"\"List Sources List all the sources in the current workspace Args: client: An authenticated client. name (Union[Unset, None, str]): slug (Union[Unset, None, str]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSourceOrderBy]): Default: ListSourceOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , name = name , slug = slug , limit = limit , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/list_sync/","text":"prefect_hightouch.api_client.api.default.list_sync This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async List Syncs List all the syncs in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required slug Union [ Unset , None, str ] UNSET model_id Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncOrderBy ] ListSyncOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_sync.py 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 async def asyncio ( client : AuthenticatedClient , slug : Union [ Unset , None , str ] = UNSET , model_id : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncOrderBy ] = ListSyncOrderBy . ID , ) -> Optional [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]]: \"\"\"List Syncs List all the syncs in the current workspace Args: client: An authenticated client. slug (Union[Unset, None, str]): model_id (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncOrderBy]): Default: ListSyncOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , slug = slug , model_id = model_id , after = after , before = before , limit = limit , order_by = order_by , ) ) . parsed asyncio_detailed async List Syncs List all the syncs in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required slug Union [ Unset , None, str ] UNSET model_id Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncOrderBy ] ListSyncOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_sync.py 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 async def asyncio_detailed ( client : AuthenticatedClient , slug : Union [ Unset , None , str ] = UNSET , model_id : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncOrderBy ] = ListSyncOrderBy . ID , ) -> Response [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]]: \"\"\"List Syncs List all the syncs in the current workspace Args: client: An authenticated client. slug (Union[Unset, None, str]): model_id (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncOrderBy]): Default: ListSyncOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , slug = slug , model_id = model_id , after = after , before = before , limit = limit , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync List Syncs List all the syncs in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required slug Union [ Unset , None, str ] UNSET model_id Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncOrderBy ] ListSyncOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_sync.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def sync ( client : AuthenticatedClient , slug : Union [ Unset , None , str ] = UNSET , model_id : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncOrderBy ] = ListSyncOrderBy . ID , ) -> Optional [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]]: \"\"\"List Syncs List all the syncs in the current workspace Args: client: An authenticated client. slug (Union[Unset, None, str]): model_id (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncOrderBy]): Default: ListSyncOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( client = client , slug = slug , model_id = model_id , after = after , before = before , limit = limit , order_by = order_by , ) . parsed sync_detailed List Syncs List all the syncs in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required slug Union [ Unset , None, str ] UNSET model_id Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncOrderBy ] ListSyncOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_sync.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 def sync_detailed ( client : AuthenticatedClient , slug : Union [ Unset , None , str ] = UNSET , model_id : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncOrderBy ] = ListSyncOrderBy . ID , ) -> Response [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]]: \"\"\"List Syncs List all the syncs in the current workspace Args: client: An authenticated client. slug (Union[Unset, None, str]): model_id (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncOrderBy]): Default: ListSyncOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , slug = slug , model_id = model_id , after = after , before = before , limit = limit , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"list_sync"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"list_sync"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync.asyncio","text":"List Syncs List all the syncs in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required slug Union [ Unset , None, str ] UNSET model_id Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncOrderBy ] ListSyncOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_sync.py 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 async def asyncio ( client : AuthenticatedClient , slug : Union [ Unset , None , str ] = UNSET , model_id : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncOrderBy ] = ListSyncOrderBy . ID , ) -> Optional [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]]: \"\"\"List Syncs List all the syncs in the current workspace Args: client: An authenticated client. slug (Union[Unset, None, str]): model_id (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncOrderBy]): Default: ListSyncOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , slug = slug , model_id = model_id , after = after , before = before , limit = limit , order_by = order_by , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync.asyncio_detailed","text":"List Syncs List all the syncs in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required slug Union [ Unset , None, str ] UNSET model_id Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncOrderBy ] ListSyncOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_sync.py 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 async def asyncio_detailed ( client : AuthenticatedClient , slug : Union [ Unset , None , str ] = UNSET , model_id : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncOrderBy ] = ListSyncOrderBy . ID , ) -> Response [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]]: \"\"\"List Syncs List all the syncs in the current workspace Args: client: An authenticated client. slug (Union[Unset, None, str]): model_id (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncOrderBy]): Default: ListSyncOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , slug = slug , model_id = model_id , after = after , before = before , limit = limit , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync.sync","text":"List Syncs List all the syncs in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required slug Union [ Unset , None, str ] UNSET model_id Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncOrderBy ] ListSyncOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_sync.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def sync ( client : AuthenticatedClient , slug : Union [ Unset , None , str ] = UNSET , model_id : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncOrderBy ] = ListSyncOrderBy . ID , ) -> Optional [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]]: \"\"\"List Syncs List all the syncs in the current workspace Args: client: An authenticated client. slug (Union[Unset, None, str]): model_id (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncOrderBy]): Default: ListSyncOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( client = client , slug = slug , model_id = model_id , after = after , before = before , limit = limit , order_by = order_by , ) . parsed","title":"sync()"},{"location":"endpoints/list_sync/#prefect_hightouch.api_client.api.default.list_sync.sync_detailed","text":"List Syncs List all the syncs in the current workspace Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required slug Union [ Unset , None, str ] UNSET model_id Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET limit Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncOrderBy ] ListSyncOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_sync.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 def sync_detailed ( client : AuthenticatedClient , slug : Union [ Unset , None , str ] = UNSET , model_id : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncOrderBy ] = ListSyncOrderBy . ID , ) -> Response [ Union [ Any , ListSyncResponse200 , ValidateErrorJSON ]]: \"\"\"List Syncs List all the syncs in the current workspace Args: client: An authenticated client. slug (Union[Unset, None, str]): model_id (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): limit (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncOrderBy]): Default: ListSyncOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , slug = slug , model_id = model_id , after = after , before = before , limit = limit , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/list_sync_runs/","text":"prefect_hightouch.api_client.api.default.list_sync_runs This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async List Sync Runs List all sync runs under a sync Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required run_id Union [ Unset , None, float ] UNSET limit Union [ Unset , None, float ] UNSET offset Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET within Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncRunsOrderBy ] ListSyncRunsOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_sync_runs.py 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 async def asyncio ( client : AuthenticatedClient , sync_id : float , run_id : Union [ Unset , None , float ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , offset : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , within : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncRunsOrderBy ] = ListSyncRunsOrderBy . ID , ) -> Optional [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]]: \"\"\"List Sync Runs List all sync runs under a sync Args: client: An authenticated client. sync_id (float): run_id (Union[Unset, None, float]): limit (Union[Unset, None, float]): offset (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): within (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncRunsOrderBy]): Default: ListSyncRunsOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( sync_id = sync_id , client = client , run_id = run_id , limit = limit , offset = offset , after = after , before = before , within = within , order_by = order_by , ) ) . parsed asyncio_detailed async List Sync Runs List all sync runs under a sync Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required run_id Union [ Unset , None, float ] UNSET limit Union [ Unset , None, float ] UNSET offset Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET within Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncRunsOrderBy ] ListSyncRunsOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_sync_runs.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 async def asyncio_detailed ( client : AuthenticatedClient , sync_id : float , run_id : Union [ Unset , None , float ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , offset : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , within : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncRunsOrderBy ] = ListSyncRunsOrderBy . ID , ) -> Response [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]]: \"\"\"List Sync Runs List all sync runs under a sync Args: client: An authenticated client. sync_id (float): run_id (Union[Unset, None, float]): limit (Union[Unset, None, float]): offset (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): within (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncRunsOrderBy]): Default: ListSyncRunsOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , run_id = run_id , limit = limit , offset = offset , after = after , before = before , within = within , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync List Sync Runs List all sync runs under a sync Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required run_id Union [ Unset , None, float ] UNSET limit Union [ Unset , None, float ] UNSET offset Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET within Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncRunsOrderBy ] ListSyncRunsOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_sync_runs.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 def sync ( client : AuthenticatedClient , sync_id : float , run_id : Union [ Unset , None , float ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , offset : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , within : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncRunsOrderBy ] = ListSyncRunsOrderBy . ID , ) -> Optional [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]]: \"\"\"List Sync Runs List all sync runs under a sync Args: client: An authenticated client. sync_id (float): run_id (Union[Unset, None, float]): limit (Union[Unset, None, float]): offset (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): within (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncRunsOrderBy]): Default: ListSyncRunsOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( sync_id = sync_id , client = client , run_id = run_id , limit = limit , offset = offset , after = after , before = before , within = within , order_by = order_by , ) . parsed sync_detailed List Sync Runs List all sync runs under a sync Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required run_id Union [ Unset , None, float ] UNSET limit Union [ Unset , None, float ] UNSET offset Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET within Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncRunsOrderBy ] ListSyncRunsOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_sync_runs.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def sync_detailed ( client : AuthenticatedClient , sync_id : float , run_id : Union [ Unset , None , float ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , offset : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , within : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncRunsOrderBy ] = ListSyncRunsOrderBy . ID , ) -> Response [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]]: \"\"\"List Sync Runs List all sync runs under a sync Args: client: An authenticated client. sync_id (float): run_id (Union[Unset, None, float]): limit (Union[Unset, None, float]): offset (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): within (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncRunsOrderBy]): Default: ListSyncRunsOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , run_id = run_id , limit = limit , offset = offset , after = after , before = before , within = within , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"list_sync_runs"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"list_sync_runs"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs.asyncio","text":"List Sync Runs List all sync runs under a sync Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required run_id Union [ Unset , None, float ] UNSET limit Union [ Unset , None, float ] UNSET offset Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET within Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncRunsOrderBy ] ListSyncRunsOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_sync_runs.py 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 async def asyncio ( client : AuthenticatedClient , sync_id : float , run_id : Union [ Unset , None , float ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , offset : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , within : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncRunsOrderBy ] = ListSyncRunsOrderBy . ID , ) -> Optional [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]]: \"\"\"List Sync Runs List all sync runs under a sync Args: client: An authenticated client. sync_id (float): run_id (Union[Unset, None, float]): limit (Union[Unset, None, float]): offset (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): within (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncRunsOrderBy]): Default: ListSyncRunsOrderBy.ID. Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( sync_id = sync_id , client = client , run_id = run_id , limit = limit , offset = offset , after = after , before = before , within = within , order_by = order_by , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs.asyncio_detailed","text":"List Sync Runs List all sync runs under a sync Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required run_id Union [ Unset , None, float ] UNSET limit Union [ Unset , None, float ] UNSET offset Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET within Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncRunsOrderBy ] ListSyncRunsOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_sync_runs.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 async def asyncio_detailed ( client : AuthenticatedClient , sync_id : float , run_id : Union [ Unset , None , float ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , offset : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , within : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncRunsOrderBy ] = ListSyncRunsOrderBy . ID , ) -> Response [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]]: \"\"\"List Sync Runs List all sync runs under a sync Args: client: An authenticated client. sync_id (float): run_id (Union[Unset, None, float]): limit (Union[Unset, None, float]): offset (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): within (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncRunsOrderBy]): Default: ListSyncRunsOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , run_id = run_id , limit = limit , offset = offset , after = after , before = before , within = within , order_by = order_by , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs.sync","text":"List Sync Runs List all sync runs under a sync Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required run_id Union [ Unset , None, float ] UNSET limit Union [ Unset , None, float ] UNSET offset Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET within Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncRunsOrderBy ] ListSyncRunsOrderBy.ID Returns: Type Description Optional [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/list_sync_runs.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 def sync ( client : AuthenticatedClient , sync_id : float , run_id : Union [ Unset , None , float ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , offset : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , within : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncRunsOrderBy ] = ListSyncRunsOrderBy . ID , ) -> Optional [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]]: \"\"\"List Sync Runs List all sync runs under a sync Args: client: An authenticated client. sync_id (float): run_id (Union[Unset, None, float]): limit (Union[Unset, None, float]): offset (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): within (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncRunsOrderBy]): Default: ListSyncRunsOrderBy.ID. Returns: The parsed response. \"\"\" return sync_detailed ( sync_id = sync_id , client = client , run_id = run_id , limit = limit , offset = offset , after = after , before = before , within = within , order_by = order_by , ) . parsed","title":"sync()"},{"location":"endpoints/list_sync_runs/#prefect_hightouch.api_client.api.default.list_sync_runs.sync_detailed","text":"List Sync Runs List all sync runs under a sync Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id float required run_id Union [ Unset , None, float ] UNSET limit Union [ Unset , None, float ] UNSET offset Union [ Unset , None, float ] UNSET after Union [ Unset , None, datetime . datetime ] UNSET before Union [ Unset , None, datetime . datetime ] UNSET within Union [ Unset , None, float ] UNSET order_by Union [ Unset , None, ListSyncRunsOrderBy ] ListSyncRunsOrderBy.ID Returns: Type Description Response [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/list_sync_runs.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def sync_detailed ( client : AuthenticatedClient , sync_id : float , run_id : Union [ Unset , None , float ] = UNSET , limit : Union [ Unset , None , float ] = UNSET , offset : Union [ Unset , None , float ] = UNSET , after : Union [ Unset , None , datetime . datetime ] = UNSET , before : Union [ Unset , None , datetime . datetime ] = UNSET , within : Union [ Unset , None , float ] = UNSET , order_by : Union [ Unset , None , ListSyncRunsOrderBy ] = ListSyncRunsOrderBy . ID , ) -> Response [ Union [ Any , ListSyncRunsResponse200 , ValidateErrorJSON ]]: \"\"\"List Sync Runs List all sync runs under a sync Args: client: An authenticated client. sync_id (float): run_id (Union[Unset, None, float]): limit (Union[Unset, None, float]): offset (Union[Unset, None, float]): after (Union[Unset, None, datetime.datetime]): before (Union[Unset, None, datetime.datetime]): within (Union[Unset, None, float]): order_by (Union[Unset, None, ListSyncRunsOrderBy]): Default: ListSyncRunsOrderBy.ID. Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , run_id = run_id , limit = limit , offset = offset , after = after , before = before , within = within , order_by = order_by , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/trigger_run/","text":"prefect_hightouch.api_client.api.default.trigger_run This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id str required json_body TriggerRunInput The input of a trigger action to run syncs required Returns: Type Description Optional [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/trigger_run.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 async def asyncio ( client : AuthenticatedClient , sync_id : str , json_body : TriggerRunInput , ) -> Optional [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]]: \"\"\"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. sync_id (str): json_body (TriggerRunInput): The input of a trigger action to run syncs Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( sync_id = sync_id , client = client , json_body = json_body , ) ) . parsed asyncio_detailed async Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id str required json_body TriggerRunInput The input of a trigger action to run syncs required Returns: Type Description Response [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/trigger_run.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 async def asyncio_detailed ( client : AuthenticatedClient , sync_id : str , json_body : TriggerRunInput , ) -> Response [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]]: \"\"\"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. sync_id (str): json_body (TriggerRunInput): The input of a trigger action to run syncs Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , json_body = json_body , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id str required json_body TriggerRunInput The input of a trigger action to run syncs required Returns: Type Description Optional [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/trigger_run.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def sync ( client : AuthenticatedClient , sync_id : str , json_body : TriggerRunInput , ) -> Optional [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]]: \"\"\"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. sync_id (str): json_body (TriggerRunInput): The input of a trigger action to run syncs Returns: The parsed response. \"\"\" return sync_detailed ( sync_id = sync_id , client = client , json_body = json_body , ) . parsed sync_detailed Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id str required json_body TriggerRunInput The input of a trigger action to run syncs required Returns: Type Description Response [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/trigger_run.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def sync_detailed ( client : AuthenticatedClient , sync_id : str , json_body : TriggerRunInput , ) -> Response [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]]: \"\"\"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. sync_id (str): json_body (TriggerRunInput): The input of a trigger action to run syncs Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , json_body = json_body , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"trigger_run"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"trigger_run"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run.asyncio","text":"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id str required json_body TriggerRunInput The input of a trigger action to run syncs required Returns: Type Description Optional [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/trigger_run.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 async def asyncio ( client : AuthenticatedClient , sync_id : str , json_body : TriggerRunInput , ) -> Optional [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]]: \"\"\"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. sync_id (str): json_body (TriggerRunInput): The input of a trigger action to run syncs Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( sync_id = sync_id , client = client , json_body = json_body , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run.asyncio_detailed","text":"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id str required json_body TriggerRunInput The input of a trigger action to run syncs required Returns: Type Description Response [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/trigger_run.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 async def asyncio_detailed ( client : AuthenticatedClient , sync_id : str , json_body : TriggerRunInput , ) -> Response [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]]: \"\"\"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. sync_id (str): json_body (TriggerRunInput): The input of a trigger action to run syncs Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , json_body = json_body , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run.sync","text":"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id str required json_body TriggerRunInput The input of a trigger action to run syncs required Returns: Type Description Optional [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/trigger_run.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def sync ( client : AuthenticatedClient , sync_id : str , json_body : TriggerRunInput , ) -> Optional [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]]: \"\"\"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. sync_id (str): json_body (TriggerRunInput): The input of a trigger action to run syncs Returns: The parsed response. \"\"\" return sync_detailed ( sync_id = sync_id , client = client , json_body = json_body , ) . parsed","title":"sync()"},{"location":"endpoints/trigger_run/#prefect_hightouch.api_client.api.default.trigger_run.sync_detailed","text":"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required sync_id str required json_body TriggerRunInput The input of a trigger action to run syncs required Returns: Type Description Response [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/trigger_run.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def sync_detailed ( client : AuthenticatedClient , sync_id : str , json_body : TriggerRunInput , ) -> Response [ Union [ Any , TriggerRunOutput , ValidateErrorJSON ]]: \"\"\"Trigger Sync Trigger a new run for the given sync. If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. sync_id (str): json_body (TriggerRunInput): The input of a trigger action to run syncs Returns: The response. \"\"\" kwargs = _get_kwargs ( sync_id = sync_id , client = client , json_body = json_body , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"endpoints/trigger_run_custom/","text":"prefect_hightouch.api_client.api.default.trigger_run_custom This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful. asyncio async Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required json_body TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters required Returns: Type Description Optional [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/trigger_run_custom.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 async def asyncio ( client : AuthenticatedClient , json_body : TriggerRunCustomInput , ) -> Optional [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ] ]: \"\"\"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , json_body = json_body , ) ) . parsed asyncio_detailed async Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required json_body TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters required Returns: Type Description Response [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/trigger_run_custom.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 async def asyncio_detailed ( client : AuthenticatedClient , json_body : TriggerRunCustomInput , ) -> Response [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ] ]: \"\"\"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , json_body = json_body , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response ) sync Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required json_body TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters required Returns: Type Description Optional [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/trigger_run_custom.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def sync ( client : AuthenticatedClient , json_body : TriggerRunCustomInput , ) -> Optional [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ] ]: \"\"\"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters Returns: The parsed response. \"\"\" return sync_detailed ( client = client , json_body = json_body , ) . parsed sync_detailed Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required json_body TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters required Returns: Type Description Response [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/trigger_run_custom.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def sync_detailed ( client : AuthenticatedClient , json_body : TriggerRunCustomInput , ) -> Response [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ] ]: \"\"\"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , json_body = json_body , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"trigger_run_custom"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom","text":"This is a module containing functions, auto-generated from the REST schema, but note these are not Prefect tasks. Example usage shown below; be sure to replace endpoint_fn with the desired endpoint function. from prefect_hightouch.credentials import HightouchCredentials from prefect_hightouch.api_client.api.default import endpoint_fn credentials = HightouchCredentials ( token = \"my-service-token\" ) client = credentials . get_client () result = endpoint_fn . sync ( client = client ) The functions are described below: asyncio : Non-blocking request that returns parsed data (if successful) or None. Any calls must be awaited. asyncio_detailed : Non-blocking request that always returns a Request, optionally with parsed set if the request was successful. Any calls must be awaited. sync : Blocking request that returns parsed data (if successful) or None. sync_detailed : Blocking request that always returns a Request, optionally with parsed set if the request was successful.","title":"trigger_run_custom"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom.asyncio","text":"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required json_body TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters required Returns: Type Description Optional [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/trigger_run_custom.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 async def asyncio ( client : AuthenticatedClient , json_body : TriggerRunCustomInput , ) -> Optional [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ] ]: \"\"\"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters Returns: The parsed response. \"\"\" return ( await asyncio_detailed ( client = client , json_body = json_body , ) ) . parsed","title":"asyncio()"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom.asyncio_detailed","text":"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required json_body TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters required Returns: Type Description Response [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/trigger_run_custom.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 async def asyncio_detailed ( client : AuthenticatedClient , json_body : TriggerRunCustomInput , ) -> Response [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ] ]: \"\"\"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , json_body = json_body , ) async with httpx . AsyncClient ( verify = client . verify_ssl ) as _client : response = await _client . request ( ** kwargs ) return _build_response ( response = response )","title":"asyncio_detailed()"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom.sync","text":"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required json_body TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters required Returns: Type Description Optional [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ]] The parsed response. Source code in prefect_hightouch/api_client/api/default/trigger_run_custom.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 def sync ( client : AuthenticatedClient , json_body : TriggerRunCustomInput , ) -> Optional [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ] ]: \"\"\"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters Returns: The parsed response. \"\"\" return sync_detailed ( client = client , json_body = json_body , ) . parsed","title":"sync()"},{"location":"endpoints/trigger_run_custom/#prefect_hightouch.api_client.api.default.trigger_run_custom.sync_detailed","text":"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Parameters: Name Type Description Default client AuthenticatedClient An authenticated client. required json_body TriggerRunCustomInput The input of a trigger action to run syncs based on sync ID, slug or other filters required Returns: Type Description Response [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ]] The response. Source code in prefect_hightouch/api_client/api/default/trigger_run_custom.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 def sync_detailed ( client : AuthenticatedClient , json_body : TriggerRunCustomInput , ) -> Response [ Union [ Any , Union [ TriggerRunOutput , ValidateErrorJSON ], ValidateErrorJSON ] ]: \"\"\"Trigger Sync From ID or Slug Trigger a new run globally based on sync id or sync slug If a run is already in progress, this queues a sync run that will get executed immediately after the current run completes. Args: client: An authenticated client. json_body (TriggerRunCustomInput): The input of a trigger action to run syncs based on sync ID, slug or other filters Returns: The response. \"\"\" kwargs = _get_kwargs ( client = client , json_body = json_body , ) response = httpx . request ( verify = client . verify_ssl , ** kwargs , ) return _build_response ( response = response )","title":"sync_detailed()"},{"location":"models/cron_schedule/","text":"prefect_hightouch.api_client.models.cron_schedule CronSchedule Bases: BaseModel Attributes: Name Type Description expression str Source code in prefect_hightouch/api_client/models/cron_schedule.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class CronSchedule ( BaseModel ): \"\"\" Attributes: expression (str): \"\"\" expression : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: expression = self . expression field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"expression\" : expression , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} expression = d . pop ( \"expression\" ) cron_schedule = cls ( expression = expression , ) cron_schedule . additional_properties = d return cron_schedule @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute expression : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/cron_schedule.py 32 33 34 35 36 37 38 39 40 41 42 43 44 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} expression = d . pop ( \"expression\" ) cron_schedule = cls ( expression = expression , ) cron_schedule . additional_properties = d return cron_schedule to_dict Source code in prefect_hightouch/api_client/models/cron_schedule.py 19 20 21 22 23 24 25 26 27 28 29 30 def to_dict ( self ) -> Dict [ str , Any ]: expression = self . expression field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"expression\" : expression , } ) return field_dict","title":"CronSchedule"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule","text":"","title":"cron_schedule"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule","text":"Bases: BaseModel Attributes: Name Type Description expression str Source code in prefect_hightouch/api_client/models/cron_schedule.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class CronSchedule ( BaseModel ): \"\"\" Attributes: expression (str): \"\"\" expression : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: expression = self . expression field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"expression\" : expression , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} expression = d . pop ( \"expression\" ) cron_schedule = cls ( expression = expression , ) cron_schedule . additional_properties = d return cron_schedule @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"CronSchedule"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.additional_keys","text":"","title":"additional_keys"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.additional_properties","text":"","title":"additional_properties"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.expression","text":"","title":"expression"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.from_dict","text":"Source code in prefect_hightouch/api_client/models/cron_schedule.py 32 33 34 35 36 37 38 39 40 41 42 43 44 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} expression = d . pop ( \"expression\" ) cron_schedule = cls ( expression = expression , ) cron_schedule . additional_properties = d return cron_schedule","title":"from_dict()"},{"location":"models/cron_schedule/#prefect_hightouch.api_client.models.cron_schedule.CronSchedule.to_dict","text":"Source code in prefect_hightouch/api_client/models/cron_schedule.py 19 20 21 22 23 24 25 26 27 28 29 30 def to_dict ( self ) -> Dict [ str , Any ]: expression = self . expression field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"expression\" : expression , } ) return field_dict","title":"to_dict()"},{"location":"models/dbt_schedule/","text":"prefect_hightouch.api_client.models.dbt_schedule","title":"DbtSchedule"},{"location":"models/dbt_schedule/#prefect_hightouch.api_client.models.dbt_schedule","text":"","title":"dbt_schedule"},{"location":"models/dbt_schedule_account/","text":"prefect_hightouch.api_client.models.dbt_schedule_account","title":"DbtScheduleAccount"},{"location":"models/dbt_schedule_account/#prefect_hightouch.api_client.models.dbt_schedule_account","text":"","title":"dbt_schedule_account"},{"location":"models/dbt_schedule_job/","text":"prefect_hightouch.api_client.models.dbt_schedule_job","title":"DbtScheduleJob"},{"location":"models/dbt_schedule_job/#prefect_hightouch.api_client.models.dbt_schedule_job","text":"","title":"dbt_schedule_job"},{"location":"models/destination/","text":"prefect_hightouch.api_client.models.destination Destination Bases: BaseModel The service receiving your data (e.g. Salesforce, Hubspot, Customer.io, or a SFTP server) Attributes : configuration ( DestinationConfiguration ) : The destination 's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the destination was created id (str): The destination' s id name ( str ) : The destination 's name slug (str): The destination' s slug syncs ( List [ str ] ) : A list of syncs that sync to this destination . type ( str ) : The destination ' s type ( e . g . salesforce or hubspot ). updated_at ( datetime . datetime ) : The timestamp when the destination was last updated workspace_id ( str ) : The id of the workspace that the destination belongs to Source code in prefect_hightouch/api_client/models/destination.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 class Destination ( BaseModel ): \"\"\"The service receiving your data (e.g. Salesforce, Hubspot, Customer.io, or a SFTP server) Attributes: configuration (DestinationConfiguration): The destination's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the destination was created id (str): The destination's id name (str): The destination's name slug (str): The destination's slug syncs (List[str]): A list of syncs that sync to this destination. type (str): The destination's type (e.g. salesforce or hubspot). updated_at (datetime.datetime): The timestamp when the destination was last updated workspace_id (str): The id of the workspace that the destination belongs to \"\"\" configuration : DestinationConfiguration = None created_at : datetime . datetime = None id : str = None name : str = None slug : str = None syncs : List [ str ] = None type : str = None updated_at : datetime . datetime = None workspace_id : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () id = self . id name = self . name slug = self . slug syncs = self . syncs type = self . type updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"id\" : id , \"name\" : name , \"slug\" : slug , \"syncs\" : syncs , \"type\" : type , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = DestinationConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) name = d . pop ( \"name\" ) slug = d . pop ( \"slug\" ) syncs = cast ( List [ str ], d . pop ( \"syncs\" )) type = d . pop ( \"type\" ) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) destination = cls ( configuration = configuration , created_at = created_at , id = id , name = name , slug = slug , syncs = syncs , type = type , updated_at = updated_at , workspace_id = workspace_id , ) destination . additional_properties = d return destination @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute configuration : DestinationConfiguration = None class-attribute created_at : datetime . datetime = None class-attribute id : str = None class-attribute name : str = None class-attribute slug : str = None class-attribute syncs : List [ str ] = None class-attribute type : str = None class-attribute updated_at : datetime . datetime = None class-attribute workspace_id : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/destination.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = DestinationConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) name = d . pop ( \"name\" ) slug = d . pop ( \"slug\" ) syncs = cast ( List [ str ], d . pop ( \"syncs\" )) type = d . pop ( \"type\" ) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) destination = cls ( configuration = configuration , created_at = created_at , id = id , name = name , slug = slug , syncs = syncs , type = type , updated_at = updated_at , workspace_id = workspace_id , ) destination . additional_properties = d return destination to_dict Source code in prefect_hightouch/api_client/models/destination.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () id = self . id name = self . name slug = self . slug syncs = self . syncs type = self . type updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"id\" : id , \"name\" : name , \"slug\" : slug , \"syncs\" : syncs , \"type\" : type , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict","title":"Destination"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination","text":"","title":"destination"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination","text":"Bases: BaseModel The service receiving your data (e.g. Salesforce, Hubspot, Customer.io, or a SFTP server) Attributes : configuration ( DestinationConfiguration ) : The destination 's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the destination was created id (str): The destination' s id name ( str ) : The destination 's name slug (str): The destination' s slug syncs ( List [ str ] ) : A list of syncs that sync to this destination . type ( str ) : The destination ' s type ( e . g . salesforce or hubspot ). updated_at ( datetime . datetime ) : The timestamp when the destination was last updated workspace_id ( str ) : The id of the workspace that the destination belongs to Source code in prefect_hightouch/api_client/models/destination.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 class Destination ( BaseModel ): \"\"\"The service receiving your data (e.g. Salesforce, Hubspot, Customer.io, or a SFTP server) Attributes: configuration (DestinationConfiguration): The destination's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the destination was created id (str): The destination's id name (str): The destination's name slug (str): The destination's slug syncs (List[str]): A list of syncs that sync to this destination. type (str): The destination's type (e.g. salesforce or hubspot). updated_at (datetime.datetime): The timestamp when the destination was last updated workspace_id (str): The id of the workspace that the destination belongs to \"\"\" configuration : DestinationConfiguration = None created_at : datetime . datetime = None id : str = None name : str = None slug : str = None syncs : List [ str ] = None type : str = None updated_at : datetime . datetime = None workspace_id : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () id = self . id name = self . name slug = self . slug syncs = self . syncs type = self . type updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"id\" : id , \"name\" : name , \"slug\" : slug , \"syncs\" : syncs , \"type\" : type , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = DestinationConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) name = d . pop ( \"name\" ) slug = d . pop ( \"slug\" ) syncs = cast ( List [ str ], d . pop ( \"syncs\" )) type = d . pop ( \"type\" ) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) destination = cls ( configuration = configuration , created_at = created_at , id = id , name = name , slug = slug , syncs = syncs , type = type , updated_at = updated_at , workspace_id = workspace_id , ) destination . additional_properties = d return destination @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"Destination"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.additional_keys","text":"","title":"additional_keys"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.additional_properties","text":"","title":"additional_properties"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.configuration","text":"","title":"configuration"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.created_at","text":"","title":"created_at"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.id","text":"","title":"id"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.name","text":"","title":"name"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.slug","text":"","title":"slug"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.syncs","text":"","title":"syncs"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.type","text":"","title":"type"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.updated_at","text":"","title":"updated_at"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.workspace_id","text":"","title":"workspace_id"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.from_dict","text":"Source code in prefect_hightouch/api_client/models/destination.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = DestinationConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) name = d . pop ( \"name\" ) slug = d . pop ( \"slug\" ) syncs = cast ( List [ str ], d . pop ( \"syncs\" )) type = d . pop ( \"type\" ) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) destination = cls ( configuration = configuration , created_at = created_at , id = id , name = name , slug = slug , syncs = syncs , type = type , updated_at = updated_at , workspace_id = workspace_id , ) destination . additional_properties = d return destination","title":"from_dict()"},{"location":"models/destination/#prefect_hightouch.api_client.models.destination.Destination.to_dict","text":"Source code in prefect_hightouch/api_client/models/destination.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () id = self . id name = self . name slug = self . slug syncs = self . syncs type = self . type updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"id\" : id , \"name\" : name , \"slug\" : slug , \"syncs\" : syncs , \"type\" : type , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict","title":"to_dict()"},{"location":"models/destination_configuration/","text":"prefect_hightouch.api_client.models.destination_configuration DestinationConfiguration Bases: BaseModel The destination's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. Source code in prefect_hightouch/api_client/models/destination_configuration.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class DestinationConfiguration ( BaseModel ): \"\"\"The destination's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. \"\"\" additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} destination_configuration = cls () destination_configuration . additional_properties = d return destination_configuration @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/destination_configuration.py 30 31 32 33 34 35 36 37 38 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} destination_configuration = cls () destination_configuration . additional_properties = d return destination_configuration to_dict Source code in prefect_hightouch/api_client/models/destination_configuration.py 23 24 25 26 27 28 def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict","title":"DestinationConfiguration"},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration","text":"","title":"destination_configuration"},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration","text":"Bases: BaseModel The destination's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. Source code in prefect_hightouch/api_client/models/destination_configuration.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class DestinationConfiguration ( BaseModel ): \"\"\"The destination's configuration. This specifies general metadata about destination, like hostname and username. Hightouch will be using this configuration to connect to destination. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. \"\"\" additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} destination_configuration = cls () destination_configuration . additional_properties = d return destination_configuration @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"DestinationConfiguration"},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration.additional_keys","text":"","title":"additional_keys"},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration.additional_properties","text":"","title":"additional_properties"},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration.from_dict","text":"Source code in prefect_hightouch/api_client/models/destination_configuration.py 30 31 32 33 34 35 36 37 38 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} destination_configuration = cls () destination_configuration . additional_properties = d return destination_configuration","title":"from_dict()"},{"location":"models/destination_configuration/#prefect_hightouch.api_client.models.destination_configuration.DestinationConfiguration.to_dict","text":"Source code in prefect_hightouch/api_client/models/destination_configuration.py 23 24 25 26 27 28 def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict","title":"to_dict()"},{"location":"models/interval/","text":"prefect_hightouch.api_client.models.interval Interval Bases: BaseModel Attributes: Name Type Description quantity float unit IntervalUnit Source code in prefect_hightouch/api_client/models/interval.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 class Interval ( BaseModel ): \"\"\" Attributes: quantity (float): unit (IntervalUnit): \"\"\" quantity : float = None unit : IntervalUnit = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: quantity = self . quantity unit = self . unit . value field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"quantity\" : quantity , \"unit\" : unit , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} quantity = d . pop ( \"quantity\" ) unit = IntervalUnit ( d . pop ( \"unit\" )) interval = cls ( quantity = quantity , unit = unit , ) interval . additional_properties = d return interval @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute quantity : float = None class-attribute unit : IntervalUnit = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/interval.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} quantity = d . pop ( \"quantity\" ) unit = IntervalUnit ( d . pop ( \"unit\" )) interval = cls ( quantity = quantity , unit = unit , ) interval . additional_properties = d return interval to_dict Source code in prefect_hightouch/api_client/models/interval.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def to_dict ( self ) -> Dict [ str , Any ]: quantity = self . quantity unit = self . unit . value field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"quantity\" : quantity , \"unit\" : unit , } ) return field_dict","title":"Interval"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval","text":"","title":"interval"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval","text":"Bases: BaseModel Attributes: Name Type Description quantity float unit IntervalUnit Source code in prefect_hightouch/api_client/models/interval.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 class Interval ( BaseModel ): \"\"\" Attributes: quantity (float): unit (IntervalUnit): \"\"\" quantity : float = None unit : IntervalUnit = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: quantity = self . quantity unit = self . unit . value field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"quantity\" : quantity , \"unit\" : unit , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} quantity = d . pop ( \"quantity\" ) unit = IntervalUnit ( d . pop ( \"unit\" )) interval = cls ( quantity = quantity , unit = unit , ) interval . additional_properties = d return interval @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"Interval"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.additional_keys","text":"","title":"additional_keys"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.additional_properties","text":"","title":"additional_properties"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.quantity","text":"","title":"quantity"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.unit","text":"","title":"unit"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.from_dict","text":"Source code in prefect_hightouch/api_client/models/interval.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} quantity = d . pop ( \"quantity\" ) unit = IntervalUnit ( d . pop ( \"unit\" )) interval = cls ( quantity = quantity , unit = unit , ) interval . additional_properties = d return interval","title":"from_dict()"},{"location":"models/interval/#prefect_hightouch.api_client.models.interval.Interval.to_dict","text":"Source code in prefect_hightouch/api_client/models/interval.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def to_dict ( self ) -> Dict [ str , Any ]: quantity = self . quantity unit = self . unit . value field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"quantity\" : quantity , \"unit\" : unit , } ) return field_dict","title":"to_dict()"},{"location":"models/interval_schedule/","text":"prefect_hightouch.api_client.models.interval_schedule IntervalSchedule Bases: BaseModel Attributes: Name Type Description interval Interval Source code in prefect_hightouch/api_client/models/interval_schedule.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class IntervalSchedule ( BaseModel ): \"\"\" Attributes: interval (Interval): \"\"\" interval : Interval = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: interval = self . interval . to_dict () field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"interval\" : interval , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} interval = Interval . from_dict ( d . pop ( \"interval\" )) interval_schedule = cls ( interval = interval , ) interval_schedule . additional_properties = d return interval_schedule @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute interval : Interval = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/interval_schedule.py 33 34 35 36 37 38 39 40 41 42 43 44 45 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} interval = Interval . from_dict ( d . pop ( \"interval\" )) interval_schedule = cls ( interval = interval , ) interval_schedule . additional_properties = d return interval_schedule to_dict Source code in prefect_hightouch/api_client/models/interval_schedule.py 20 21 22 23 24 25 26 27 28 29 30 31 def to_dict ( self ) -> Dict [ str , Any ]: interval = self . interval . to_dict () field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"interval\" : interval , } ) return field_dict","title":"IntervalSchedule"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule","text":"","title":"interval_schedule"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule","text":"Bases: BaseModel Attributes: Name Type Description interval Interval Source code in prefect_hightouch/api_client/models/interval_schedule.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class IntervalSchedule ( BaseModel ): \"\"\" Attributes: interval (Interval): \"\"\" interval : Interval = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: interval = self . interval . to_dict () field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"interval\" : interval , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} interval = Interval . from_dict ( d . pop ( \"interval\" )) interval_schedule = cls ( interval = interval , ) interval_schedule . additional_properties = d return interval_schedule @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"IntervalSchedule"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.additional_keys","text":"","title":"additional_keys"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.additional_properties","text":"","title":"additional_properties"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.interval","text":"","title":"interval"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.from_dict","text":"Source code in prefect_hightouch/api_client/models/interval_schedule.py 33 34 35 36 37 38 39 40 41 42 43 44 45 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} interval = Interval . from_dict ( d . pop ( \"interval\" )) interval_schedule = cls ( interval = interval , ) interval_schedule . additional_properties = d return interval_schedule","title":"from_dict()"},{"location":"models/interval_schedule/#prefect_hightouch.api_client.models.interval_schedule.IntervalSchedule.to_dict","text":"Source code in prefect_hightouch/api_client/models/interval_schedule.py 20 21 22 23 24 25 26 27 28 29 30 31 def to_dict ( self ) -> Dict [ str , Any ]: interval = self . interval . to_dict () field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"interval\" : interval , } ) return field_dict","title":"to_dict()"},{"location":"models/interval_unit/","text":"prefect_hightouch.api_client.models.interval_unit IntervalUnit Bases: str , Enum Source code in prefect_hightouch/api_client/models/interval_unit.py 4 5 6 7 8 9 10 11 class IntervalUnit ( str , Enum ): MINUTE = \"minute\" HOUR = \"hour\" DAY = \"day\" WEEK = \"week\" def __str__ ( self ) -> str : return str ( self . value ) DAY = 'day' class-attribute HOUR = 'hour' class-attribute WEEK = 'week' class-attribute","title":"IntervalUnit"},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit","text":"","title":"interval_unit"},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit.IntervalUnit","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/interval_unit.py 4 5 6 7 8 9 10 11 class IntervalUnit ( str , Enum ): MINUTE = \"minute\" HOUR = \"hour\" DAY = \"day\" WEEK = \"week\" def __str__ ( self ) -> str : return str ( self . value )","title":"IntervalUnit"},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit.IntervalUnit.DAY","text":"","title":"DAY"},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit.IntervalUnit.HOUR","text":"","title":"HOUR"},{"location":"models/interval_unit/#prefect_hightouch.api_client.models.interval_unit.IntervalUnit.WEEK","text":"","title":"WEEK"},{"location":"models/list_destination_order_by/","text":"prefect_hightouch.api_client.models.list_destination_order_by ListDestinationOrderBy Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_destination_order_by.py 4 5 6 7 8 9 10 11 12 class ListDestinationOrderBy ( str , Enum ): ID = \"id\" NAME = \"name\" SLUG = \"slug\" CREATEDAT = \"createdAt\" UPDATEDAT = \"updatedAt\" def __str__ ( self ) -> str : return str ( self . value ) ID = 'id' class-attribute NAME = 'name' class-attribute SLUG = 'slug' class-attribute","title":"ListDestinationOrderBy"},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by","text":"","title":"list_destination_order_by"},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by.ListDestinationOrderBy","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_destination_order_by.py 4 5 6 7 8 9 10 11 12 class ListDestinationOrderBy ( str , Enum ): ID = \"id\" NAME = \"name\" SLUG = \"slug\" CREATEDAT = \"createdAt\" UPDATEDAT = \"updatedAt\" def __str__ ( self ) -> str : return str ( self . value )","title":"ListDestinationOrderBy"},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by.ListDestinationOrderBy.ID","text":"","title":"ID"},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by.ListDestinationOrderBy.NAME","text":"","title":"NAME"},{"location":"models/list_destination_order_by/#prefect_hightouch.api_client.models.list_destination_order_by.ListDestinationOrderBy.SLUG","text":"","title":"SLUG"},{"location":"models/list_destination_response_200/","text":"prefect_hightouch.api_client.models.list_destination_response_200","title":"ListDestinationResponse200"},{"location":"models/list_destination_response_200/#prefect_hightouch.api_client.models.list_destination_response_200","text":"","title":"list_destination_response_200"},{"location":"models/list_model_order_by/","text":"prefect_hightouch.api_client.models.list_model_order_by ListModelOrderBy Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_model_order_by.py 4 5 6 7 8 9 10 11 12 class ListModelOrderBy ( str , Enum ): ID = \"id\" NAME = \"name\" SLUG = \"slug\" CREATEDAT = \"createdAt\" UPDATEDAT = \"updatedAt\" def __str__ ( self ) -> str : return str ( self . value ) ID = 'id' class-attribute NAME = 'name' class-attribute SLUG = 'slug' class-attribute","title":"ListModelOrderBy"},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by","text":"","title":"list_model_order_by"},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by.ListModelOrderBy","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_model_order_by.py 4 5 6 7 8 9 10 11 12 class ListModelOrderBy ( str , Enum ): ID = \"id\" NAME = \"name\" SLUG = \"slug\" CREATEDAT = \"createdAt\" UPDATEDAT = \"updatedAt\" def __str__ ( self ) -> str : return str ( self . value )","title":"ListModelOrderBy"},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by.ListModelOrderBy.ID","text":"","title":"ID"},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by.ListModelOrderBy.NAME","text":"","title":"NAME"},{"location":"models/list_model_order_by/#prefect_hightouch.api_client.models.list_model_order_by.ListModelOrderBy.SLUG","text":"","title":"SLUG"},{"location":"models/list_model_response_200/","text":"prefect_hightouch.api_client.models.list_model_response_200","title":"ListModelResponse200"},{"location":"models/list_model_response_200/#prefect_hightouch.api_client.models.list_model_response_200","text":"","title":"list_model_response_200"},{"location":"models/list_source_order_by/","text":"prefect_hightouch.api_client.models.list_source_order_by ListSourceOrderBy Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_source_order_by.py 4 5 6 7 8 9 10 11 12 class ListSourceOrderBy ( str , Enum ): ID = \"id\" NAME = \"name\" SLUG = \"slug\" CREATEDAT = \"createdAt\" UPDATEDAT = \"updatedAt\" def __str__ ( self ) -> str : return str ( self . value ) ID = 'id' class-attribute NAME = 'name' class-attribute SLUG = 'slug' class-attribute","title":"ListSourceOrderBy"},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by","text":"","title":"list_source_order_by"},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by.ListSourceOrderBy","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_source_order_by.py 4 5 6 7 8 9 10 11 12 class ListSourceOrderBy ( str , Enum ): ID = \"id\" NAME = \"name\" SLUG = \"slug\" CREATEDAT = \"createdAt\" UPDATEDAT = \"updatedAt\" def __str__ ( self ) -> str : return str ( self . value )","title":"ListSourceOrderBy"},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by.ListSourceOrderBy.ID","text":"","title":"ID"},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by.ListSourceOrderBy.NAME","text":"","title":"NAME"},{"location":"models/list_source_order_by/#prefect_hightouch.api_client.models.list_source_order_by.ListSourceOrderBy.SLUG","text":"","title":"SLUG"},{"location":"models/list_source_response_200/","text":"prefect_hightouch.api_client.models.list_source_response_200","title":"ListSourceResponse200"},{"location":"models/list_source_response_200/#prefect_hightouch.api_client.models.list_source_response_200","text":"","title":"list_source_response_200"},{"location":"models/list_sync_order_by/","text":"prefect_hightouch.api_client.models.list_sync_order_by ListSyncOrderBy Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_sync_order_by.py 4 5 6 7 8 9 10 11 12 class ListSyncOrderBy ( str , Enum ): ID = \"id\" NAME = \"name\" SLUG = \"slug\" CREATEDAT = \"createdAt\" UPDATEDAT = \"updatedAt\" def __str__ ( self ) -> str : return str ( self . value ) ID = 'id' class-attribute NAME = 'name' class-attribute SLUG = 'slug' class-attribute","title":"ListSyncOrderBy"},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by","text":"","title":"list_sync_order_by"},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by.ListSyncOrderBy","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_sync_order_by.py 4 5 6 7 8 9 10 11 12 class ListSyncOrderBy ( str , Enum ): ID = \"id\" NAME = \"name\" SLUG = \"slug\" CREATEDAT = \"createdAt\" UPDATEDAT = \"updatedAt\" def __str__ ( self ) -> str : return str ( self . value )","title":"ListSyncOrderBy"},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by.ListSyncOrderBy.ID","text":"","title":"ID"},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by.ListSyncOrderBy.NAME","text":"","title":"NAME"},{"location":"models/list_sync_order_by/#prefect_hightouch.api_client.models.list_sync_order_by.ListSyncOrderBy.SLUG","text":"","title":"SLUG"},{"location":"models/list_sync_response_200/","text":"prefect_hightouch.api_client.models.list_sync_response_200","title":"ListSyncResponse200"},{"location":"models/list_sync_response_200/#prefect_hightouch.api_client.models.list_sync_response_200","text":"","title":"list_sync_response_200"},{"location":"models/list_sync_runs_order_by/","text":"prefect_hightouch.api_client.models.list_sync_runs_order_by ListSyncRunsOrderBy Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_sync_runs_order_by.py 4 5 6 7 8 9 10 11 class ListSyncRunsOrderBy ( str , Enum ): ID = \"id\" CREATEDAT = \"createdAt\" STARTEDAT = \"startedAt\" FINISHEDAT = \"finishedAt\" def __str__ ( self ) -> str : return str ( self . value ) ID = 'id' class-attribute","title":"ListSyncRunsOrderBy"},{"location":"models/list_sync_runs_order_by/#prefect_hightouch.api_client.models.list_sync_runs_order_by","text":"","title":"list_sync_runs_order_by"},{"location":"models/list_sync_runs_order_by/#prefect_hightouch.api_client.models.list_sync_runs_order_by.ListSyncRunsOrderBy","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/list_sync_runs_order_by.py 4 5 6 7 8 9 10 11 class ListSyncRunsOrderBy ( str , Enum ): ID = \"id\" CREATEDAT = \"createdAt\" STARTEDAT = \"startedAt\" FINISHEDAT = \"finishedAt\" def __str__ ( self ) -> str : return str ( self . value )","title":"ListSyncRunsOrderBy"},{"location":"models/list_sync_runs_order_by/#prefect_hightouch.api_client.models.list_sync_runs_order_by.ListSyncRunsOrderBy.ID","text":"","title":"ID"},{"location":"models/list_sync_runs_response_200/","text":"prefect_hightouch.api_client.models.list_sync_runs_response_200","title":"ListSyncRunsResponse200"},{"location":"models/list_sync_runs_response_200/#prefect_hightouch.api_client.models.list_sync_runs_response_200","text":"","title":"list_sync_runs_response_200"},{"location":"models/model/","text":"prefect_hightouch.api_client.models.model Model Bases: BaseModel The SQL query that pulls data from your source to send to your destination. We send your SQL query directly to your source so any SQL that is valid for your source (including functions) is valid in Hightouch. Attributes : created_at ( datetime . datetime ) : The timestamp when model was created id ( str ) : The id of the model is_schema ( bool ) : If is_schema is true , the model is just used to build other models . Either as part of visual querying , or as the root of a visual query . name ( str ) : The name of the model primary_key ( str ) : The primary key will be null if the query doesn 't get directly synced (e.g. a relationship table for visual querying) query_type (str): The type of the query. Available options: custom, raw_sql, tabel, dbt and visual. slug (str): The slug of the model source_id (str): The id of the source that model is connected to syncs (List[str]): The list of id of syncs that uses this model tags (ModelTags): The tags of the model updated_at (datetime.datetime): The timestamp when model was lastly updated workspace_id (str): The id of the workspace where the model belongs to custom (Union[Unset, ModelCustom]): Custom query for sources that doesn' t support sql . For example , Airtable . dbt ( Union [ Unset, ModelDbt ] ) : Query that is based on a dbt model raw ( Union [ Unset, ModelRaw ] ) : Standard raw SQL query table ( Union [ Unset, ModelTable ] ) : Table - based query that fetches on a table instead of SQL visual ( Union [ Unset, ModelVisual ] ) : Visual query , used by audience Source code in prefect_hightouch/api_client/models/model.pyclass Model ( BaseModel ): \"\"\"The SQL query that pulls data from your source to send to your destination. We send your SQL query directly to your source so any SQL that is valid for your source (including functions) is valid in Hightouch. Attributes: created_at (datetime.datetime): The timestamp when model was created id (str): The id of the model is_schema (bool): If is_schema is true, the model is just used to build other models. Either as part of visual querying, or as the root of a visual query. name (str): The name of the model primary_key (str): The primary key will be null if the query doesn't get directly synced (e.g. a relationship table for visual querying) query_type (str): The type of the query. Available options: custom, raw_sql, tabel, dbt and visual. slug (str): The slug of the model source_id (str): The id of the source that model is connected to syncs (List[str]): The list of id of syncs that uses this model tags (ModelTags): The tags of the model updated_at (datetime.datetime): The timestamp when model was lastly updated workspace_id (str): The id of the workspace where the model belongs to custom (Union[Unset, ModelCustom]): Custom query for sources that doesn't support sql. For example, Airtable. dbt (Union[Unset, ModelDbt]): Query that is based on a dbt model raw (Union[Unset, ModelRaw]): Standard raw SQL query table (Union[Unset, ModelTable]): Table-based query that fetches on a table instead of SQL visual (Union[Unset, ModelVisual]): Visual query, used by audience \"\"\" created_at : datetime . datetime = None id : str = None is_schema : bool = None name : str = None primary_key : str = None query_type : str = None slug : str = None source_id : str = None syncs : List [ str ] = None tags : ModelTags = None updated_at : datetime . datetime = None workspace_id : str = None custom : Union [ Unset , ModelCustom ] = UNSET dbt : Union [ Unset , ModelDbt ] = UNSET raw : Union [ Unset , ModelRaw ] = UNSET table : Union [ Unset , ModelTable ] = UNSET visual : Union [ Unset , ModelVisual ] = UNSET additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: created_at = self . created_at . isoformat () id = self . id is_schema = self . is_schema name = self . name primary_key = self . primary_key query_type = self . query_type slug = self . slug source_id = self . source_id syncs = self . syncs tags = self . tags . to_dict () updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id custom : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . custom , Unset ): custom = self . custom . to_dict () dbt : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . dbt , Unset ): dbt = self . dbt . to_dict () raw : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . raw , Unset ): raw = self . raw . to_dict () table : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . table , Unset ): table = self . table . to_dict () visual : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . visual , Unset ): visual = self . visual . to_dict () field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"createdAt\" : created_at , \"id\" : id , \"isSchema\" : is_schema , \"name\" : name , \"primaryKey\" : primary_key , \"queryType\" : query_type , \"slug\" : slug , \"sourceId\" : source_id , \"syncs\" : syncs , \"tags\" : tags , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) if custom is not UNSET : field_dict [ \"custom\" ] = custom if dbt is not UNSET : field_dict [ \"dbt\" ] = dbt if raw is not UNSET : field_dict [ \"raw\" ] = raw if table is not UNSET : field_dict [ \"table\" ] = table if visual is not UNSET : field_dict [ \"visual\" ] = visual return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) is_schema = d . pop ( \"isSchema\" ) name = d . pop ( \"name\" ) primary_key = d . pop ( \"primaryKey\" ) query_type = d . pop ( \"queryType\" ) slug = d . pop ( \"slug\" ) source_id = d . pop ( \"sourceId\" ) syncs = cast ( List [ str ], d . pop ( \"syncs\" )) tags = ModelTags . from_dict ( d . pop ( \"tags\" )) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) _custom = d . pop ( \"custom\" , UNSET ) custom : Union [ Unset , ModelCustom ] if isinstance ( _custom , Unset ): custom = UNSET else : custom = ModelCustom . from_dict ( _custom ) _dbt = d . pop ( \"dbt\" , UNSET ) dbt : Union [ Unset , ModelDbt ] if isinstance ( _dbt , Unset ): dbt = UNSET else : dbt = ModelDbt . from_dict ( _dbt ) _raw = d . pop ( \"raw\" , UNSET ) raw : Union [ Unset , ModelRaw ] if isinstance ( _raw , Unset ): raw = UNSET else : raw = ModelRaw . from_dict ( _raw ) _table = d . pop ( \"table\" , UNSET ) table : Union [ Unset , ModelTable ] if isinstance ( _table , Unset ): table = UNSET else : table = ModelTable . from_dict ( _table ) _visual = d . pop ( \"visual\" , UNSET ) visual : Union [ Unset , ModelVisual ] if isinstance ( _visual , Unset ): visual = UNSET else : visual = ModelVisual . from_dict ( _visual ) model = cls ( created_at = created_at , id = id , is_schema = is_schema , name = name , primary_key = primary_key , query_type = query_type , slug = slug , source_id = source_id , syncs = syncs , tags = tags , updated_at = updated_at , workspace_id = workspace_id , custom = custom , dbt = dbt , raw = raw , table = table , visual = visual , ) model . additional_properties = d return model @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute created_at : datetime . datetime = None class-attribute custom : Union [ Unset , ModelCustom ] = UNSET class-attribute dbt : Union [ Unset , ModelDbt ] = UNSET class-attribute id : str = None class-attribute is_schema : bool = None class-attribute name : str = None class-attribute primary_key : str = None class-attribute query_type : str = None class-attribute raw : Union [ Unset , ModelRaw ] = UNSET class-attribute slug : str = None class-attribute source_id : str = None class-attribute syncs : List [ str ] = None class-attribute table : Union [ Unset , ModelTable ] = UNSET class-attribute tags : ModelTags = None class-attribute updated_at : datetime . datetime = None class-attribute visual : Union [ Unset , ModelVisual ] = UNSET class-attribute workspace_id : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/model.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) is_schema = d . pop ( \"isSchema\" ) name = d . pop ( \"name\" ) primary_key = d . pop ( \"primaryKey\" ) query_type = d . pop ( \"queryType\" ) slug = d . pop ( \"slug\" ) source_id = d . pop ( \"sourceId\" ) syncs = cast ( List [ str ], d . pop ( \"syncs\" )) tags = ModelTags . from_dict ( d . pop ( \"tags\" )) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) _custom = d . pop ( \"custom\" , UNSET ) custom : Union [ Unset , ModelCustom ] if isinstance ( _custom , Unset ): custom = UNSET else : custom = ModelCustom . from_dict ( _custom ) _dbt = d . pop ( \"dbt\" , UNSET ) dbt : Union [ Unset , ModelDbt ] if isinstance ( _dbt , Unset ): dbt = UNSET else : dbt = ModelDbt . from_dict ( _dbt ) _raw = d . pop ( \"raw\" , UNSET ) raw : Union [ Unset , ModelRaw ] if isinstance ( _raw , Unset ): raw = UNSET else : raw = ModelRaw . from_dict ( _raw ) _table = d . pop ( \"table\" , UNSET ) table : Union [ Unset , ModelTable ] if isinstance ( _table , Unset ): table = UNSET else : table = ModelTable . from_dict ( _table ) _visual = d . pop ( \"visual\" , UNSET ) visual : Union [ Unset , ModelVisual ] if isinstance ( _visual , Unset ): visual = UNSET else : visual = ModelVisual . from_dict ( _visual ) model = cls ( created_at = created_at , id = id , is_schema = is_schema , name = name , primary_key = primary_key , query_type = query_type , slug = slug , source_id = source_id , syncs = syncs , tags = tags , updated_at = updated_at , workspace_id = workspace_id , custom = custom , dbt = dbt , raw = raw , table = table , visual = visual , ) model . additional_properties = d return model to_dict Source code in prefect_hightouch/api_client/models/model.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def to_dict ( self ) -> Dict [ str , Any ]: created_at = self . created_at . isoformat () id = self . id is_schema = self . is_schema name = self . name primary_key = self . primary_key query_type = self . query_type slug = self . slug source_id = self . source_id syncs = self . syncs tags = self . tags . to_dict () updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id custom : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . custom , Unset ): custom = self . custom . to_dict () dbt : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . dbt , Unset ): dbt = self . dbt . to_dict () raw : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . raw , Unset ): raw = self . raw . to_dict () table : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . table , Unset ): table = self . table . to_dict () visual : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . visual , Unset ): visual = self . visual . to_dict () field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"createdAt\" : created_at , \"id\" : id , \"isSchema\" : is_schema , \"name\" : name , \"primaryKey\" : primary_key , \"queryType\" : query_type , \"slug\" : slug , \"sourceId\" : source_id , \"syncs\" : syncs , \"tags\" : tags , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) if custom is not UNSET : field_dict [ \"custom\" ] = custom if dbt is not UNSET : field_dict [ \"dbt\" ] = dbt if raw is not UNSET : field_dict [ \"raw\" ] = raw if table is not UNSET : field_dict [ \"table\" ] = table if visual is not UNSET : field_dict [ \"visual\" ] = visual return field_dict","title":"Model"},{"location":"models/model/#prefect_hightouch.api_client.models.model","text":"","title":"model"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model","text":"Bases: BaseModel The SQL query that pulls data from your source to send to your destination. We send your SQL query directly to your source so any SQL that is valid for your source (including functions) is valid in Hightouch. Attributes : created_at ( datetime . datetime ) : The timestamp when model was created id ( str ) : The id of the model is_schema ( bool ) : If is_schema is true , the model is just used to build other models . Either as part of visual querying , or as the root of a visual query . name ( str ) : The name of the model primary_key ( str ) : The primary key will be null if the query doesn 't get directly synced (e.g. a relationship table for visual querying) query_type (str): The type of the query. Available options: custom, raw_sql, tabel, dbt and visual. slug (str): The slug of the model source_id (str): The id of the source that model is connected to syncs (List[str]): The list of id of syncs that uses this model tags (ModelTags): The tags of the model updated_at (datetime.datetime): The timestamp when model was lastly updated workspace_id (str): The id of the workspace where the model belongs to custom (Union[Unset, ModelCustom]): Custom query for sources that doesn' t support sql . For example , Airtable . dbt ( Union [ Unset, ModelDbt ] ) : Query that is based on a dbt model raw ( Union [ Unset, ModelRaw ] ) : Standard raw SQL query table ( Union [ Unset, ModelTable ] ) : Table - based query that fetches on a table instead of SQL visual ( Union [ Unset, ModelVisual ] ) : Visual query , used by audience Source code in prefect_hightouch/api_client/models/model.pyclass Model ( BaseModel ): \"\"\"The SQL query that pulls data from your source to send to your destination. We send your SQL query directly to your source so any SQL that is valid for your source (including functions) is valid in Hightouch. Attributes: created_at (datetime.datetime): The timestamp when model was created id (str): The id of the model is_schema (bool): If is_schema is true, the model is just used to build other models. Either as part of visual querying, or as the root of a visual query. name (str): The name of the model primary_key (str): The primary key will be null if the query doesn't get directly synced (e.g. a relationship table for visual querying) query_type (str): The type of the query. Available options: custom, raw_sql, tabel, dbt and visual. slug (str): The slug of the model source_id (str): The id of the source that model is connected to syncs (List[str]): The list of id of syncs that uses this model tags (ModelTags): The tags of the model updated_at (datetime.datetime): The timestamp when model was lastly updated workspace_id (str): The id of the workspace where the model belongs to custom (Union[Unset, ModelCustom]): Custom query for sources that doesn't support sql. For example, Airtable. dbt (Union[Unset, ModelDbt]): Query that is based on a dbt model raw (Union[Unset, ModelRaw]): Standard raw SQL query table (Union[Unset, ModelTable]): Table-based query that fetches on a table instead of SQL visual (Union[Unset, ModelVisual]): Visual query, used by audience \"\"\" created_at : datetime . datetime = None id : str = None is_schema : bool = None name : str = None primary_key : str = None query_type : str = None slug : str = None source_id : str = None syncs : List [ str ] = None tags : ModelTags = None updated_at : datetime . datetime = None workspace_id : str = None custom : Union [ Unset , ModelCustom ] = UNSET dbt : Union [ Unset , ModelDbt ] = UNSET raw : Union [ Unset , ModelRaw ] = UNSET table : Union [ Unset , ModelTable ] = UNSET visual : Union [ Unset , ModelVisual ] = UNSET additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: created_at = self . created_at . isoformat () id = self . id is_schema = self . is_schema name = self . name primary_key = self . primary_key query_type = self . query_type slug = self . slug source_id = self . source_id syncs = self . syncs tags = self . tags . to_dict () updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id custom : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . custom , Unset ): custom = self . custom . to_dict () dbt : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . dbt , Unset ): dbt = self . dbt . to_dict () raw : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . raw , Unset ): raw = self . raw . to_dict () table : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . table , Unset ): table = self . table . to_dict () visual : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . visual , Unset ): visual = self . visual . to_dict () field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"createdAt\" : created_at , \"id\" : id , \"isSchema\" : is_schema , \"name\" : name , \"primaryKey\" : primary_key , \"queryType\" : query_type , \"slug\" : slug , \"sourceId\" : source_id , \"syncs\" : syncs , \"tags\" : tags , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) if custom is not UNSET : field_dict [ \"custom\" ] = custom if dbt is not UNSET : field_dict [ \"dbt\" ] = dbt if raw is not UNSET : field_dict [ \"raw\" ] = raw if table is not UNSET : field_dict [ \"table\" ] = table if visual is not UNSET : field_dict [ \"visual\" ] = visual return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) is_schema = d . pop ( \"isSchema\" ) name = d . pop ( \"name\" ) primary_key = d . pop ( \"primaryKey\" ) query_type = d . pop ( \"queryType\" ) slug = d . pop ( \"slug\" ) source_id = d . pop ( \"sourceId\" ) syncs = cast ( List [ str ], d . pop ( \"syncs\" )) tags = ModelTags . from_dict ( d . pop ( \"tags\" )) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) _custom = d . pop ( \"custom\" , UNSET ) custom : Union [ Unset , ModelCustom ] if isinstance ( _custom , Unset ): custom = UNSET else : custom = ModelCustom . from_dict ( _custom ) _dbt = d . pop ( \"dbt\" , UNSET ) dbt : Union [ Unset , ModelDbt ] if isinstance ( _dbt , Unset ): dbt = UNSET else : dbt = ModelDbt . from_dict ( _dbt ) _raw = d . pop ( \"raw\" , UNSET ) raw : Union [ Unset , ModelRaw ] if isinstance ( _raw , Unset ): raw = UNSET else : raw = ModelRaw . from_dict ( _raw ) _table = d . pop ( \"table\" , UNSET ) table : Union [ Unset , ModelTable ] if isinstance ( _table , Unset ): table = UNSET else : table = ModelTable . from_dict ( _table ) _visual = d . pop ( \"visual\" , UNSET ) visual : Union [ Unset , ModelVisual ] if isinstance ( _visual , Unset ): visual = UNSET else : visual = ModelVisual . from_dict ( _visual ) model = cls ( created_at = created_at , id = id , is_schema = is_schema , name = name , primary_key = primary_key , query_type = query_type , slug = slug , source_id = source_id , syncs = syncs , tags = tags , updated_at = updated_at , workspace_id = workspace_id , custom = custom , dbt = dbt , raw = raw , table = table , visual = visual , ) model . additional_properties = d return model @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"Model"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.additional_keys","text":"","title":"additional_keys"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.additional_properties","text":"","title":"additional_properties"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.created_at","text":"","title":"created_at"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.custom","text":"","title":"custom"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.dbt","text":"","title":"dbt"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.id","text":"","title":"id"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.is_schema","text":"","title":"is_schema"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.name","text":"","title":"name"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.primary_key","text":"","title":"primary_key"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.query_type","text":"","title":"query_type"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.raw","text":"","title":"raw"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.slug","text":"","title":"slug"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.source_id","text":"","title":"source_id"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.syncs","text":"","title":"syncs"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.table","text":"","title":"table"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.tags","text":"","title":"tags"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.updated_at","text":"","title":"updated_at"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.visual","text":"","title":"visual"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.workspace_id","text":"","title":"workspace_id"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.from_dict","text":"Source code in prefect_hightouch/api_client/models/model.py 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) is_schema = d . pop ( \"isSchema\" ) name = d . pop ( \"name\" ) primary_key = d . pop ( \"primaryKey\" ) query_type = d . pop ( \"queryType\" ) slug = d . pop ( \"slug\" ) source_id = d . pop ( \"sourceId\" ) syncs = cast ( List [ str ], d . pop ( \"syncs\" )) tags = ModelTags . from_dict ( d . pop ( \"tags\" )) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) _custom = d . pop ( \"custom\" , UNSET ) custom : Union [ Unset , ModelCustom ] if isinstance ( _custom , Unset ): custom = UNSET else : custom = ModelCustom . from_dict ( _custom ) _dbt = d . pop ( \"dbt\" , UNSET ) dbt : Union [ Unset , ModelDbt ] if isinstance ( _dbt , Unset ): dbt = UNSET else : dbt = ModelDbt . from_dict ( _dbt ) _raw = d . pop ( \"raw\" , UNSET ) raw : Union [ Unset , ModelRaw ] if isinstance ( _raw , Unset ): raw = UNSET else : raw = ModelRaw . from_dict ( _raw ) _table = d . pop ( \"table\" , UNSET ) table : Union [ Unset , ModelTable ] if isinstance ( _table , Unset ): table = UNSET else : table = ModelTable . from_dict ( _table ) _visual = d . pop ( \"visual\" , UNSET ) visual : Union [ Unset , ModelVisual ] if isinstance ( _visual , Unset ): visual = UNSET else : visual = ModelVisual . from_dict ( _visual ) model = cls ( created_at = created_at , id = id , is_schema = is_schema , name = name , primary_key = primary_key , query_type = query_type , slug = slug , source_id = source_id , syncs = syncs , tags = tags , updated_at = updated_at , workspace_id = workspace_id , custom = custom , dbt = dbt , raw = raw , table = table , visual = visual , ) model . additional_properties = d return model","title":"from_dict()"},{"location":"models/model/#prefect_hightouch.api_client.models.model.Model.to_dict","text":"Source code in prefect_hightouch/api_client/models/model.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def to_dict ( self ) -> Dict [ str , Any ]: created_at = self . created_at . isoformat () id = self . id is_schema = self . is_schema name = self . name primary_key = self . primary_key query_type = self . query_type slug = self . slug source_id = self . source_id syncs = self . syncs tags = self . tags . to_dict () updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id custom : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . custom , Unset ): custom = self . custom . to_dict () dbt : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . dbt , Unset ): dbt = self . dbt . to_dict () raw : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . raw , Unset ): raw = self . raw . to_dict () table : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . table , Unset ): table = self . table . to_dict () visual : Union [ Unset , Dict [ str , Any ]] = UNSET if not isinstance ( self . visual , Unset ): visual = self . visual . to_dict () field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"createdAt\" : created_at , \"id\" : id , \"isSchema\" : is_schema , \"name\" : name , \"primaryKey\" : primary_key , \"queryType\" : query_type , \"slug\" : slug , \"sourceId\" : source_id , \"syncs\" : syncs , \"tags\" : tags , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) if custom is not UNSET : field_dict [ \"custom\" ] = custom if dbt is not UNSET : field_dict [ \"dbt\" ] = dbt if raw is not UNSET : field_dict [ \"raw\" ] = raw if table is not UNSET : field_dict [ \"table\" ] = table if visual is not UNSET : field_dict [ \"visual\" ] = visual return field_dict","title":"to_dict()"},{"location":"models/model_custom/","text":"prefect_hightouch.api_client.models.model_custom ModelCustom Bases: BaseModel Custom query for sources that doesn't support sql. For example, Airtable. Attributes: Name Type Description query Any Source code in prefect_hightouch/api_client/models/model_custom.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class ModelCustom ( BaseModel ): \"\"\"Custom query for sources that doesn't support sql. For example, Airtable. Attributes: query (Any): \"\"\" query : Any = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: query = self . query field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"query\" : query , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} query = d . pop ( \"query\" ) model_custom = cls ( query = query , ) model_custom . additional_properties = d return model_custom @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute query : Any = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/model_custom.py 33 34 35 36 37 38 39 40 41 42 43 44 45 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} query = d . pop ( \"query\" ) model_custom = cls ( query = query , ) model_custom . additional_properties = d return model_custom to_dict Source code in prefect_hightouch/api_client/models/model_custom.py 20 21 22 23 24 25 26 27 28 29 30 31 def to_dict ( self ) -> Dict [ str , Any ]: query = self . query field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"query\" : query , } ) return field_dict","title":"ModelCustom"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom","text":"","title":"model_custom"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom","text":"Bases: BaseModel Custom query for sources that doesn't support sql. For example, Airtable. Attributes: Name Type Description query Any Source code in prefect_hightouch/api_client/models/model_custom.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class ModelCustom ( BaseModel ): \"\"\"Custom query for sources that doesn't support sql. For example, Airtable. Attributes: query (Any): \"\"\" query : Any = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: query = self . query field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"query\" : query , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} query = d . pop ( \"query\" ) model_custom = cls ( query = query , ) model_custom . additional_properties = d return model_custom @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"ModelCustom"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.additional_keys","text":"","title":"additional_keys"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.additional_properties","text":"","title":"additional_properties"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.query","text":"","title":"query"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.from_dict","text":"Source code in prefect_hightouch/api_client/models/model_custom.py 33 34 35 36 37 38 39 40 41 42 43 44 45 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} query = d . pop ( \"query\" ) model_custom = cls ( query = query , ) model_custom . additional_properties = d return model_custom","title":"from_dict()"},{"location":"models/model_custom/#prefect_hightouch.api_client.models.model_custom.ModelCustom.to_dict","text":"Source code in prefect_hightouch/api_client/models/model_custom.py 20 21 22 23 24 25 26 27 28 29 30 31 def to_dict ( self ) -> Dict [ str , Any ]: query = self . query field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"query\" : query , } ) return field_dict","title":"to_dict()"},{"location":"models/model_dbt/","text":"prefect_hightouch.api_client.models.model_dbt ModelDbt Bases: BaseModel Query that is based on a dbt model Attributes: Name Type Description compiled_sql str Compiled SQL in the dbt model database str Name of the database containing the generated table dbt_unique_id str Unique ID of the model assigned by dbt (usually some combination of the schema and table name) model_id str Model id that refer to a dbt model name str Name of the table generated by the dbt model raw_sql str Raw SQL in the dbt model schema str Name of the schema containing the generated table Source code in prefect_hightouch/api_client/models/model_dbt.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 class ModelDbt ( BaseModel ): \"\"\"Query that is based on a dbt model Attributes: compiled_sql (str): Compiled SQL in the dbt model database (str): Name of the database containing the generated table dbt_unique_id (str): Unique ID of the model assigned by dbt (usually some combination of the schema and table name) model_id (str): Model id that refer to a dbt model name (str): Name of the table generated by the dbt model raw_sql (str): Raw SQL in the dbt model schema (str): Name of the schema containing the generated table \"\"\" compiled_sql : str = None database : str = None dbt_unique_id : str = None model_id : str = None name : str = None raw_sql : str = None schema_ : str = Field ( default =... , alias = \"schema\" ) additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: compiled_sql = self . compiled_sql database = self . database dbt_unique_id = self . dbt_unique_id model_id = self . model_id name = self . name raw_sql = self . raw_sql schema = self . schema field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"compiledSql\" : compiled_sql , \"database\" : database , \"dbtUniqueId\" : dbt_unique_id , \"modelId\" : model_id , \"name\" : name , \"rawSql\" : raw_sql , \"schema\" : schema , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} compiled_sql = d . pop ( \"compiledSql\" ) database = d . pop ( \"database\" ) dbt_unique_id = d . pop ( \"dbtUniqueId\" ) model_id = d . pop ( \"modelId\" ) name = d . pop ( \"name\" ) raw_sql = d . pop ( \"rawSql\" ) schema = d . pop ( \"schema\" ) model_dbt = cls ( compiled_sql = compiled_sql , database = database , dbt_unique_id = dbt_unique_id , model_id = model_id , name = name , raw_sql = raw_sql , schema = schema , ) model_dbt . additional_properties = d return model_dbt @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute compiled_sql : str = None class-attribute database : str = None class-attribute dbt_unique_id : str = None class-attribute model_id : str = None class-attribute name : str = None class-attribute raw_sql : str = None class-attribute schema_ : str = Field ( default = Ellipsis , alias = 'schema' ) class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/model_dbt.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} compiled_sql = d . pop ( \"compiledSql\" ) database = d . pop ( \"database\" ) dbt_unique_id = d . pop ( \"dbtUniqueId\" ) model_id = d . pop ( \"modelId\" ) name = d . pop ( \"name\" ) raw_sql = d . pop ( \"rawSql\" ) schema = d . pop ( \"schema\" ) model_dbt = cls ( compiled_sql = compiled_sql , database = database , dbt_unique_id = dbt_unique_id , model_id = model_id , name = name , raw_sql = raw_sql , schema = schema , ) model_dbt . additional_properties = d return model_dbt to_dict Source code in prefect_hightouch/api_client/models/model_dbt.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def to_dict ( self ) -> Dict [ str , Any ]: compiled_sql = self . compiled_sql database = self . database dbt_unique_id = self . dbt_unique_id model_id = self . model_id name = self . name raw_sql = self . raw_sql schema = self . schema field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"compiledSql\" : compiled_sql , \"database\" : database , \"dbtUniqueId\" : dbt_unique_id , \"modelId\" : model_id , \"name\" : name , \"rawSql\" : raw_sql , \"schema\" : schema , } ) return field_dict","title":"ModelDbt"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt","text":"","title":"model_dbt"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt","text":"Bases: BaseModel Query that is based on a dbt model Attributes: Name Type Description compiled_sql str Compiled SQL in the dbt model database str Name of the database containing the generated table dbt_unique_id str Unique ID of the model assigned by dbt (usually some combination of the schema and table name) model_id str Model id that refer to a dbt model name str Name of the table generated by the dbt model raw_sql str Raw SQL in the dbt model schema str Name of the schema containing the generated table Source code in prefect_hightouch/api_client/models/model_dbt.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 class ModelDbt ( BaseModel ): \"\"\"Query that is based on a dbt model Attributes: compiled_sql (str): Compiled SQL in the dbt model database (str): Name of the database containing the generated table dbt_unique_id (str): Unique ID of the model assigned by dbt (usually some combination of the schema and table name) model_id (str): Model id that refer to a dbt model name (str): Name of the table generated by the dbt model raw_sql (str): Raw SQL in the dbt model schema (str): Name of the schema containing the generated table \"\"\" compiled_sql : str = None database : str = None dbt_unique_id : str = None model_id : str = None name : str = None raw_sql : str = None schema_ : str = Field ( default =... , alias = \"schema\" ) additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: compiled_sql = self . compiled_sql database = self . database dbt_unique_id = self . dbt_unique_id model_id = self . model_id name = self . name raw_sql = self . raw_sql schema = self . schema field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"compiledSql\" : compiled_sql , \"database\" : database , \"dbtUniqueId\" : dbt_unique_id , \"modelId\" : model_id , \"name\" : name , \"rawSql\" : raw_sql , \"schema\" : schema , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} compiled_sql = d . pop ( \"compiledSql\" ) database = d . pop ( \"database\" ) dbt_unique_id = d . pop ( \"dbtUniqueId\" ) model_id = d . pop ( \"modelId\" ) name = d . pop ( \"name\" ) raw_sql = d . pop ( \"rawSql\" ) schema = d . pop ( \"schema\" ) model_dbt = cls ( compiled_sql = compiled_sql , database = database , dbt_unique_id = dbt_unique_id , model_id = model_id , name = name , raw_sql = raw_sql , schema = schema , ) model_dbt . additional_properties = d return model_dbt @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"ModelDbt"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.additional_keys","text":"","title":"additional_keys"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.additional_properties","text":"","title":"additional_properties"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.compiled_sql","text":"","title":"compiled_sql"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.database","text":"","title":"database"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.dbt_unique_id","text":"","title":"dbt_unique_id"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.model_id","text":"","title":"model_id"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.name","text":"","title":"name"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.raw_sql","text":"","title":"raw_sql"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.schema_","text":"","title":"schema_"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.from_dict","text":"Source code in prefect_hightouch/api_client/models/model_dbt.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} compiled_sql = d . pop ( \"compiledSql\" ) database = d . pop ( \"database\" ) dbt_unique_id = d . pop ( \"dbtUniqueId\" ) model_id = d . pop ( \"modelId\" ) name = d . pop ( \"name\" ) raw_sql = d . pop ( \"rawSql\" ) schema = d . pop ( \"schema\" ) model_dbt = cls ( compiled_sql = compiled_sql , database = database , dbt_unique_id = dbt_unique_id , model_id = model_id , name = name , raw_sql = raw_sql , schema = schema , ) model_dbt . additional_properties = d return model_dbt","title":"from_dict()"},{"location":"models/model_dbt/#prefect_hightouch.api_client.models.model_dbt.ModelDbt.to_dict","text":"Source code in prefect_hightouch/api_client/models/model_dbt.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def to_dict ( self ) -> Dict [ str , Any ]: compiled_sql = self . compiled_sql database = self . database dbt_unique_id = self . dbt_unique_id model_id = self . model_id name = self . name raw_sql = self . raw_sql schema = self . schema field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"compiledSql\" : compiled_sql , \"database\" : database , \"dbtUniqueId\" : dbt_unique_id , \"modelId\" : model_id , \"name\" : name , \"rawSql\" : raw_sql , \"schema\" : schema , } ) return field_dict","title":"to_dict()"},{"location":"models/model_raw/","text":"prefect_hightouch.api_client.models.model_raw ModelRaw Bases: BaseModel Standard raw SQL query Attributes: Name Type Description sql str Source code in prefect_hightouch/api_client/models/model_raw.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class ModelRaw ( BaseModel ): \"\"\"Standard raw SQL query Attributes: sql (str): \"\"\" sql : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: sql = self . sql field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"sql\" : sql , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} sql = d . pop ( \"sql\" ) model_raw = cls ( sql = sql , ) model_raw . additional_properties = d return model_raw @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute sql : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/model_raw.py 33 34 35 36 37 38 39 40 41 42 43 44 45 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} sql = d . pop ( \"sql\" ) model_raw = cls ( sql = sql , ) model_raw . additional_properties = d return model_raw to_dict Source code in prefect_hightouch/api_client/models/model_raw.py 20 21 22 23 24 25 26 27 28 29 30 31 def to_dict ( self ) -> Dict [ str , Any ]: sql = self . sql field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"sql\" : sql , } ) return field_dict","title":"ModelRaw"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw","text":"","title":"model_raw"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw","text":"Bases: BaseModel Standard raw SQL query Attributes: Name Type Description sql str Source code in prefect_hightouch/api_client/models/model_raw.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class ModelRaw ( BaseModel ): \"\"\"Standard raw SQL query Attributes: sql (str): \"\"\" sql : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: sql = self . sql field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"sql\" : sql , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} sql = d . pop ( \"sql\" ) model_raw = cls ( sql = sql , ) model_raw . additional_properties = d return model_raw @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"ModelRaw"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.additional_keys","text":"","title":"additional_keys"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.additional_properties","text":"","title":"additional_properties"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.sql","text":"","title":"sql"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.from_dict","text":"Source code in prefect_hightouch/api_client/models/model_raw.py 33 34 35 36 37 38 39 40 41 42 43 44 45 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} sql = d . pop ( \"sql\" ) model_raw = cls ( sql = sql , ) model_raw . additional_properties = d return model_raw","title":"from_dict()"},{"location":"models/model_raw/#prefect_hightouch.api_client.models.model_raw.ModelRaw.to_dict","text":"Source code in prefect_hightouch/api_client/models/model_raw.py 20 21 22 23 24 25 26 27 28 29 30 31 def to_dict ( self ) -> Dict [ str , Any ]: sql = self . sql field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"sql\" : sql , } ) return field_dict","title":"to_dict()"},{"location":"models/model_table/","text":"prefect_hightouch.api_client.models.model_table","title":"ModelTable"},{"location":"models/model_table/#prefect_hightouch.api_client.models.model_table","text":"","title":"model_table"},{"location":"models/model_tags/","text":"prefect_hightouch.api_client.models.model_tags","title":"ModelTags"},{"location":"models/model_tags/#prefect_hightouch.api_client.models.model_tags","text":"","title":"model_tags"},{"location":"models/model_visual/","text":"prefect_hightouch.api_client.models.model_visual ModelVisual Bases: BaseModel Visual query, used by audience Attributes: Name Type Description filter_ Any parent_id str Parent id of the schema that visual query is based on primary_label str secondary_label str Source code in prefect_hightouch/api_client/models/model_visual.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class ModelVisual ( BaseModel ): \"\"\"Visual query, used by audience Attributes: filter_ (Any): parent_id (str): Parent id of the schema that visual query is based on primary_label (str): secondary_label (str): \"\"\" filter_ : Any = None parent_id : str = None primary_label : str = None secondary_label : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: filter_ = self . filter_ parent_id = self . parent_id primary_label = self . primary_label secondary_label = self . secondary_label field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"filter\" : filter_ , \"parentId\" : parent_id , \"primaryLabel\" : primary_label , \"secondaryLabel\" : secondary_label , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} filter_ = d . pop ( \"filter\" ) parent_id = d . pop ( \"parentId\" ) primary_label = d . pop ( \"primaryLabel\" ) secondary_label = d . pop ( \"secondaryLabel\" ) model_visual = cls ( filter_ = filter_ , parent_id = parent_id , primary_label = primary_label , secondary_label = secondary_label , ) model_visual . additional_properties = d return model_visual @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute filter_ : Any = None class-attribute parent_id : str = None class-attribute primary_label : str = None class-attribute secondary_label : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/model_visual.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} filter_ = d . pop ( \"filter\" ) parent_id = d . pop ( \"parentId\" ) primary_label = d . pop ( \"primaryLabel\" ) secondary_label = d . pop ( \"secondaryLabel\" ) model_visual = cls ( filter_ = filter_ , parent_id = parent_id , primary_label = primary_label , secondary_label = secondary_label , ) model_visual . additional_properties = d return model_visual to_dict Source code in prefect_hightouch/api_client/models/model_visual.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def to_dict ( self ) -> Dict [ str , Any ]: filter_ = self . filter_ parent_id = self . parent_id primary_label = self . primary_label secondary_label = self . secondary_label field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"filter\" : filter_ , \"parentId\" : parent_id , \"primaryLabel\" : primary_label , \"secondaryLabel\" : secondary_label , } ) return field_dict","title":"ModelVisual"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual","text":"","title":"model_visual"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual","text":"Bases: BaseModel Visual query, used by audience Attributes: Name Type Description filter_ Any parent_id str Parent id of the schema that visual query is based on primary_label str secondary_label str Source code in prefect_hightouch/api_client/models/model_visual.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class ModelVisual ( BaseModel ): \"\"\"Visual query, used by audience Attributes: filter_ (Any): parent_id (str): Parent id of the schema that visual query is based on primary_label (str): secondary_label (str): \"\"\" filter_ : Any = None parent_id : str = None primary_label : str = None secondary_label : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: filter_ = self . filter_ parent_id = self . parent_id primary_label = self . primary_label secondary_label = self . secondary_label field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"filter\" : filter_ , \"parentId\" : parent_id , \"primaryLabel\" : primary_label , \"secondaryLabel\" : secondary_label , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} filter_ = d . pop ( \"filter\" ) parent_id = d . pop ( \"parentId\" ) primary_label = d . pop ( \"primaryLabel\" ) secondary_label = d . pop ( \"secondaryLabel\" ) model_visual = cls ( filter_ = filter_ , parent_id = parent_id , primary_label = primary_label , secondary_label = secondary_label , ) model_visual . additional_properties = d return model_visual @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"ModelVisual"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.additional_keys","text":"","title":"additional_keys"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.additional_properties","text":"","title":"additional_properties"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.filter_","text":"","title":"filter_"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.parent_id","text":"","title":"parent_id"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.primary_label","text":"","title":"primary_label"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.secondary_label","text":"","title":"secondary_label"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.from_dict","text":"Source code in prefect_hightouch/api_client/models/model_visual.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} filter_ = d . pop ( \"filter\" ) parent_id = d . pop ( \"parentId\" ) primary_label = d . pop ( \"primaryLabel\" ) secondary_label = d . pop ( \"secondaryLabel\" ) model_visual = cls ( filter_ = filter_ , parent_id = parent_id , primary_label = primary_label , secondary_label = secondary_label , ) model_visual . additional_properties = d return model_visual","title":"from_dict()"},{"location":"models/model_visual/#prefect_hightouch.api_client.models.model_visual.ModelVisual.to_dict","text":"Source code in prefect_hightouch/api_client/models/model_visual.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def to_dict ( self ) -> Dict [ str , Any ]: filter_ = self . filter_ parent_id = self . parent_id primary_label = self . primary_label secondary_label = self . secondary_label field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"filter\" : filter_ , \"parentId\" : parent_id , \"primaryLabel\" : primary_label , \"secondaryLabel\" : secondary_label , } ) return field_dict","title":"to_dict()"},{"location":"models/record_day_boolean_or_undefined/","text":"prefect_hightouch.api_client.models.record_day_boolean_or_undefined RecordDayBooleanOrUndefined Bases: BaseModel Construct a type with a set of properties K of type T Attributes: Name Type Description friday Union [ Unset , bool ] monday Union [ Unset , bool ] saturday Union [ Unset , bool ] sunday Union [ Unset , bool ] thursday Union [ Unset , bool ] tuesday Union [ Unset , bool ] wednesday Union [ Unset , bool ] Source code in prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class RecordDayBooleanOrUndefined ( BaseModel ): \"\"\"Construct a type with a set of properties K of type T Attributes: friday (Union[Unset, bool]): monday (Union[Unset, bool]): saturday (Union[Unset, bool]): sunday (Union[Unset, bool]): thursday (Union[Unset, bool]): tuesday (Union[Unset, bool]): wednesday (Union[Unset, bool]): \"\"\" friday : Union [ Unset , bool ] = UNSET monday : Union [ Unset , bool ] = UNSET saturday : Union [ Unset , bool ] = UNSET sunday : Union [ Unset , bool ] = UNSET thursday : Union [ Unset , bool ] = UNSET tuesday : Union [ Unset , bool ] = UNSET wednesday : Union [ Unset , bool ] = UNSET additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: friday = self . friday monday = self . monday saturday = self . saturday sunday = self . sunday thursday = self . thursday tuesday = self . tuesday wednesday = self . wednesday field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) if friday is not UNSET : field_dict [ \"friday\" ] = friday if monday is not UNSET : field_dict [ \"monday\" ] = monday if saturday is not UNSET : field_dict [ \"saturday\" ] = saturday if sunday is not UNSET : field_dict [ \"sunday\" ] = sunday if thursday is not UNSET : field_dict [ \"thursday\" ] = thursday if tuesday is not UNSET : field_dict [ \"tuesday\" ] = tuesday if wednesday is not UNSET : field_dict [ \"wednesday\" ] = wednesday return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} friday = d . pop ( \"friday\" , UNSET ) monday = d . pop ( \"monday\" , UNSET ) saturday = d . pop ( \"saturday\" , UNSET ) sunday = d . pop ( \"sunday\" , UNSET ) thursday = d . pop ( \"thursday\" , UNSET ) tuesday = d . pop ( \"tuesday\" , UNSET ) wednesday = d . pop ( \"wednesday\" , UNSET ) record_day_boolean_or_undefined = cls ( friday = friday , monday = monday , saturday = saturday , sunday = sunday , thursday = thursday , tuesday = tuesday , wednesday = wednesday , ) record_day_boolean_or_undefined . additional_properties = d return record_day_boolean_or_undefined @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute friday : Union [ Unset , bool ] = UNSET class-attribute monday : Union [ Unset , bool ] = UNSET class-attribute saturday : Union [ Unset , bool ] = UNSET class-attribute sunday : Union [ Unset , bool ] = UNSET class-attribute thursday : Union [ Unset , bool ] = UNSET class-attribute tuesday : Union [ Unset , bool ] = UNSET class-attribute wednesday : Union [ Unset , bool ] = UNSET class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} friday = d . pop ( \"friday\" , UNSET ) monday = d . pop ( \"monday\" , UNSET ) saturday = d . pop ( \"saturday\" , UNSET ) sunday = d . pop ( \"sunday\" , UNSET ) thursday = d . pop ( \"thursday\" , UNSET ) tuesday = d . pop ( \"tuesday\" , UNSET ) wednesday = d . pop ( \"wednesday\" , UNSET ) record_day_boolean_or_undefined = cls ( friday = friday , monday = monday , saturday = saturday , sunday = sunday , thursday = thursday , tuesday = tuesday , wednesday = wednesday , ) record_day_boolean_or_undefined . additional_properties = d return record_day_boolean_or_undefined to_dict Source code in prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def to_dict ( self ) -> Dict [ str , Any ]: friday = self . friday monday = self . monday saturday = self . saturday sunday = self . sunday thursday = self . thursday tuesday = self . tuesday wednesday = self . wednesday field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) if friday is not UNSET : field_dict [ \"friday\" ] = friday if monday is not UNSET : field_dict [ \"monday\" ] = monday if saturday is not UNSET : field_dict [ \"saturday\" ] = saturday if sunday is not UNSET : field_dict [ \"sunday\" ] = sunday if thursday is not UNSET : field_dict [ \"thursday\" ] = thursday if tuesday is not UNSET : field_dict [ \"tuesday\" ] = tuesday if wednesday is not UNSET : field_dict [ \"wednesday\" ] = wednesday return field_dict","title":"RecordDayBooleanOrUndefined"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined","text":"","title":"record_day_boolean_or_undefined"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined","text":"Bases: BaseModel Construct a type with a set of properties K of type T Attributes: Name Type Description friday Union [ Unset , bool ] monday Union [ Unset , bool ] saturday Union [ Unset , bool ] sunday Union [ Unset , bool ] thursday Union [ Unset , bool ] tuesday Union [ Unset , bool ] wednesday Union [ Unset , bool ] Source code in prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 class RecordDayBooleanOrUndefined ( BaseModel ): \"\"\"Construct a type with a set of properties K of type T Attributes: friday (Union[Unset, bool]): monday (Union[Unset, bool]): saturday (Union[Unset, bool]): sunday (Union[Unset, bool]): thursday (Union[Unset, bool]): tuesday (Union[Unset, bool]): wednesday (Union[Unset, bool]): \"\"\" friday : Union [ Unset , bool ] = UNSET monday : Union [ Unset , bool ] = UNSET saturday : Union [ Unset , bool ] = UNSET sunday : Union [ Unset , bool ] = UNSET thursday : Union [ Unset , bool ] = UNSET tuesday : Union [ Unset , bool ] = UNSET wednesday : Union [ Unset , bool ] = UNSET additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: friday = self . friday monday = self . monday saturday = self . saturday sunday = self . sunday thursday = self . thursday tuesday = self . tuesday wednesday = self . wednesday field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) if friday is not UNSET : field_dict [ \"friday\" ] = friday if monday is not UNSET : field_dict [ \"monday\" ] = monday if saturday is not UNSET : field_dict [ \"saturday\" ] = saturday if sunday is not UNSET : field_dict [ \"sunday\" ] = sunday if thursday is not UNSET : field_dict [ \"thursday\" ] = thursday if tuesday is not UNSET : field_dict [ \"tuesday\" ] = tuesday if wednesday is not UNSET : field_dict [ \"wednesday\" ] = wednesday return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} friday = d . pop ( \"friday\" , UNSET ) monday = d . pop ( \"monday\" , UNSET ) saturday = d . pop ( \"saturday\" , UNSET ) sunday = d . pop ( \"sunday\" , UNSET ) thursday = d . pop ( \"thursday\" , UNSET ) tuesday = d . pop ( \"tuesday\" , UNSET ) wednesday = d . pop ( \"wednesday\" , UNSET ) record_day_boolean_or_undefined = cls ( friday = friday , monday = monday , saturday = saturday , sunday = sunday , thursday = thursday , tuesday = tuesday , wednesday = wednesday , ) record_day_boolean_or_undefined . additional_properties = d return record_day_boolean_or_undefined @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"RecordDayBooleanOrUndefined"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.additional_keys","text":"","title":"additional_keys"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.additional_properties","text":"","title":"additional_properties"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.friday","text":"","title":"friday"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.monday","text":"","title":"monday"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.saturday","text":"","title":"saturday"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.sunday","text":"","title":"sunday"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.thursday","text":"","title":"thursday"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.tuesday","text":"","title":"tuesday"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.wednesday","text":"","title":"wednesday"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.from_dict","text":"Source code in prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} friday = d . pop ( \"friday\" , UNSET ) monday = d . pop ( \"monday\" , UNSET ) saturday = d . pop ( \"saturday\" , UNSET ) sunday = d . pop ( \"sunday\" , UNSET ) thursday = d . pop ( \"thursday\" , UNSET ) tuesday = d . pop ( \"tuesday\" , UNSET ) wednesday = d . pop ( \"wednesday\" , UNSET ) record_day_boolean_or_undefined = cls ( friday = friday , monday = monday , saturday = saturday , sunday = sunday , thursday = thursday , tuesday = tuesday , wednesday = wednesday , ) record_day_boolean_or_undefined . additional_properties = d return record_day_boolean_or_undefined","title":"from_dict()"},{"location":"models/record_day_boolean_or_undefined/#prefect_hightouch.api_client.models.record_day_boolean_or_undefined.RecordDayBooleanOrUndefined.to_dict","text":"Source code in prefect_hightouch/api_client/models/record_day_boolean_or_undefined.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def to_dict ( self ) -> Dict [ str , Any ]: friday = self . friday monday = self . monday saturday = self . saturday sunday = self . sunday thursday = self . thursday tuesday = self . tuesday wednesday = self . wednesday field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) if friday is not UNSET : field_dict [ \"friday\" ] = friday if monday is not UNSET : field_dict [ \"monday\" ] = monday if saturday is not UNSET : field_dict [ \"saturday\" ] = saturday if sunday is not UNSET : field_dict [ \"sunday\" ] = sunday if thursday is not UNSET : field_dict [ \"thursday\" ] = thursday if tuesday is not UNSET : field_dict [ \"tuesday\" ] = tuesday if wednesday is not UNSET : field_dict [ \"wednesday\" ] = wednesday return field_dict","title":"to_dict()"},{"location":"models/source/","text":"prefect_hightouch.api_client.models.source Source Bases: BaseModel The database or warehouse where your data is stored. The starting point for a Hightouch data pipeline. Attributes : configuration ( SourceConfiguration ): The source 's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the source was created id (str): The source' s id name ( str ): The source 's name slug (str): The source' s slug type ( str ): The source ' s type ( e . g . snowflake or postgres ). updated_at ( datetime . datetime ): The timestamp when the source was last updated workspace_id ( str ): The id of the workspace that the source belongs to Source code in prefect_hightouch/api_client/models/source.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 class Source ( BaseModel ): \"\"\"The database or warehouse where your data is stored. The starting point for a Hightouch data pipeline. Attributes: configuration (SourceConfiguration): The source's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the source was created id (str): The source's id name (str): The source's name slug (str): The source's slug type (str): The source's type (e.g. snowflake or postgres). updated_at (datetime.datetime): The timestamp when the source was last updated workspace_id (str): The id of the workspace that the source belongs to \"\"\" configuration : SourceConfiguration = None created_at : datetime . datetime = None id : str = None name : str = None slug : str = None type : str = None updated_at : datetime . datetime = None workspace_id : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () id = self . id name = self . name slug = self . slug type = self . type updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"id\" : id , \"name\" : name , \"slug\" : slug , \"type\" : type , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = SourceConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) name = d . pop ( \"name\" ) slug = d . pop ( \"slug\" ) type = d . pop ( \"type\" ) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) source = cls ( configuration = configuration , created_at = created_at , id = id , name = name , slug = slug , type = type , updated_at = updated_at , workspace_id = workspace_id , ) source . additional_properties = d return source @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute configuration : SourceConfiguration = None class-attribute created_at : datetime . datetime = None class-attribute id : str = None class-attribute name : str = None class-attribute slug : str = None class-attribute type : str = None class-attribute updated_at : datetime . datetime = None class-attribute workspace_id : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/source.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = SourceConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) name = d . pop ( \"name\" ) slug = d . pop ( \"slug\" ) type = d . pop ( \"type\" ) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) source = cls ( configuration = configuration , created_at = created_at , id = id , name = name , slug = slug , type = type , updated_at = updated_at , workspace_id = workspace_id , ) source . additional_properties = d return source to_dict Source code in prefect_hightouch/api_client/models/source.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () id = self . id name = self . name slug = self . slug type = self . type updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"id\" : id , \"name\" : name , \"slug\" : slug , \"type\" : type , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict","title":"Source"},{"location":"models/source/#prefect_hightouch.api_client.models.source","text":"","title":"source"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source","text":"Bases: BaseModel The database or warehouse where your data is stored. The starting point for a Hightouch data pipeline. Attributes : configuration ( SourceConfiguration ): The source 's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the source was created id (str): The source' s id name ( str ): The source 's name slug (str): The source' s slug type ( str ): The source ' s type ( e . g . snowflake or postgres ). updated_at ( datetime . datetime ): The timestamp when the source was last updated workspace_id ( str ): The id of the workspace that the source belongs to Source code in prefect_hightouch/api_client/models/source.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 class Source ( BaseModel ): \"\"\"The database or warehouse where your data is stored. The starting point for a Hightouch data pipeline. Attributes: configuration (SourceConfiguration): The source's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the source was created id (str): The source's id name (str): The source's name slug (str): The source's slug type (str): The source's type (e.g. snowflake or postgres). updated_at (datetime.datetime): The timestamp when the source was last updated workspace_id (str): The id of the workspace that the source belongs to \"\"\" configuration : SourceConfiguration = None created_at : datetime . datetime = None id : str = None name : str = None slug : str = None type : str = None updated_at : datetime . datetime = None workspace_id : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () id = self . id name = self . name slug = self . slug type = self . type updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"id\" : id , \"name\" : name , \"slug\" : slug , \"type\" : type , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = SourceConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) name = d . pop ( \"name\" ) slug = d . pop ( \"slug\" ) type = d . pop ( \"type\" ) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) source = cls ( configuration = configuration , created_at = created_at , id = id , name = name , slug = slug , type = type , updated_at = updated_at , workspace_id = workspace_id , ) source . additional_properties = d return source @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"Source"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.additional_keys","text":"","title":"additional_keys"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.additional_properties","text":"","title":"additional_properties"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.configuration","text":"","title":"configuration"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.created_at","text":"","title":"created_at"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.id","text":"","title":"id"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.name","text":"","title":"name"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.slug","text":"","title":"slug"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.type","text":"","title":"type"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.updated_at","text":"","title":"updated_at"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.workspace_id","text":"","title":"workspace_id"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.from_dict","text":"Source code in prefect_hightouch/api_client/models/source.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = SourceConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) id = d . pop ( \"id\" ) name = d . pop ( \"name\" ) slug = d . pop ( \"slug\" ) type = d . pop ( \"type\" ) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) source = cls ( configuration = configuration , created_at = created_at , id = id , name = name , slug = slug , type = type , updated_at = updated_at , workspace_id = workspace_id , ) source . additional_properties = d return source","title":"from_dict()"},{"location":"models/source/#prefect_hightouch.api_client.models.source.Source.to_dict","text":"Source code in prefect_hightouch/api_client/models/source.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () id = self . id name = self . name slug = self . slug type = self . type updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"id\" : id , \"name\" : name , \"slug\" : slug , \"type\" : type , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict","title":"to_dict()"},{"location":"models/source_configuration/","text":"prefect_hightouch.api_client.models.source_configuration SourceConfiguration Bases: BaseModel The source's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. Source code in prefect_hightouch/api_client/models/source_configuration.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class SourceConfiguration ( BaseModel ): \"\"\"The source's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. \"\"\" additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} source_configuration = cls () source_configuration . additional_properties = d return source_configuration @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/source_configuration.py 30 31 32 33 34 35 36 37 38 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} source_configuration = cls () source_configuration . additional_properties = d return source_configuration to_dict Source code in prefect_hightouch/api_client/models/source_configuration.py 23 24 25 26 27 28 def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict","title":"SourceConfiguration"},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration","text":"","title":"source_configuration"},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration","text":"Bases: BaseModel The source's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. Source code in prefect_hightouch/api_client/models/source_configuration.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class SourceConfiguration ( BaseModel ): \"\"\"The source's configuration. This specifies general metadata about sources, like connection details Hightouch will use this configuration to connect to underlying source. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. \"\"\" additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} source_configuration = cls () source_configuration . additional_properties = d return source_configuration @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"SourceConfiguration"},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration.additional_keys","text":"","title":"additional_keys"},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration.additional_properties","text":"","title":"additional_properties"},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration.from_dict","text":"Source code in prefect_hightouch/api_client/models/source_configuration.py 30 31 32 33 34 35 36 37 38 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} source_configuration = cls () source_configuration . additional_properties = d return source_configuration","title":"from_dict()"},{"location":"models/source_configuration/#prefect_hightouch.api_client.models.source_configuration.SourceConfiguration.to_dict","text":"Source code in prefect_hightouch/api_client/models/source_configuration.py 23 24 25 26 27 28 def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict","title":"to_dict()"},{"location":"models/sync/","text":"prefect_hightouch.api_client.models.sync Sync Bases: BaseModel Syncs define how data from models are mapped to destinations. Each time a sync runs, Hightouch calculates the rows that have changed since the last run, and syncs them to Sync's destination. Attributes : configuration ( SyncConfiguration ) : The sync 's configuration. This specifies how data is mapped, among other configuration. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the sync was created destination_id (str): The id of the Destination that sync is connected to disabled (bool): Whether the sync has been disabled by the user. id (str): The sync' s id last_run_at ( datetime . datetime ) : The timestamp of the last sync run model_id ( str ) : The id of the Model that sync is connected to primary_key ( str ) : The primary key that sync uses to identify data from source referenced_columns ( List [ str ] ) : The reference column that sync depends on to sync data from source schedule ( SyncSchedule ) : The scheduling configuration . It can be triggerd based on several ways : Interval : the sync will be trigged based on certain interval ( minutes / hours / days / weeks ) Cron : the sync will be trigged based on cron expression https : // en . wikipedia . org / wiki / Cron . Visual : the sync will be trigged based a visual cron configuration on UI DBT - cloud : the sync will be trigged based on a dbt cloud job slug ( str ) : The sync ' s slug status ( SyncStatus ) : updated_at ( datetime . datetime ) : The timestamp when the sync was last updated workspace_id ( str ) : The id of the workspace that the sync belongs to Source code in prefect_hightouch/api_client/models/sync.pyclass Sync ( BaseModel ): \"\"\"Syncs define how data from models are mapped to destinations. Each time a sync runs, Hightouch calculates the rows that have changed since the last run, and syncs them to Sync's destination. Attributes: configuration (SyncConfiguration): The sync's configuration. This specifies how data is mapped, among other configuration. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the sync was created destination_id (str): The id of the Destination that sync is connected to disabled (bool): Whether the sync has been disabled by the user. id (str): The sync's id last_run_at (datetime.datetime): The timestamp of the last sync run model_id (str): The id of the Model that sync is connected to primary_key (str): The primary key that sync uses to identify data from source referenced_columns (List[str]): The reference column that sync depends on to sync data from source schedule (SyncSchedule): The scheduling configuration. It can be triggerd based on several ways: Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks) Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron. Visual: the sync will be trigged based a visual cron configuration on UI DBT-cloud: the sync will be trigged based on a dbt cloud job slug (str): The sync's slug status (SyncStatus): updated_at (datetime.datetime): The timestamp when the sync was last updated workspace_id (str): The id of the workspace that the sync belongs to \"\"\" configuration : SyncConfiguration = None created_at : datetime . datetime = None destination_id : str = None disabled : bool = None id : str = None last_run_at : datetime . datetime = None model_id : str = None primary_key : str = None referenced_columns : List [ str ] = None schedule : SyncSchedule = None slug : str = None status : SyncStatus = None updated_at : datetime . datetime = None workspace_id : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () destination_id = self . destination_id disabled = self . disabled id = self . id last_run_at = self . last_run_at . isoformat () model_id = self . model_id primary_key = self . primary_key referenced_columns = self . referenced_columns schedule = self . schedule . to_dict () slug = self . slug status = self . status . value updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"destinationId\" : destination_id , \"disabled\" : disabled , \"id\" : id , \"lastRunAt\" : last_run_at , \"modelId\" : model_id , \"primaryKey\" : primary_key , \"referencedColumns\" : referenced_columns , \"schedule\" : schedule , \"slug\" : slug , \"status\" : status , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = SyncConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) destination_id = d . pop ( \"destinationId\" ) disabled = d . pop ( \"disabled\" ) id = d . pop ( \"id\" ) last_run_at = isoparse ( d . pop ( \"lastRunAt\" )) model_id = d . pop ( \"modelId\" ) primary_key = d . pop ( \"primaryKey\" ) referenced_columns = cast ( List [ str ], d . pop ( \"referencedColumns\" )) schedule = SyncSchedule . from_dict ( d . pop ( \"schedule\" )) slug = d . pop ( \"slug\" ) status = SyncStatus ( d . pop ( \"status\" )) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) sync = cls ( configuration = configuration , created_at = created_at , destination_id = destination_id , disabled = disabled , id = id , last_run_at = last_run_at , model_id = model_id , primary_key = primary_key , referenced_columns = referenced_columns , schedule = schedule , slug = slug , status = status , updated_at = updated_at , workspace_id = workspace_id , ) sync . additional_properties = d return sync @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute configuration : SyncConfiguration = None class-attribute created_at : datetime . datetime = None class-attribute destination_id : str = None class-attribute disabled : bool = None class-attribute id : str = None class-attribute last_run_at : datetime . datetime = None class-attribute model_id : str = None class-attribute primary_key : str = None class-attribute referenced_columns : List [ str ] = None class-attribute schedule : SyncSchedule = None class-attribute slug : str = None class-attribute status : SyncStatus = None class-attribute updated_at : datetime . datetime = None class-attribute workspace_id : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/sync.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = SyncConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) destination_id = d . pop ( \"destinationId\" ) disabled = d . pop ( \"disabled\" ) id = d . pop ( \"id\" ) last_run_at = isoparse ( d . pop ( \"lastRunAt\" )) model_id = d . pop ( \"modelId\" ) primary_key = d . pop ( \"primaryKey\" ) referenced_columns = cast ( List [ str ], d . pop ( \"referencedColumns\" )) schedule = SyncSchedule . from_dict ( d . pop ( \"schedule\" )) slug = d . pop ( \"slug\" ) status = SyncStatus ( d . pop ( \"status\" )) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) sync = cls ( configuration = configuration , created_at = created_at , destination_id = destination_id , disabled = disabled , id = id , last_run_at = last_run_at , model_id = model_id , primary_key = primary_key , referenced_columns = referenced_columns , schedule = schedule , slug = slug , status = status , updated_at = updated_at , workspace_id = workspace_id , ) sync . additional_properties = d return sync to_dict Source code in prefect_hightouch/api_client/models/sync.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () destination_id = self . destination_id disabled = self . disabled id = self . id last_run_at = self . last_run_at . isoformat () model_id = self . model_id primary_key = self . primary_key referenced_columns = self . referenced_columns schedule = self . schedule . to_dict () slug = self . slug status = self . status . value updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"destinationId\" : destination_id , \"disabled\" : disabled , \"id\" : id , \"lastRunAt\" : last_run_at , \"modelId\" : model_id , \"primaryKey\" : primary_key , \"referencedColumns\" : referenced_columns , \"schedule\" : schedule , \"slug\" : slug , \"status\" : status , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict","title":"Sync"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync","text":"","title":"sync"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync","text":"Bases: BaseModel Syncs define how data from models are mapped to destinations. Each time a sync runs, Hightouch calculates the rows that have changed since the last run, and syncs them to Sync's destination. Attributes : configuration ( SyncConfiguration ) : The sync 's configuration. This specifies how data is mapped, among other configuration. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the sync was created destination_id (str): The id of the Destination that sync is connected to disabled (bool): Whether the sync has been disabled by the user. id (str): The sync' s id last_run_at ( datetime . datetime ) : The timestamp of the last sync run model_id ( str ) : The id of the Model that sync is connected to primary_key ( str ) : The primary key that sync uses to identify data from source referenced_columns ( List [ str ] ) : The reference column that sync depends on to sync data from source schedule ( SyncSchedule ) : The scheduling configuration . It can be triggerd based on several ways : Interval : the sync will be trigged based on certain interval ( minutes / hours / days / weeks ) Cron : the sync will be trigged based on cron expression https : // en . wikipedia . org / wiki / Cron . Visual : the sync will be trigged based a visual cron configuration on UI DBT - cloud : the sync will be trigged based on a dbt cloud job slug ( str ) : The sync ' s slug status ( SyncStatus ) : updated_at ( datetime . datetime ) : The timestamp when the sync was last updated workspace_id ( str ) : The id of the workspace that the sync belongs to Source code in prefect_hightouch/api_client/models/sync.pyclass Sync ( BaseModel ): \"\"\"Syncs define how data from models are mapped to destinations. Each time a sync runs, Hightouch calculates the rows that have changed since the last run, and syncs them to Sync's destination. Attributes: configuration (SyncConfiguration): The sync's configuration. This specifies how data is mapped, among other configuration. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. created_at (datetime.datetime): The timestamp when the sync was created destination_id (str): The id of the Destination that sync is connected to disabled (bool): Whether the sync has been disabled by the user. id (str): The sync's id last_run_at (datetime.datetime): The timestamp of the last sync run model_id (str): The id of the Model that sync is connected to primary_key (str): The primary key that sync uses to identify data from source referenced_columns (List[str]): The reference column that sync depends on to sync data from source schedule (SyncSchedule): The scheduling configuration. It can be triggerd based on several ways: Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks) Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron. Visual: the sync will be trigged based a visual cron configuration on UI DBT-cloud: the sync will be trigged based on a dbt cloud job slug (str): The sync's slug status (SyncStatus): updated_at (datetime.datetime): The timestamp when the sync was last updated workspace_id (str): The id of the workspace that the sync belongs to \"\"\" configuration : SyncConfiguration = None created_at : datetime . datetime = None destination_id : str = None disabled : bool = None id : str = None last_run_at : datetime . datetime = None model_id : str = None primary_key : str = None referenced_columns : List [ str ] = None schedule : SyncSchedule = None slug : str = None status : SyncStatus = None updated_at : datetime . datetime = None workspace_id : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () destination_id = self . destination_id disabled = self . disabled id = self . id last_run_at = self . last_run_at . isoformat () model_id = self . model_id primary_key = self . primary_key referenced_columns = self . referenced_columns schedule = self . schedule . to_dict () slug = self . slug status = self . status . value updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"destinationId\" : destination_id , \"disabled\" : disabled , \"id\" : id , \"lastRunAt\" : last_run_at , \"modelId\" : model_id , \"primaryKey\" : primary_key , \"referencedColumns\" : referenced_columns , \"schedule\" : schedule , \"slug\" : slug , \"status\" : status , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = SyncConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) destination_id = d . pop ( \"destinationId\" ) disabled = d . pop ( \"disabled\" ) id = d . pop ( \"id\" ) last_run_at = isoparse ( d . pop ( \"lastRunAt\" )) model_id = d . pop ( \"modelId\" ) primary_key = d . pop ( \"primaryKey\" ) referenced_columns = cast ( List [ str ], d . pop ( \"referencedColumns\" )) schedule = SyncSchedule . from_dict ( d . pop ( \"schedule\" )) slug = d . pop ( \"slug\" ) status = SyncStatus ( d . pop ( \"status\" )) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) sync = cls ( configuration = configuration , created_at = created_at , destination_id = destination_id , disabled = disabled , id = id , last_run_at = last_run_at , model_id = model_id , primary_key = primary_key , referenced_columns = referenced_columns , schedule = schedule , slug = slug , status = status , updated_at = updated_at , workspace_id = workspace_id , ) sync . additional_properties = d return sync @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"Sync"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.additional_keys","text":"","title":"additional_keys"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.additional_properties","text":"","title":"additional_properties"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.configuration","text":"","title":"configuration"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.created_at","text":"","title":"created_at"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.destination_id","text":"","title":"destination_id"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.disabled","text":"","title":"disabled"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.id","text":"","title":"id"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.last_run_at","text":"","title":"last_run_at"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.model_id","text":"","title":"model_id"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.primary_key","text":"","title":"primary_key"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.referenced_columns","text":"","title":"referenced_columns"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.schedule","text":"","title":"schedule"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.slug","text":"","title":"slug"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.status","text":"","title":"status"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.updated_at","text":"","title":"updated_at"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.workspace_id","text":"","title":"workspace_id"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.from_dict","text":"Source code in prefect_hightouch/api_client/models/sync.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} configuration = SyncConfiguration . from_dict ( d . pop ( \"configuration\" )) created_at = isoparse ( d . pop ( \"createdAt\" )) destination_id = d . pop ( \"destinationId\" ) disabled = d . pop ( \"disabled\" ) id = d . pop ( \"id\" ) last_run_at = isoparse ( d . pop ( \"lastRunAt\" )) model_id = d . pop ( \"modelId\" ) primary_key = d . pop ( \"primaryKey\" ) referenced_columns = cast ( List [ str ], d . pop ( \"referencedColumns\" )) schedule = SyncSchedule . from_dict ( d . pop ( \"schedule\" )) slug = d . pop ( \"slug\" ) status = SyncStatus ( d . pop ( \"status\" )) updated_at = isoparse ( d . pop ( \"updatedAt\" )) workspace_id = d . pop ( \"workspaceId\" ) sync = cls ( configuration = configuration , created_at = created_at , destination_id = destination_id , disabled = disabled , id = id , last_run_at = last_run_at , model_id = model_id , primary_key = primary_key , referenced_columns = referenced_columns , schedule = schedule , slug = slug , status = status , updated_at = updated_at , workspace_id = workspace_id , ) sync . additional_properties = d return sync","title":"from_dict()"},{"location":"models/sync/#prefect_hightouch.api_client.models.sync.Sync.to_dict","text":"Source code in prefect_hightouch/api_client/models/sync.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def to_dict ( self ) -> Dict [ str , Any ]: configuration = self . configuration . to_dict () created_at = self . created_at . isoformat () destination_id = self . destination_id disabled = self . disabled id = self . id last_run_at = self . last_run_at . isoformat () model_id = self . model_id primary_key = self . primary_key referenced_columns = self . referenced_columns schedule = self . schedule . to_dict () slug = self . slug status = self . status . value updated_at = self . updated_at . isoformat () workspace_id = self . workspace_id field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"configuration\" : configuration , \"createdAt\" : created_at , \"destinationId\" : destination_id , \"disabled\" : disabled , \"id\" : id , \"lastRunAt\" : last_run_at , \"modelId\" : model_id , \"primaryKey\" : primary_key , \"referencedColumns\" : referenced_columns , \"schedule\" : schedule , \"slug\" : slug , \"status\" : status , \"updatedAt\" : updated_at , \"workspaceId\" : workspace_id , } ) return field_dict","title":"to_dict()"},{"location":"models/sync_configuration/","text":"prefect_hightouch.api_client.models.sync_configuration SyncConfiguration Bases: BaseModel The sync's configuration. This specifies how data is mapped, among other configuration. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. Source code in prefect_hightouch/api_client/models/sync_configuration.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class SyncConfiguration ( BaseModel ): \"\"\"The sync's configuration. This specifies how data is mapped, among other configuration. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. \"\"\" additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} sync_configuration = cls () sync_configuration . additional_properties = d return sync_configuration @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/sync_configuration.py 30 31 32 33 34 35 36 37 38 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} sync_configuration = cls () sync_configuration . additional_properties = d return sync_configuration to_dict Source code in prefect_hightouch/api_client/models/sync_configuration.py 23 24 25 26 27 28 def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict","title":"SyncConfiguration"},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration","text":"","title":"sync_configuration"},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration","text":"Bases: BaseModel The sync's configuration. This specifies how data is mapped, among other configuration. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. Source code in prefect_hightouch/api_client/models/sync_configuration.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class SyncConfiguration ( BaseModel ): \"\"\"The sync's configuration. This specifies how data is mapped, among other configuration. The schema depends on the destination. Consumers should NOT make assumptions on the contents of the configuration. It may change as Hightouch updates its internal code. \"\"\" additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} sync_configuration = cls () sync_configuration . additional_properties = d return sync_configuration @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"SyncConfiguration"},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration.additional_keys","text":"","title":"additional_keys"},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration.additional_properties","text":"","title":"additional_properties"},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration.from_dict","text":"Source code in prefect_hightouch/api_client/models/sync_configuration.py 30 31 32 33 34 35 36 37 38 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} sync_configuration = cls () sync_configuration . additional_properties = d return sync_configuration","title":"from_dict()"},{"location":"models/sync_configuration/#prefect_hightouch.api_client.models.sync_configuration.SyncConfiguration.to_dict","text":"Source code in prefect_hightouch/api_client/models/sync_configuration.py 23 24 25 26 27 28 def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict","title":"to_dict()"},{"location":"models/sync_run/","text":"prefect_hightouch.api_client.models.sync_run SyncRun Bases: BaseModel Attributes: Name Type Description completion_ratio float The completion ratio of sync run, showing the progress of a sync run created_at datetime . datetime The timestamp when sync run was created. In most cases this will be equivalent to startedAt , but it may be earlier if the sync was triggered while a run was already in progress, and the new run didn't start for a while. failed_rows SyncRunFailedRows The number of rows that we attempted to sync, but were rejected by the destination. This does not include rows that weren't attempted due to the sync being cancelled. finished_at datetime . datetime The timestamp when the sync run finished id str The sync run's id planned_rows SyncRunPlannedRows The number of planned rows that this sync run was supposed to execute. Note that the counts for successfulRows and failedRows may not add up to plannedRows if the sync was cancelled. query_size float The number of rows in the query. started_at datetime . datetime The timestamp when the sync run started status SyncRunStatus The status of sync runs successful_rows SyncRunSuccessfulRows The number of rows that were successfully processed by the destination. error Union [ Unset , str ] Error message if the sync run didn't finish successfully Source code in prefect_hightouch/api_client/models/sync_run.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 class SyncRun ( BaseModel ): \"\"\" Attributes: completion_ratio (float): The completion ratio of sync run, showing the progress of a sync run created_at (datetime.datetime): The timestamp when sync run was created. In most cases this will be equivalent to `startedAt`, but it may be earlier if the sync was triggered while a run was already in progress, and the new run didn't start for a while. failed_rows (SyncRunFailedRows): The number of rows that we attempted to sync, but were rejected by the destination. This does not include rows that weren't attempted due to the sync being cancelled. finished_at (datetime.datetime): The timestamp when the sync run finished id (str): The sync run's id planned_rows (SyncRunPlannedRows): The number of planned rows that this sync run was supposed to execute. Note that the counts for `successfulRows` and `failedRows` may not add up to `plannedRows` if the sync was cancelled. query_size (float): The number of rows in the query. started_at (datetime.datetime): The timestamp when the sync run started status (SyncRunStatus): The status of sync runs successful_rows (SyncRunSuccessfulRows): The number of rows that were successfully processed by the destination. error (Union[Unset, str]): Error message if the sync run didn't finish successfully \"\"\" completion_ratio : float = None created_at : datetime . datetime = None failed_rows : SyncRunFailedRows = None finished_at : datetime . datetime = None id : str = None planned_rows : SyncRunPlannedRows = None query_size : float = None started_at : datetime . datetime = None status : SyncRunStatus = None successful_rows : SyncRunSuccessfulRows = None error : Union [ Unset , str ] = UNSET additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: completion_ratio = self . completion_ratio created_at = self . created_at . isoformat () failed_rows = self . failed_rows . to_dict () finished_at = self . finished_at . isoformat () id = self . id planned_rows = self . planned_rows . to_dict () query_size = self . query_size started_at = self . started_at . isoformat () status = self . status . value successful_rows = self . successful_rows . to_dict () error = self . error field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"completionRatio\" : completion_ratio , \"createdAt\" : created_at , \"failedRows\" : failed_rows , \"finishedAt\" : finished_at , \"id\" : id , \"plannedRows\" : planned_rows , \"querySize\" : query_size , \"startedAt\" : started_at , \"status\" : status , \"successfulRows\" : successful_rows , } ) if error is not UNSET : field_dict [ \"error\" ] = error return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} completion_ratio = d . pop ( \"completionRatio\" ) created_at = isoparse ( d . pop ( \"createdAt\" )) failed_rows = SyncRunFailedRows . from_dict ( d . pop ( \"failedRows\" )) finished_at = isoparse ( d . pop ( \"finishedAt\" )) id = d . pop ( \"id\" ) planned_rows = SyncRunPlannedRows . from_dict ( d . pop ( \"plannedRows\" )) query_size = d . pop ( \"querySize\" ) started_at = isoparse ( d . pop ( \"startedAt\" )) status = SyncRunStatus ( d . pop ( \"status\" )) successful_rows = SyncRunSuccessfulRows . from_dict ( d . pop ( \"successfulRows\" )) error = d . pop ( \"error\" , UNSET ) sync_run = cls ( completion_ratio = completion_ratio , created_at = created_at , failed_rows = failed_rows , finished_at = finished_at , id = id , planned_rows = planned_rows , query_size = query_size , started_at = started_at , status = status , successful_rows = successful_rows , error = error , ) sync_run . additional_properties = d return sync_run @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute completion_ratio : float = None class-attribute created_at : datetime . datetime = None class-attribute error : Union [ Unset , str ] = UNSET class-attribute failed_rows : SyncRunFailedRows = None class-attribute finished_at : datetime . datetime = None class-attribute id : str = None class-attribute planned_rows : SyncRunPlannedRows = None class-attribute query_size : float = None class-attribute started_at : datetime . datetime = None class-attribute status : SyncRunStatus = None class-attribute successful_rows : SyncRunSuccessfulRows = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/sync_run.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} completion_ratio = d . pop ( \"completionRatio\" ) created_at = isoparse ( d . pop ( \"createdAt\" )) failed_rows = SyncRunFailedRows . from_dict ( d . pop ( \"failedRows\" )) finished_at = isoparse ( d . pop ( \"finishedAt\" )) id = d . pop ( \"id\" ) planned_rows = SyncRunPlannedRows . from_dict ( d . pop ( \"plannedRows\" )) query_size = d . pop ( \"querySize\" ) started_at = isoparse ( d . pop ( \"startedAt\" )) status = SyncRunStatus ( d . pop ( \"status\" )) successful_rows = SyncRunSuccessfulRows . from_dict ( d . pop ( \"successfulRows\" )) error = d . pop ( \"error\" , UNSET ) sync_run = cls ( completion_ratio = completion_ratio , created_at = created_at , failed_rows = failed_rows , finished_at = finished_at , id = id , planned_rows = planned_rows , query_size = query_size , started_at = started_at , status = status , successful_rows = successful_rows , error = error , ) sync_run . additional_properties = d return sync_run to_dict Source code in prefect_hightouch/api_client/models/sync_run.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def to_dict ( self ) -> Dict [ str , Any ]: completion_ratio = self . completion_ratio created_at = self . created_at . isoformat () failed_rows = self . failed_rows . to_dict () finished_at = self . finished_at . isoformat () id = self . id planned_rows = self . planned_rows . to_dict () query_size = self . query_size started_at = self . started_at . isoformat () status = self . status . value successful_rows = self . successful_rows . to_dict () error = self . error field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"completionRatio\" : completion_ratio , \"createdAt\" : created_at , \"failedRows\" : failed_rows , \"finishedAt\" : finished_at , \"id\" : id , \"plannedRows\" : planned_rows , \"querySize\" : query_size , \"startedAt\" : started_at , \"status\" : status , \"successfulRows\" : successful_rows , } ) if error is not UNSET : field_dict [ \"error\" ] = error return field_dict","title":"SyncRun"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run","text":"","title":"sync_run"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun","text":"Bases: BaseModel Attributes: Name Type Description completion_ratio float The completion ratio of sync run, showing the progress of a sync run created_at datetime . datetime The timestamp when sync run was created. In most cases this will be equivalent to startedAt , but it may be earlier if the sync was triggered while a run was already in progress, and the new run didn't start for a while. failed_rows SyncRunFailedRows The number of rows that we attempted to sync, but were rejected by the destination. This does not include rows that weren't attempted due to the sync being cancelled. finished_at datetime . datetime The timestamp when the sync run finished id str The sync run's id planned_rows SyncRunPlannedRows The number of planned rows that this sync run was supposed to execute. Note that the counts for successfulRows and failedRows may not add up to plannedRows if the sync was cancelled. query_size float The number of rows in the query. started_at datetime . datetime The timestamp when the sync run started status SyncRunStatus The status of sync runs successful_rows SyncRunSuccessfulRows The number of rows that were successfully processed by the destination. error Union [ Unset , str ] Error message if the sync run didn't finish successfully Source code in prefect_hightouch/api_client/models/sync_run.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 class SyncRun ( BaseModel ): \"\"\" Attributes: completion_ratio (float): The completion ratio of sync run, showing the progress of a sync run created_at (datetime.datetime): The timestamp when sync run was created. In most cases this will be equivalent to `startedAt`, but it may be earlier if the sync was triggered while a run was already in progress, and the new run didn't start for a while. failed_rows (SyncRunFailedRows): The number of rows that we attempted to sync, but were rejected by the destination. This does not include rows that weren't attempted due to the sync being cancelled. finished_at (datetime.datetime): The timestamp when the sync run finished id (str): The sync run's id planned_rows (SyncRunPlannedRows): The number of planned rows that this sync run was supposed to execute. Note that the counts for `successfulRows` and `failedRows` may not add up to `plannedRows` if the sync was cancelled. query_size (float): The number of rows in the query. started_at (datetime.datetime): The timestamp when the sync run started status (SyncRunStatus): The status of sync runs successful_rows (SyncRunSuccessfulRows): The number of rows that were successfully processed by the destination. error (Union[Unset, str]): Error message if the sync run didn't finish successfully \"\"\" completion_ratio : float = None created_at : datetime . datetime = None failed_rows : SyncRunFailedRows = None finished_at : datetime . datetime = None id : str = None planned_rows : SyncRunPlannedRows = None query_size : float = None started_at : datetime . datetime = None status : SyncRunStatus = None successful_rows : SyncRunSuccessfulRows = None error : Union [ Unset , str ] = UNSET additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: completion_ratio = self . completion_ratio created_at = self . created_at . isoformat () failed_rows = self . failed_rows . to_dict () finished_at = self . finished_at . isoformat () id = self . id planned_rows = self . planned_rows . to_dict () query_size = self . query_size started_at = self . started_at . isoformat () status = self . status . value successful_rows = self . successful_rows . to_dict () error = self . error field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"completionRatio\" : completion_ratio , \"createdAt\" : created_at , \"failedRows\" : failed_rows , \"finishedAt\" : finished_at , \"id\" : id , \"plannedRows\" : planned_rows , \"querySize\" : query_size , \"startedAt\" : started_at , \"status\" : status , \"successfulRows\" : successful_rows , } ) if error is not UNSET : field_dict [ \"error\" ] = error return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} completion_ratio = d . pop ( \"completionRatio\" ) created_at = isoparse ( d . pop ( \"createdAt\" )) failed_rows = SyncRunFailedRows . from_dict ( d . pop ( \"failedRows\" )) finished_at = isoparse ( d . pop ( \"finishedAt\" )) id = d . pop ( \"id\" ) planned_rows = SyncRunPlannedRows . from_dict ( d . pop ( \"plannedRows\" )) query_size = d . pop ( \"querySize\" ) started_at = isoparse ( d . pop ( \"startedAt\" )) status = SyncRunStatus ( d . pop ( \"status\" )) successful_rows = SyncRunSuccessfulRows . from_dict ( d . pop ( \"successfulRows\" )) error = d . pop ( \"error\" , UNSET ) sync_run = cls ( completion_ratio = completion_ratio , created_at = created_at , failed_rows = failed_rows , finished_at = finished_at , id = id , planned_rows = planned_rows , query_size = query_size , started_at = started_at , status = status , successful_rows = successful_rows , error = error , ) sync_run . additional_properties = d return sync_run @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"SyncRun"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.additional_keys","text":"","title":"additional_keys"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.additional_properties","text":"","title":"additional_properties"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.completion_ratio","text":"","title":"completion_ratio"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.created_at","text":"","title":"created_at"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.error","text":"","title":"error"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.failed_rows","text":"","title":"failed_rows"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.finished_at","text":"","title":"finished_at"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.id","text":"","title":"id"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.planned_rows","text":"","title":"planned_rows"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.query_size","text":"","title":"query_size"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.started_at","text":"","title":"started_at"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.status","text":"","title":"status"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.successful_rows","text":"","title":"successful_rows"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.from_dict","text":"Source code in prefect_hightouch/api_client/models/sync_run.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} completion_ratio = d . pop ( \"completionRatio\" ) created_at = isoparse ( d . pop ( \"createdAt\" )) failed_rows = SyncRunFailedRows . from_dict ( d . pop ( \"failedRows\" )) finished_at = isoparse ( d . pop ( \"finishedAt\" )) id = d . pop ( \"id\" ) planned_rows = SyncRunPlannedRows . from_dict ( d . pop ( \"plannedRows\" )) query_size = d . pop ( \"querySize\" ) started_at = isoparse ( d . pop ( \"startedAt\" )) status = SyncRunStatus ( d . pop ( \"status\" )) successful_rows = SyncRunSuccessfulRows . from_dict ( d . pop ( \"successfulRows\" )) error = d . pop ( \"error\" , UNSET ) sync_run = cls ( completion_ratio = completion_ratio , created_at = created_at , failed_rows = failed_rows , finished_at = finished_at , id = id , planned_rows = planned_rows , query_size = query_size , started_at = started_at , status = status , successful_rows = successful_rows , error = error , ) sync_run . additional_properties = d return sync_run","title":"from_dict()"},{"location":"models/sync_run/#prefect_hightouch.api_client.models.sync_run.SyncRun.to_dict","text":"Source code in prefect_hightouch/api_client/models/sync_run.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def to_dict ( self ) -> Dict [ str , Any ]: completion_ratio = self . completion_ratio created_at = self . created_at . isoformat () failed_rows = self . failed_rows . to_dict () finished_at = self . finished_at . isoformat () id = self . id planned_rows = self . planned_rows . to_dict () query_size = self . query_size started_at = self . started_at . isoformat () status = self . status . value successful_rows = self . successful_rows . to_dict () error = self . error field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"completionRatio\" : completion_ratio , \"createdAt\" : created_at , \"failedRows\" : failed_rows , \"finishedAt\" : finished_at , \"id\" : id , \"plannedRows\" : planned_rows , \"querySize\" : query_size , \"startedAt\" : started_at , \"status\" : status , \"successfulRows\" : successful_rows , } ) if error is not UNSET : field_dict [ \"error\" ] = error return field_dict","title":"to_dict()"},{"location":"models/sync_run_failed_rows/","text":"prefect_hightouch.api_client.models.sync_run_failed_rows SyncRunFailedRows Bases: BaseModel The number of rows that we attempted to sync, but were rejected by the destination. This does not include rows that weren't attempted due to the sync being cancelled. Attributes : added_count ( float ): The number of failed adds . changed_count ( float ): The number of failed changes . removed_count ( float ): The number of failed removes . Source code in prefect_hightouch/api_client/models/sync_run_failed_rows.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class SyncRunFailedRows ( BaseModel ): \"\"\"The number of rows that we attempted to sync, but were rejected by the destination. This does not include rows that weren't attempted due to the sync being cancelled. Attributes: added_count (float): The number of failed adds. changed_count (float): The number of failed changes. removed_count (float): The number of failed removes. \"\"\" added_count : float = None changed_count : float = None removed_count : float = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_failed_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_failed_rows . additional_properties = d return sync_run_failed_rows @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties added_count : float = None class-attribute additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute changed_count : float = None class-attribute removed_count : float = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/sync_run_failed_rows.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_failed_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_failed_rows . additional_properties = d return sync_run_failed_rows to_dict Source code in prefect_hightouch/api_client/models/sync_run_failed_rows.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict","title":"SyncRunFailedRows"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows","text":"","title":"sync_run_failed_rows"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows","text":"Bases: BaseModel The number of rows that we attempted to sync, but were rejected by the destination. This does not include rows that weren't attempted due to the sync being cancelled. Attributes : added_count ( float ): The number of failed adds . changed_count ( float ): The number of failed changes . removed_count ( float ): The number of failed removes . Source code in prefect_hightouch/api_client/models/sync_run_failed_rows.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class SyncRunFailedRows ( BaseModel ): \"\"\"The number of rows that we attempted to sync, but were rejected by the destination. This does not include rows that weren't attempted due to the sync being cancelled. Attributes: added_count (float): The number of failed adds. changed_count (float): The number of failed changes. removed_count (float): The number of failed removes. \"\"\" added_count : float = None changed_count : float = None removed_count : float = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_failed_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_failed_rows . additional_properties = d return sync_run_failed_rows @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"SyncRunFailedRows"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.added_count","text":"","title":"added_count"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.additional_keys","text":"","title":"additional_keys"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.additional_properties","text":"","title":"additional_properties"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.changed_count","text":"","title":"changed_count"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.removed_count","text":"","title":"removed_count"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.from_dict","text":"Source code in prefect_hightouch/api_client/models/sync_run_failed_rows.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_failed_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_failed_rows . additional_properties = d return sync_run_failed_rows","title":"from_dict()"},{"location":"models/sync_run_failed_rows/#prefect_hightouch.api_client.models.sync_run_failed_rows.SyncRunFailedRows.to_dict","text":"Source code in prefect_hightouch/api_client/models/sync_run_failed_rows.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict","title":"to_dict()"},{"location":"models/sync_run_planned_rows/","text":"prefect_hightouch.api_client.models.sync_run_planned_rows SyncRunPlannedRows Bases: BaseModel The number of planned rows that this sync run was supposed to execute. Note that the counts for successfulRows and failedRows may not add up to plannedRows if the sync was cancelled. Attributes : added_count ( float ): The number of added rows . changed_count ( float ): The number of changed rows . removed_count ( float ): The number of removed rows . Source code in prefect_hightouch/api_client/models/sync_run_planned_rows.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class SyncRunPlannedRows ( BaseModel ): \"\"\"The number of planned rows that this sync run was supposed to execute. Note that the counts for `successfulRows` and `failedRows` may not add up to `plannedRows` if the sync was cancelled. Attributes: added_count (float): The number of added rows. changed_count (float): The number of changed rows. removed_count (float): The number of removed rows. \"\"\" added_count : float = None changed_count : float = None removed_count : float = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_planned_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_planned_rows . additional_properties = d return sync_run_planned_rows @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties added_count : float = None class-attribute additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute changed_count : float = None class-attribute removed_count : float = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/sync_run_planned_rows.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_planned_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_planned_rows . additional_properties = d return sync_run_planned_rows to_dict Source code in prefect_hightouch/api_client/models/sync_run_planned_rows.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict","title":"SyncRunPlannedRows"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows","text":"","title":"sync_run_planned_rows"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows","text":"Bases: BaseModel The number of planned rows that this sync run was supposed to execute. Note that the counts for successfulRows and failedRows may not add up to plannedRows if the sync was cancelled. Attributes : added_count ( float ): The number of added rows . changed_count ( float ): The number of changed rows . removed_count ( float ): The number of removed rows . Source code in prefect_hightouch/api_client/models/sync_run_planned_rows.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class SyncRunPlannedRows ( BaseModel ): \"\"\"The number of planned rows that this sync run was supposed to execute. Note that the counts for `successfulRows` and `failedRows` may not add up to `plannedRows` if the sync was cancelled. Attributes: added_count (float): The number of added rows. changed_count (float): The number of changed rows. removed_count (float): The number of removed rows. \"\"\" added_count : float = None changed_count : float = None removed_count : float = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_planned_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_planned_rows . additional_properties = d return sync_run_planned_rows @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"SyncRunPlannedRows"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.added_count","text":"","title":"added_count"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.additional_keys","text":"","title":"additional_keys"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.additional_properties","text":"","title":"additional_properties"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.changed_count","text":"","title":"changed_count"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.removed_count","text":"","title":"removed_count"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.from_dict","text":"Source code in prefect_hightouch/api_client/models/sync_run_planned_rows.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_planned_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_planned_rows . additional_properties = d return sync_run_planned_rows","title":"from_dict()"},{"location":"models/sync_run_planned_rows/#prefect_hightouch.api_client.models.sync_run_planned_rows.SyncRunPlannedRows.to_dict","text":"Source code in prefect_hightouch/api_client/models/sync_run_planned_rows.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict","title":"to_dict()"},{"location":"models/sync_run_status/","text":"prefect_hightouch.api_client.models.sync_run_status SyncRunStatus Bases: str , Enum Source code in prefect_hightouch/api_client/models/sync_run_status.py 4 5 6 7 8 9 10 11 12 13 14 15 16 class SyncRunStatus ( str , Enum ): CANCELLED = \"cancelled\" FAILED = \"failed\" QUEUED = \"queued\" SUCCESS = \"success\" WARNING = \"warning\" QUERYING = \"querying\" PROCESSING = \"processing\" REPORTING = \"reporting\" INTERRUPTED = \"interrupted\" def __str__ ( self ) -> str : return str ( self . value ) CANCELLED = 'cancelled' class-attribute FAILED = 'failed' class-attribute PROCESSING = 'processing' class-attribute QUERYING = 'querying' class-attribute QUEUED = 'queued' class-attribute SUCCESS = 'success' class-attribute WARNING = 'warning' class-attribute","title":"SyncRunStatus"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status","text":"","title":"sync_run_status"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/sync_run_status.py 4 5 6 7 8 9 10 11 12 13 14 15 16 class SyncRunStatus ( str , Enum ): CANCELLED = \"cancelled\" FAILED = \"failed\" QUEUED = \"queued\" SUCCESS = \"success\" WARNING = \"warning\" QUERYING = \"querying\" PROCESSING = \"processing\" REPORTING = \"reporting\" INTERRUPTED = \"interrupted\" def __str__ ( self ) -> str : return str ( self . value )","title":"SyncRunStatus"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.CANCELLED","text":"","title":"CANCELLED"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.FAILED","text":"","title":"FAILED"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.PROCESSING","text":"","title":"PROCESSING"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.QUERYING","text":"","title":"QUERYING"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.QUEUED","text":"","title":"QUEUED"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.SUCCESS","text":"","title":"SUCCESS"},{"location":"models/sync_run_status/#prefect_hightouch.api_client.models.sync_run_status.SyncRunStatus.WARNING","text":"","title":"WARNING"},{"location":"models/sync_run_successful_rows/","text":"prefect_hightouch.api_client.models.sync_run_successful_rows SyncRunSuccessfulRows Bases: BaseModel The number of rows that were successfully processed by the destination. Attributes: Name Type Description added_count float The number of successful adds. changed_count float The number of successful changes. removed_count float The number of successful removes. Source code in prefect_hightouch/api_client/models/sync_run_successful_rows.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class SyncRunSuccessfulRows ( BaseModel ): \"\"\"The number of rows that were successfully processed by the destination. Attributes: added_count (float): The number of successful adds. changed_count (float): The number of successful changes. removed_count (float): The number of successful removes. \"\"\" added_count : float = None changed_count : float = None removed_count : float = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_successful_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_successful_rows . additional_properties = d return sync_run_successful_rows @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties added_count : float = None class-attribute additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute changed_count : float = None class-attribute removed_count : float = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/sync_run_successful_rows.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_successful_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_successful_rows . additional_properties = d return sync_run_successful_rows to_dict Source code in prefect_hightouch/api_client/models/sync_run_successful_rows.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict","title":"SyncRunSuccessfulRows"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows","text":"","title":"sync_run_successful_rows"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows","text":"Bases: BaseModel The number of rows that were successfully processed by the destination. Attributes: Name Type Description added_count float The number of successful adds. changed_count float The number of successful changes. removed_count float The number of successful removes. Source code in prefect_hightouch/api_client/models/sync_run_successful_rows.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class SyncRunSuccessfulRows ( BaseModel ): \"\"\"The number of rows that were successfully processed by the destination. Attributes: added_count (float): The number of successful adds. changed_count (float): The number of successful changes. removed_count (float): The number of successful removes. \"\"\" added_count : float = None changed_count : float = None removed_count : float = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_successful_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_successful_rows . additional_properties = d return sync_run_successful_rows @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"SyncRunSuccessfulRows"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.added_count","text":"","title":"added_count"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.additional_keys","text":"","title":"additional_keys"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.additional_properties","text":"","title":"additional_properties"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.changed_count","text":"","title":"changed_count"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.removed_count","text":"","title":"removed_count"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.from_dict","text":"Source code in prefect_hightouch/api_client/models/sync_run_successful_rows.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} added_count = d . pop ( \"addedCount\" ) changed_count = d . pop ( \"changedCount\" ) removed_count = d . pop ( \"removedCount\" ) sync_run_successful_rows = cls ( added_count = added_count , changed_count = changed_count , removed_count = removed_count , ) sync_run_successful_rows . additional_properties = d return sync_run_successful_rows","title":"from_dict()"},{"location":"models/sync_run_successful_rows/#prefect_hightouch.api_client.models.sync_run_successful_rows.SyncRunSuccessfulRows.to_dict","text":"Source code in prefect_hightouch/api_client/models/sync_run_successful_rows.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def to_dict ( self ) -> Dict [ str , Any ]: added_count = self . added_count changed_count = self . changed_count removed_count = self . removed_count field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"addedCount\" : added_count , \"changedCount\" : changed_count , \"removedCount\" : removed_count , } ) return field_dict","title":"to_dict()"},{"location":"models/sync_schedule/","text":"prefect_hightouch.api_client.models.sync_schedule SyncSchedule Bases: BaseModel The scheduling configuration. It can be triggerd based on several ways: Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks) Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron. Visual: the sync will be trigged based a visual cron configuration on UI the sync will be trigged based on a dbt cloud job Source code in prefect_hightouch/api_client/models/sync_schedule.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 class SyncSchedule ( BaseModel ): \"\"\"The scheduling configuration. It can be triggerd based on several ways: Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks) Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron. Visual: the sync will be trigged based a visual cron configuration on UI DBT-cloud: the sync will be trigged based on a dbt cloud job Attributes: schedule (Union[CronSchedule, DBTSchedule, IntervalSchedule, VisualCronSchedule]): type (str): \"\"\" schedule : Union [ CronSchedule , DBTSchedule , IntervalSchedule , VisualCronSchedule ] = None type : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: schedule : Dict [ str , Any ] if isinstance ( self . schedule , IntervalSchedule ): schedule = self . schedule . to_dict () elif isinstance ( self . schedule , CronSchedule ): schedule = self . schedule . to_dict () elif isinstance ( self . schedule , VisualCronSchedule ): schedule = self . schedule . to_dict () else : schedule = self . schedule . to_dict () type = self . type field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"schedule\" : schedule , \"type\" : type , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} def _parse_schedule ( data : object , ) -> Union [ CronSchedule , DBTSchedule , IntervalSchedule , VisualCronSchedule ]: try : if not isinstance ( data , dict ): raise TypeError () schedule_type_0 = IntervalSchedule . from_dict ( data ) return schedule_type_0 except : # noqa: E722 pass try : if not isinstance ( data , dict ): raise TypeError () schedule_type_1 = CronSchedule . from_dict ( data ) return schedule_type_1 except : # noqa: E722 pass try : if not isinstance ( data , dict ): raise TypeError () schedule_type_2 = VisualCronSchedule . from_dict ( data ) return schedule_type_2 except : # noqa: E722 pass if not isinstance ( data , dict ): raise TypeError () schedule_type_3 = DBTSchedule . from_dict ( data ) return schedule_type_3 schedule = _parse_schedule ( d . pop ( \"schedule\" )) type = d . pop ( \"type\" ) sync_schedule = cls ( schedule = schedule , type = type , ) sync_schedule . additional_properties = d return sync_schedule @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute schedule : Union [ CronSchedule , DBTSchedule , IntervalSchedule , VisualCronSchedule ] = None class-attribute type : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/sync_schedule.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} def _parse_schedule ( data : object , ) -> Union [ CronSchedule , DBTSchedule , IntervalSchedule , VisualCronSchedule ]: try : if not isinstance ( data , dict ): raise TypeError () schedule_type_0 = IntervalSchedule . from_dict ( data ) return schedule_type_0 except : # noqa: E722 pass try : if not isinstance ( data , dict ): raise TypeError () schedule_type_1 = CronSchedule . from_dict ( data ) return schedule_type_1 except : # noqa: E722 pass try : if not isinstance ( data , dict ): raise TypeError () schedule_type_2 = VisualCronSchedule . from_dict ( data ) return schedule_type_2 except : # noqa: E722 pass if not isinstance ( data , dict ): raise TypeError () schedule_type_3 = DBTSchedule . from_dict ( data ) return schedule_type_3 schedule = _parse_schedule ( d . pop ( \"schedule\" )) type = d . pop ( \"type\" ) sync_schedule = cls ( schedule = schedule , type = type , ) sync_schedule . additional_properties = d return sync_schedule to_dict Source code in prefect_hightouch/api_client/models/sync_schedule.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def to_dict ( self ) -> Dict [ str , Any ]: schedule : Dict [ str , Any ] if isinstance ( self . schedule , IntervalSchedule ): schedule = self . schedule . to_dict () elif isinstance ( self . schedule , CronSchedule ): schedule = self . schedule . to_dict () elif isinstance ( self . schedule , VisualCronSchedule ): schedule = self . schedule . to_dict () else : schedule = self . schedule . to_dict () type = self . type field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"schedule\" : schedule , \"type\" : type , } ) return field_dict","title":"SyncSchedule"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule","text":"","title":"sync_schedule"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule","text":"Bases: BaseModel The scheduling configuration. It can be triggerd based on several ways: Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks) Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron. Visual: the sync will be trigged based a visual cron configuration on UI the sync will be trigged based on a dbt cloud job Source code in prefect_hightouch/api_client/models/sync_schedule.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 class SyncSchedule ( BaseModel ): \"\"\"The scheduling configuration. It can be triggerd based on several ways: Interval: the sync will be trigged based on certain interval(minutes/hours/days/weeks) Cron: the sync will be trigged based on cron expression https://en.wikipedia.org/wiki/Cron. Visual: the sync will be trigged based a visual cron configuration on UI DBT-cloud: the sync will be trigged based on a dbt cloud job Attributes: schedule (Union[CronSchedule, DBTSchedule, IntervalSchedule, VisualCronSchedule]): type (str): \"\"\" schedule : Union [ CronSchedule , DBTSchedule , IntervalSchedule , VisualCronSchedule ] = None type : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: schedule : Dict [ str , Any ] if isinstance ( self . schedule , IntervalSchedule ): schedule = self . schedule . to_dict () elif isinstance ( self . schedule , CronSchedule ): schedule = self . schedule . to_dict () elif isinstance ( self . schedule , VisualCronSchedule ): schedule = self . schedule . to_dict () else : schedule = self . schedule . to_dict () type = self . type field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"schedule\" : schedule , \"type\" : type , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} def _parse_schedule ( data : object , ) -> Union [ CronSchedule , DBTSchedule , IntervalSchedule , VisualCronSchedule ]: try : if not isinstance ( data , dict ): raise TypeError () schedule_type_0 = IntervalSchedule . from_dict ( data ) return schedule_type_0 except : # noqa: E722 pass try : if not isinstance ( data , dict ): raise TypeError () schedule_type_1 = CronSchedule . from_dict ( data ) return schedule_type_1 except : # noqa: E722 pass try : if not isinstance ( data , dict ): raise TypeError () schedule_type_2 = VisualCronSchedule . from_dict ( data ) return schedule_type_2 except : # noqa: E722 pass if not isinstance ( data , dict ): raise TypeError () schedule_type_3 = DBTSchedule . from_dict ( data ) return schedule_type_3 schedule = _parse_schedule ( d . pop ( \"schedule\" )) type = d . pop ( \"type\" ) sync_schedule = cls ( schedule = schedule , type = type , ) sync_schedule . additional_properties = d return sync_schedule @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"SyncSchedule"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.additional_keys","text":"","title":"additional_keys"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.additional_properties","text":"","title":"additional_properties"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.schedule","text":"","title":"schedule"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.type","text":"","title":"type"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.from_dict","text":"Source code in prefect_hightouch/api_client/models/sync_schedule.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} def _parse_schedule ( data : object , ) -> Union [ CronSchedule , DBTSchedule , IntervalSchedule , VisualCronSchedule ]: try : if not isinstance ( data , dict ): raise TypeError () schedule_type_0 = IntervalSchedule . from_dict ( data ) return schedule_type_0 except : # noqa: E722 pass try : if not isinstance ( data , dict ): raise TypeError () schedule_type_1 = CronSchedule . from_dict ( data ) return schedule_type_1 except : # noqa: E722 pass try : if not isinstance ( data , dict ): raise TypeError () schedule_type_2 = VisualCronSchedule . from_dict ( data ) return schedule_type_2 except : # noqa: E722 pass if not isinstance ( data , dict ): raise TypeError () schedule_type_3 = DBTSchedule . from_dict ( data ) return schedule_type_3 schedule = _parse_schedule ( d . pop ( \"schedule\" )) type = d . pop ( \"type\" ) sync_schedule = cls ( schedule = schedule , type = type , ) sync_schedule . additional_properties = d return sync_schedule","title":"from_dict()"},{"location":"models/sync_schedule/#prefect_hightouch.api_client.models.sync_schedule.SyncSchedule.to_dict","text":"Source code in prefect_hightouch/api_client/models/sync_schedule.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def to_dict ( self ) -> Dict [ str , Any ]: schedule : Dict [ str , Any ] if isinstance ( self . schedule , IntervalSchedule ): schedule = self . schedule . to_dict () elif isinstance ( self . schedule , CronSchedule ): schedule = self . schedule . to_dict () elif isinstance ( self . schedule , VisualCronSchedule ): schedule = self . schedule . to_dict () else : schedule = self . schedule . to_dict () type = self . type field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"schedule\" : schedule , \"type\" : type , } ) return field_dict","title":"to_dict()"},{"location":"models/sync_status/","text":"prefect_hightouch.api_client.models.sync_status SyncStatus Bases: str , Enum Source code in prefect_hightouch/api_client/models/sync_status.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class SyncStatus ( str , Enum ): DISABLED = \"disabled\" PENDING = \"pending\" CANCELLED = \"cancelled\" FAILED = \"failed\" QUEUED = \"queued\" SUCCESS = \"success\" WARNING = \"warning\" QUERYING = \"querying\" PROCESSING = \"processing\" REPORTING = \"reporting\" INTERRUPTED = \"interrupted\" def __str__ ( self ) -> str : return str ( self . value ) CANCELLED = 'cancelled' class-attribute DISABLED = 'disabled' class-attribute FAILED = 'failed' class-attribute PENDING = 'pending' class-attribute PROCESSING = 'processing' class-attribute QUERYING = 'querying' class-attribute QUEUED = 'queued' class-attribute SUCCESS = 'success' class-attribute WARNING = 'warning' class-attribute","title":"SyncStatus"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status","text":"","title":"sync_status"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/sync_status.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class SyncStatus ( str , Enum ): DISABLED = \"disabled\" PENDING = \"pending\" CANCELLED = \"cancelled\" FAILED = \"failed\" QUEUED = \"queued\" SUCCESS = \"success\" WARNING = \"warning\" QUERYING = \"querying\" PROCESSING = \"processing\" REPORTING = \"reporting\" INTERRUPTED = \"interrupted\" def __str__ ( self ) -> str : return str ( self . value )","title":"SyncStatus"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.CANCELLED","text":"","title":"CANCELLED"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.DISABLED","text":"","title":"DISABLED"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.FAILED","text":"","title":"FAILED"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.PENDING","text":"","title":"PENDING"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.PROCESSING","text":"","title":"PROCESSING"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.QUERYING","text":"","title":"QUERYING"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.QUEUED","text":"","title":"QUEUED"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.SUCCESS","text":"","title":"SUCCESS"},{"location":"models/sync_status/#prefect_hightouch.api_client.models.sync_status.SyncStatus.WARNING","text":"","title":"WARNING"},{"location":"models/trigger_run_custom_input/","text":"prefect_hightouch.api_client.models.trigger_run_custom_input","title":"TriggerRunCustomInput"},{"location":"models/trigger_run_custom_input/#prefect_hightouch.api_client.models.trigger_run_custom_input","text":"","title":"trigger_run_custom_input"},{"location":"models/trigger_run_input/","text":"prefect_hightouch.api_client.models.trigger_run_input","title":"TriggerRunInput"},{"location":"models/trigger_run_input/#prefect_hightouch.api_client.models.trigger_run_input","text":"","title":"trigger_run_input"},{"location":"models/trigger_run_output/","text":"prefect_hightouch.api_client.models.trigger_run_output","title":"TriggerRunOutput"},{"location":"models/trigger_run_output/#prefect_hightouch.api_client.models.trigger_run_output","text":"","title":"trigger_run_output"},{"location":"models/validate_error_json/","text":"prefect_hightouch.api_client.models.validate_error_json ValidateErrorJSON Bases: BaseModel Attributes: Name Type Description details ValidateErrorJSONDetails message ValidateErrorJSONMessage Source code in prefect_hightouch/api_client/models/validate_error_json.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class ValidateErrorJSON ( BaseModel ): \"\"\" Attributes: details (ValidateErrorJSONDetails): message (ValidateErrorJSONMessage): \"\"\" details : ValidateErrorJSONDetails = None message : ValidateErrorJSONMessage = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: details = self . details . to_dict () message = self . message . value field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"details\" : details , \"message\" : message , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} details = ValidateErrorJSONDetails . from_dict ( d . pop ( \"details\" )) message = ValidateErrorJSONMessage ( d . pop ( \"message\" )) validate_error_json = cls ( details = details , message = message , ) validate_error_json . additional_properties = d return validate_error_json @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute details : ValidateErrorJSONDetails = None class-attribute message : ValidateErrorJSONMessage = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/validate_error_json.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} details = ValidateErrorJSONDetails . from_dict ( d . pop ( \"details\" )) message = ValidateErrorJSONMessage ( d . pop ( \"message\" )) validate_error_json = cls ( details = details , message = message , ) validate_error_json . additional_properties = d return validate_error_json to_dict Source code in prefect_hightouch/api_client/models/validate_error_json.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def to_dict ( self ) -> Dict [ str , Any ]: details = self . details . to_dict () message = self . message . value field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"details\" : details , \"message\" : message , } ) return field_dict","title":"ValidateErrorJson"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json","text":"","title":"validate_error_json"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON","text":"Bases: BaseModel Attributes: Name Type Description details ValidateErrorJSONDetails message ValidateErrorJSONMessage Source code in prefect_hightouch/api_client/models/validate_error_json.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class ValidateErrorJSON ( BaseModel ): \"\"\" Attributes: details (ValidateErrorJSONDetails): message (ValidateErrorJSONMessage): \"\"\" details : ValidateErrorJSONDetails = None message : ValidateErrorJSONMessage = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: details = self . details . to_dict () message = self . message . value field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"details\" : details , \"message\" : message , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} details = ValidateErrorJSONDetails . from_dict ( d . pop ( \"details\" )) message = ValidateErrorJSONMessage ( d . pop ( \"message\" )) validate_error_json = cls ( details = details , message = message , ) validate_error_json . additional_properties = d return validate_error_json @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"ValidateErrorJSON"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.additional_keys","text":"","title":"additional_keys"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.additional_properties","text":"","title":"additional_properties"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.details","text":"","title":"details"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.message","text":"","title":"message"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.from_dict","text":"Source code in prefect_hightouch/api_client/models/validate_error_json.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} details = ValidateErrorJSONDetails . from_dict ( d . pop ( \"details\" )) message = ValidateErrorJSONMessage ( d . pop ( \"message\" )) validate_error_json = cls ( details = details , message = message , ) validate_error_json . additional_properties = d return validate_error_json","title":"from_dict()"},{"location":"models/validate_error_json/#prefect_hightouch.api_client.models.validate_error_json.ValidateErrorJSON.to_dict","text":"Source code in prefect_hightouch/api_client/models/validate_error_json.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def to_dict ( self ) -> Dict [ str , Any ]: details = self . details . to_dict () message = self . message . value field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"details\" : details , \"message\" : message , } ) return field_dict","title":"to_dict()"},{"location":"models/validate_error_json_details/","text":"prefect_hightouch.api_client.models.validate_error_json_details ValidateErrorJSONDetails Bases: BaseModel Source code in prefect_hightouch/api_client/models/validate_error_json_details.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class ValidateErrorJSONDetails ( BaseModel ): \"\"\" \"\"\" additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} validate_error_json_details = cls () validate_error_json_details . additional_properties = d return validate_error_json_details @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/validate_error_json_details.py 22 23 24 25 26 27 28 29 30 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} validate_error_json_details = cls () validate_error_json_details . additional_properties = d return validate_error_json_details to_dict Source code in prefect_hightouch/api_client/models/validate_error_json_details.py 15 16 17 18 19 20 def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict","title":"ValidateErrorJsonDetails"},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details","text":"","title":"validate_error_json_details"},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails","text":"Bases: BaseModel Source code in prefect_hightouch/api_client/models/validate_error_json_details.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class ValidateErrorJSONDetails ( BaseModel ): \"\"\" \"\"\" additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} validate_error_json_details = cls () validate_error_json_details . additional_properties = d return validate_error_json_details @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"ValidateErrorJSONDetails"},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails.additional_keys","text":"","title":"additional_keys"},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails.additional_properties","text":"","title":"additional_properties"},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails.from_dict","text":"Source code in prefect_hightouch/api_client/models/validate_error_json_details.py 22 23 24 25 26 27 28 29 30 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} validate_error_json_details = cls () validate_error_json_details . additional_properties = d return validate_error_json_details","title":"from_dict()"},{"location":"models/validate_error_json_details/#prefect_hightouch.api_client.models.validate_error_json_details.ValidateErrorJSONDetails.to_dict","text":"Source code in prefect_hightouch/api_client/models/validate_error_json_details.py 15 16 17 18 19 20 def to_dict ( self ) -> Dict [ str , Any ]: field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ({}) return field_dict","title":"to_dict()"},{"location":"models/validate_error_json_message/","text":"prefect_hightouch.api_client.models.validate_error_json_message ValidateErrorJSONMessage Bases: str , Enum Source code in prefect_hightouch/api_client/models/validate_error_json_message.py 4 5 6 7 8 class ValidateErrorJSONMessage ( str , Enum ): VALIDATION_FAILED = \"Validation failed\" def __str__ ( self ) -> str : return str ( self . value )","title":"ValidateErrorJsonMessage"},{"location":"models/validate_error_json_message/#prefect_hightouch.api_client.models.validate_error_json_message","text":"","title":"validate_error_json_message"},{"location":"models/validate_error_json_message/#prefect_hightouch.api_client.models.validate_error_json_message.ValidateErrorJSONMessage","text":"Bases: str , Enum Source code in prefect_hightouch/api_client/models/validate_error_json_message.py 4 5 6 7 8 class ValidateErrorJSONMessage ( str , Enum ): VALIDATION_FAILED = \"Validation failed\" def __str__ ( self ) -> str : return str ( self . value )","title":"ValidateErrorJSONMessage"},{"location":"models/visual_cron_schedule/","text":"prefect_hightouch.api_client.models.visual_cron_schedule VisualCronSchedule Bases: BaseModel Attributes: Name Type Description expressions List [ VisualCronScheduleExpressionsItem ] Source code in prefect_hightouch/api_client/models/visual_cron_schedule.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 class VisualCronSchedule ( BaseModel ): \"\"\" Attributes: expressions (List[VisualCronScheduleExpressionsItem]): \"\"\" expressions : List [ VisualCronScheduleExpressionsItem ] = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: expressions = [] for expressions_item_data in self . expressions : expressions_item = expressions_item_data . to_dict () expressions . append ( expressions_item ) field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"expressions\" : expressions , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} expressions = [] _expressions = d . pop ( \"expressions\" ) for expressions_item_data in _expressions : expressions_item = VisualCronScheduleExpressionsItem . from_dict ( expressions_item_data ) expressions . append ( expressions_item ) visual_cron_schedule = cls ( expressions = expressions , ) visual_cron_schedule . additional_properties = d return visual_cron_schedule @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute expressions : List [ VisualCronScheduleExpressionsItem ] = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/visual_cron_schedule.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} expressions = [] _expressions = d . pop ( \"expressions\" ) for expressions_item_data in _expressions : expressions_item = VisualCronScheduleExpressionsItem . from_dict ( expressions_item_data ) expressions . append ( expressions_item ) visual_cron_schedule = cls ( expressions = expressions , ) visual_cron_schedule . additional_properties = d return visual_cron_schedule to_dict Source code in prefect_hightouch/api_client/models/visual_cron_schedule.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def to_dict ( self ) -> Dict [ str , Any ]: expressions = [] for expressions_item_data in self . expressions : expressions_item = expressions_item_data . to_dict () expressions . append ( expressions_item ) field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"expressions\" : expressions , } ) return field_dict","title":"VisualCronSchedule"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule","text":"","title":"visual_cron_schedule"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule","text":"Bases: BaseModel Attributes: Name Type Description expressions List [ VisualCronScheduleExpressionsItem ] Source code in prefect_hightouch/api_client/models/visual_cron_schedule.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 class VisualCronSchedule ( BaseModel ): \"\"\" Attributes: expressions (List[VisualCronScheduleExpressionsItem]): \"\"\" expressions : List [ VisualCronScheduleExpressionsItem ] = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: expressions = [] for expressions_item_data in self . expressions : expressions_item = expressions_item_data . to_dict () expressions . append ( expressions_item ) field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"expressions\" : expressions , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} expressions = [] _expressions = d . pop ( \"expressions\" ) for expressions_item_data in _expressions : expressions_item = VisualCronScheduleExpressionsItem . from_dict ( expressions_item_data ) expressions . append ( expressions_item ) visual_cron_schedule = cls ( expressions = expressions , ) visual_cron_schedule . additional_properties = d return visual_cron_schedule @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"VisualCronSchedule"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.additional_keys","text":"","title":"additional_keys"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.additional_properties","text":"","title":"additional_properties"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.expressions","text":"","title":"expressions"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.from_dict","text":"Source code in prefect_hightouch/api_client/models/visual_cron_schedule.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} expressions = [] _expressions = d . pop ( \"expressions\" ) for expressions_item_data in _expressions : expressions_item = VisualCronScheduleExpressionsItem . from_dict ( expressions_item_data ) expressions . append ( expressions_item ) visual_cron_schedule = cls ( expressions = expressions , ) visual_cron_schedule . additional_properties = d return visual_cron_schedule","title":"from_dict()"},{"location":"models/visual_cron_schedule/#prefect_hightouch.api_client.models.visual_cron_schedule.VisualCronSchedule.to_dict","text":"Source code in prefect_hightouch/api_client/models/visual_cron_schedule.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def to_dict ( self ) -> Dict [ str , Any ]: expressions = [] for expressions_item_data in self . expressions : expressions_item = expressions_item_data . to_dict () expressions . append ( expressions_item ) field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"expressions\" : expressions , } ) return field_dict","title":"to_dict()"},{"location":"models/visual_cron_schedule_expressions_item/","text":"prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item VisualCronScheduleExpressionsItem Bases: BaseModel Attributes: Name Type Description days RecordDayBooleanOrUndefined Construct a type with a set of properties K of type T time str Source code in prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class VisualCronScheduleExpressionsItem ( BaseModel ): \"\"\" Attributes: days (RecordDayBooleanOrUndefined): Construct a type with a set of properties K of type T time (str): \"\"\" days : RecordDayBooleanOrUndefined = None time : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: days = self . days . to_dict () time = self . time field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"days\" : days , \"time\" : time , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} days = RecordDayBooleanOrUndefined . from_dict ( d . pop ( \"days\" )) time = d . pop ( \"time\" ) visual_cron_schedule_expressions_item = cls ( days = days , time = time , ) visual_cron_schedule_expressions_item . additional_properties = d return visual_cron_schedule_expressions_item @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties additional_keys : List [ str ] property additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) class-attribute days : RecordDayBooleanOrUndefined = None class-attribute time : str = None class-attribute from_dict classmethod Source code in prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} days = RecordDayBooleanOrUndefined . from_dict ( d . pop ( \"days\" )) time = d . pop ( \"time\" ) visual_cron_schedule_expressions_item = cls ( days = days , time = time , ) visual_cron_schedule_expressions_item . additional_properties = d return visual_cron_schedule_expressions_item to_dict Source code in prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def to_dict ( self ) -> Dict [ str , Any ]: days = self . days . to_dict () time = self . time field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"days\" : days , \"time\" : time , } ) return field_dict","title":"VisualCronScheduleExpressionsItem"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item","text":"","title":"visual_cron_schedule_expressions_item"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem","text":"Bases: BaseModel Attributes: Name Type Description days RecordDayBooleanOrUndefined Construct a type with a set of properties K of type T time str Source code in prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class VisualCronScheduleExpressionsItem ( BaseModel ): \"\"\" Attributes: days (RecordDayBooleanOrUndefined): Construct a type with a set of properties K of type T time (str): \"\"\" days : RecordDayBooleanOrUndefined = None time : str = None additional_properties : Dict [ str , Any ] = Field ( default_factory = dict ) def to_dict ( self ) -> Dict [ str , Any ]: days = self . days . to_dict () time = self . time field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"days\" : days , \"time\" : time , } ) return field_dict @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} days = RecordDayBooleanOrUndefined . from_dict ( d . pop ( \"days\" )) time = d . pop ( \"time\" ) visual_cron_schedule_expressions_item = cls ( days = days , time = time , ) visual_cron_schedule_expressions_item . additional_properties = d return visual_cron_schedule_expressions_item @property def additional_keys ( self ) -> List [ str ]: return list ( self . additional_properties . keys ()) def __getitem__ ( self , key : str ) -> Any : return self . additional_properties . get ( key ) def __setitem__ ( self , key : str , value : Any ) -> None : self . additional_properties [ key ] = value def __delitem__ ( self , key : str ) -> None : del self . additional_properties [ key ] def __contains__ ( self , key : str ) -> bool : return key in self . additional_properties","title":"VisualCronScheduleExpressionsItem"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.additional_keys","text":"","title":"additional_keys"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.additional_properties","text":"","title":"additional_properties"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.days","text":"","title":"days"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.time","text":"","title":"time"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.from_dict","text":"Source code in prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 @classmethod def from_dict ( cls : Type [ T ], src_dict : Dict [ str , Any ]) -> T : if src_dict is None or src_dict is UNSET : return {} d = { k : v if v is not None else UNSET for k , v in src_dict . items ()} days = RecordDayBooleanOrUndefined . from_dict ( d . pop ( \"days\" )) time = d . pop ( \"time\" ) visual_cron_schedule_expressions_item = cls ( days = days , time = time , ) visual_cron_schedule_expressions_item . additional_properties = d return visual_cron_schedule_expressions_item","title":"from_dict()"},{"location":"models/visual_cron_schedule_expressions_item/#prefect_hightouch.api_client.models.visual_cron_schedule_expressions_item.VisualCronScheduleExpressionsItem.to_dict","text":"Source code in prefect_hightouch/api_client/models/visual_cron_schedule_expressions_item.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def to_dict ( self ) -> Dict [ str , Any ]: days = self . days . to_dict () time = self . time field_dict : Dict [ str , Any ] = {} field_dict . update ( self . additional_properties ) field_dict . update ( { \"days\" : days , \"time\" : time , } ) return field_dict","title":"to_dict()"}]}